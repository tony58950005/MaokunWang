
ClassUart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045ac  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  08004770  08004770  00014770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004910  08004910  000205a8  2**0
                  CONTENTS
  4 .ARM          00000008  08004910  08004910  00014910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004918  08004918  000205a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08004918  08004918  00014918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004924  08004924  00014924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005a8  20000000  08004928  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  200005a8  08004ed0  000205a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000071c  08004ed0  0002071c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000205a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012150  00000000  00000000  000205d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002aee  00000000  00000000  00032728  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cf8  00000000  00000000  00035218  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bd0  00000000  00000000  00035f10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024fe6  00000000  00000000  00036ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ba44  00000000  00000000  0005bac6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d0221  00000000  00000000  0006750a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013772b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003868  00000000  00000000  001377a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	200005a8 	.word	0x200005a8
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004758 	.word	0x08004758

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	200005ac 	.word	0x200005ac
 8000200:	08004758 	.word	0x08004758

08000204 <strcmp>:
 8000204:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
 800020c:	2a01      	cmp	r2, #1
 800020e:	bf28      	it	cs
 8000210:	429a      	cmpcs	r2, r3
 8000212:	d0f7      	beq.n	8000204 <strcmp>
 8000214:	1ad0      	subs	r0, r2, r3
 8000216:	4770      	bx	lr

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800051c:	4b0e      	ldr	r3, [pc, #56]	; (8000558 <HAL_Init+0x40>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a0d      	ldr	r2, [pc, #52]	; (8000558 <HAL_Init+0x40>)
 8000522:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000526:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000528:	4b0b      	ldr	r3, [pc, #44]	; (8000558 <HAL_Init+0x40>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4a0a      	ldr	r2, [pc, #40]	; (8000558 <HAL_Init+0x40>)
 800052e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000532:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000534:	4b08      	ldr	r3, [pc, #32]	; (8000558 <HAL_Init+0x40>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a07      	ldr	r2, [pc, #28]	; (8000558 <HAL_Init+0x40>)
 800053a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800053e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000540:	2003      	movs	r0, #3
 8000542:	f000 f94d 	bl	80007e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000546:	2000      	movs	r0, #0
 8000548:	f000 f808 	bl	800055c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800054c:	f003 fe4e 	bl	80041ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000550:	2300      	movs	r3, #0
}
 8000552:	4618      	mov	r0, r3
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	40023c00 	.word	0x40023c00

0800055c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000564:	4b12      	ldr	r3, [pc, #72]	; (80005b0 <HAL_InitTick+0x54>)
 8000566:	681a      	ldr	r2, [r3, #0]
 8000568:	4b12      	ldr	r3, [pc, #72]	; (80005b4 <HAL_InitTick+0x58>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	4619      	mov	r1, r3
 800056e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000572:	fbb3 f3f1 	udiv	r3, r3, r1
 8000576:	fbb2 f3f3 	udiv	r3, r2, r3
 800057a:	4618      	mov	r0, r3
 800057c:	f000 f965 	bl	800084a <HAL_SYSTICK_Config>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000586:	2301      	movs	r3, #1
 8000588:	e00e      	b.n	80005a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	2b0f      	cmp	r3, #15
 800058e:	d80a      	bhi.n	80005a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000590:	2200      	movs	r2, #0
 8000592:	6879      	ldr	r1, [r7, #4]
 8000594:	f04f 30ff 	mov.w	r0, #4294967295
 8000598:	f000 f92d 	bl	80007f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800059c:	4a06      	ldr	r2, [pc, #24]	; (80005b8 <HAL_InitTick+0x5c>)
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005a2:	2300      	movs	r3, #0
 80005a4:	e000      	b.n	80005a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005a6:	2301      	movs	r3, #1
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	20000008 	.word	0x20000008
 80005b4:	20000004 	.word	0x20000004
 80005b8:	20000000 	.word	0x20000000

080005bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005c0:	4b06      	ldr	r3, [pc, #24]	; (80005dc <HAL_IncTick+0x20>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	461a      	mov	r2, r3
 80005c6:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <HAL_IncTick+0x24>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4413      	add	r3, r2
 80005cc:	4a04      	ldr	r2, [pc, #16]	; (80005e0 <HAL_IncTick+0x24>)
 80005ce:	6013      	str	r3, [r2, #0]
}
 80005d0:	bf00      	nop
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	20000004 	.word	0x20000004
 80005e0:	200006ac 	.word	0x200006ac

080005e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  return uwTick;
 80005e8:	4b03      	ldr	r3, [pc, #12]	; (80005f8 <HAL_GetTick+0x14>)
 80005ea:	681b      	ldr	r3, [r3, #0]
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	200006ac 	.word	0x200006ac

080005fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000604:	f7ff ffee 	bl	80005e4 <HAL_GetTick>
 8000608:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000614:	d005      	beq.n	8000622 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000616:	4b09      	ldr	r3, [pc, #36]	; (800063c <HAL_Delay+0x40>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	461a      	mov	r2, r3
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	4413      	add	r3, r2
 8000620:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000622:	bf00      	nop
 8000624:	f7ff ffde 	bl	80005e4 <HAL_GetTick>
 8000628:	4602      	mov	r2, r0
 800062a:	68bb      	ldr	r3, [r7, #8]
 800062c:	1ad3      	subs	r3, r2, r3
 800062e:	68fa      	ldr	r2, [r7, #12]
 8000630:	429a      	cmp	r2, r3
 8000632:	d8f7      	bhi.n	8000624 <HAL_Delay+0x28>
  {
  }
}
 8000634:	bf00      	nop
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000004 	.word	0x20000004

08000640 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000640:	b480      	push	{r7}
 8000642:	b085      	sub	sp, #20
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	f003 0307 	and.w	r3, r3, #7
 800064e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000650:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <__NVIC_SetPriorityGrouping+0x44>)
 8000652:	68db      	ldr	r3, [r3, #12]
 8000654:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000656:	68ba      	ldr	r2, [r7, #8]
 8000658:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800065c:	4013      	ands	r3, r2
 800065e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000668:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800066c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000670:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000672:	4a04      	ldr	r2, [pc, #16]	; (8000684 <__NVIC_SetPriorityGrouping+0x44>)
 8000674:	68bb      	ldr	r3, [r7, #8]
 8000676:	60d3      	str	r3, [r2, #12]
}
 8000678:	bf00      	nop
 800067a:	3714      	adds	r7, #20
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr
 8000684:	e000ed00 	.word	0xe000ed00

08000688 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800068c:	4b04      	ldr	r3, [pc, #16]	; (80006a0 <__NVIC_GetPriorityGrouping+0x18>)
 800068e:	68db      	ldr	r3, [r3, #12]
 8000690:	0a1b      	lsrs	r3, r3, #8
 8000692:	f003 0307 	and.w	r3, r3, #7
}
 8000696:	4618      	mov	r0, r3
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr
 80006a0:	e000ed00 	.word	0xe000ed00

080006a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	4603      	mov	r3, r0
 80006ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	db0b      	blt.n	80006ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	f003 021f 	and.w	r2, r3, #31
 80006bc:	4907      	ldr	r1, [pc, #28]	; (80006dc <__NVIC_EnableIRQ+0x38>)
 80006be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c2:	095b      	lsrs	r3, r3, #5
 80006c4:	2001      	movs	r0, #1
 80006c6:	fa00 f202 	lsl.w	r2, r0, r2
 80006ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006ce:	bf00      	nop
 80006d0:	370c      	adds	r7, #12
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	e000e100 	.word	0xe000e100

080006e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	6039      	str	r1, [r7, #0]
 80006ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	db0a      	blt.n	800070a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	b2da      	uxtb	r2, r3
 80006f8:	490c      	ldr	r1, [pc, #48]	; (800072c <__NVIC_SetPriority+0x4c>)
 80006fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006fe:	0112      	lsls	r2, r2, #4
 8000700:	b2d2      	uxtb	r2, r2
 8000702:	440b      	add	r3, r1
 8000704:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000708:	e00a      	b.n	8000720 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	b2da      	uxtb	r2, r3
 800070e:	4908      	ldr	r1, [pc, #32]	; (8000730 <__NVIC_SetPriority+0x50>)
 8000710:	79fb      	ldrb	r3, [r7, #7]
 8000712:	f003 030f 	and.w	r3, r3, #15
 8000716:	3b04      	subs	r3, #4
 8000718:	0112      	lsls	r2, r2, #4
 800071a:	b2d2      	uxtb	r2, r2
 800071c:	440b      	add	r3, r1
 800071e:	761a      	strb	r2, [r3, #24]
}
 8000720:	bf00      	nop
 8000722:	370c      	adds	r7, #12
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr
 800072c:	e000e100 	.word	0xe000e100
 8000730:	e000ed00 	.word	0xe000ed00

08000734 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000734:	b480      	push	{r7}
 8000736:	b089      	sub	sp, #36	; 0x24
 8000738:	af00      	add	r7, sp, #0
 800073a:	60f8      	str	r0, [r7, #12]
 800073c:	60b9      	str	r1, [r7, #8]
 800073e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	f003 0307 	and.w	r3, r3, #7
 8000746:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000748:	69fb      	ldr	r3, [r7, #28]
 800074a:	f1c3 0307 	rsb	r3, r3, #7
 800074e:	2b04      	cmp	r3, #4
 8000750:	bf28      	it	cs
 8000752:	2304      	movcs	r3, #4
 8000754:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000756:	69fb      	ldr	r3, [r7, #28]
 8000758:	3304      	adds	r3, #4
 800075a:	2b06      	cmp	r3, #6
 800075c:	d902      	bls.n	8000764 <NVIC_EncodePriority+0x30>
 800075e:	69fb      	ldr	r3, [r7, #28]
 8000760:	3b03      	subs	r3, #3
 8000762:	e000      	b.n	8000766 <NVIC_EncodePriority+0x32>
 8000764:	2300      	movs	r3, #0
 8000766:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000768:	f04f 32ff 	mov.w	r2, #4294967295
 800076c:	69bb      	ldr	r3, [r7, #24]
 800076e:	fa02 f303 	lsl.w	r3, r2, r3
 8000772:	43da      	mvns	r2, r3
 8000774:	68bb      	ldr	r3, [r7, #8]
 8000776:	401a      	ands	r2, r3
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800077c:	f04f 31ff 	mov.w	r1, #4294967295
 8000780:	697b      	ldr	r3, [r7, #20]
 8000782:	fa01 f303 	lsl.w	r3, r1, r3
 8000786:	43d9      	mvns	r1, r3
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800078c:	4313      	orrs	r3, r2
         );
}
 800078e:	4618      	mov	r0, r3
 8000790:	3724      	adds	r7, #36	; 0x24
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
	...

0800079c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	3b01      	subs	r3, #1
 80007a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007ac:	d301      	bcc.n	80007b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007ae:	2301      	movs	r3, #1
 80007b0:	e00f      	b.n	80007d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007b2:	4a0a      	ldr	r2, [pc, #40]	; (80007dc <SysTick_Config+0x40>)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	3b01      	subs	r3, #1
 80007b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007ba:	210f      	movs	r1, #15
 80007bc:	f04f 30ff 	mov.w	r0, #4294967295
 80007c0:	f7ff ff8e 	bl	80006e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007c4:	4b05      	ldr	r3, [pc, #20]	; (80007dc <SysTick_Config+0x40>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007ca:	4b04      	ldr	r3, [pc, #16]	; (80007dc <SysTick_Config+0x40>)
 80007cc:	2207      	movs	r2, #7
 80007ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007d0:	2300      	movs	r3, #0
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	e000e010 	.word	0xe000e010

080007e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007e8:	6878      	ldr	r0, [r7, #4]
 80007ea:	f7ff ff29 	bl	8000640 <__NVIC_SetPriorityGrouping>
}
 80007ee:	bf00      	nop
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}

080007f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007f6:	b580      	push	{r7, lr}
 80007f8:	b086      	sub	sp, #24
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	4603      	mov	r3, r0
 80007fe:	60b9      	str	r1, [r7, #8]
 8000800:	607a      	str	r2, [r7, #4]
 8000802:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000804:	2300      	movs	r3, #0
 8000806:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000808:	f7ff ff3e 	bl	8000688 <__NVIC_GetPriorityGrouping>
 800080c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800080e:	687a      	ldr	r2, [r7, #4]
 8000810:	68b9      	ldr	r1, [r7, #8]
 8000812:	6978      	ldr	r0, [r7, #20]
 8000814:	f7ff ff8e 	bl	8000734 <NVIC_EncodePriority>
 8000818:	4602      	mov	r2, r0
 800081a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800081e:	4611      	mov	r1, r2
 8000820:	4618      	mov	r0, r3
 8000822:	f7ff ff5d 	bl	80006e0 <__NVIC_SetPriority>
}
 8000826:	bf00      	nop
 8000828:	3718      	adds	r7, #24
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}

0800082e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800082e:	b580      	push	{r7, lr}
 8000830:	b082      	sub	sp, #8
 8000832:	af00      	add	r7, sp, #0
 8000834:	4603      	mov	r3, r0
 8000836:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800083c:	4618      	mov	r0, r3
 800083e:	f7ff ff31 	bl	80006a4 <__NVIC_EnableIRQ>
}
 8000842:	bf00      	nop
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}

0800084a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800084a:	b580      	push	{r7, lr}
 800084c:	b082      	sub	sp, #8
 800084e:	af00      	add	r7, sp, #0
 8000850:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000852:	6878      	ldr	r0, [r7, #4]
 8000854:	f7ff ffa2 	bl	800079c <SysTick_Config>
 8000858:	4603      	mov	r3, r0
}
 800085a:	4618      	mov	r0, r3
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
	...

08000864 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b086      	sub	sp, #24
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800086c:	2300      	movs	r3, #0
 800086e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000870:	f7ff feb8 	bl	80005e4 <HAL_GetTick>
 8000874:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d101      	bne.n	8000880 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800087c:	2301      	movs	r3, #1
 800087e:	e099      	b.n	80009b4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	2200      	movs	r2, #0
 8000884:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	2202      	movs	r2, #2
 800088c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	681a      	ldr	r2, [r3, #0]
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	f022 0201 	bic.w	r2, r2, #1
 800089e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80008a0:	e00f      	b.n	80008c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80008a2:	f7ff fe9f 	bl	80005e4 <HAL_GetTick>
 80008a6:	4602      	mov	r2, r0
 80008a8:	693b      	ldr	r3, [r7, #16]
 80008aa:	1ad3      	subs	r3, r2, r3
 80008ac:	2b05      	cmp	r3, #5
 80008ae:	d908      	bls.n	80008c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	2220      	movs	r2, #32
 80008b4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	2203      	movs	r2, #3
 80008ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80008be:	2303      	movs	r3, #3
 80008c0:	e078      	b.n	80009b4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	f003 0301 	and.w	r3, r3, #1
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d1e8      	bne.n	80008a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80008d8:	697a      	ldr	r2, [r7, #20]
 80008da:	4b38      	ldr	r3, [pc, #224]	; (80009bc <HAL_DMA_Init+0x158>)
 80008dc:	4013      	ands	r3, r2
 80008de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	685a      	ldr	r2, [r3, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	689b      	ldr	r3, [r3, #8]
 80008e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	691b      	ldr	r3, [r3, #16]
 80008f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	699b      	ldr	r3, [r3, #24]
 8000900:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000906:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	6a1b      	ldr	r3, [r3, #32]
 800090c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800090e:	697a      	ldr	r2, [r7, #20]
 8000910:	4313      	orrs	r3, r2
 8000912:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000918:	2b04      	cmp	r3, #4
 800091a:	d107      	bne.n	800092c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000924:	4313      	orrs	r3, r2
 8000926:	697a      	ldr	r2, [r7, #20]
 8000928:	4313      	orrs	r3, r2
 800092a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	697a      	ldr	r2, [r7, #20]
 8000932:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	695b      	ldr	r3, [r3, #20]
 800093a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	f023 0307 	bic.w	r3, r3, #7
 8000942:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000948:	697a      	ldr	r2, [r7, #20]
 800094a:	4313      	orrs	r3, r2
 800094c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000952:	2b04      	cmp	r3, #4
 8000954:	d117      	bne.n	8000986 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800095a:	697a      	ldr	r2, [r7, #20]
 800095c:	4313      	orrs	r3, r2
 800095e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000964:	2b00      	cmp	r3, #0
 8000966:	d00e      	beq.n	8000986 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000968:	6878      	ldr	r0, [r7, #4]
 800096a:	f000 fa0b 	bl	8000d84 <DMA_CheckFifoParam>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d008      	beq.n	8000986 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	2240      	movs	r2, #64	; 0x40
 8000978:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	2201      	movs	r2, #1
 800097e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000982:	2301      	movs	r3, #1
 8000984:	e016      	b.n	80009b4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	697a      	ldr	r2, [r7, #20]
 800098c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800098e:	6878      	ldr	r0, [r7, #4]
 8000990:	f000 f9c2 	bl	8000d18 <DMA_CalcBaseAndBitshift>
 8000994:	4603      	mov	r3, r0
 8000996:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800099c:	223f      	movs	r2, #63	; 0x3f
 800099e:	409a      	lsls	r2, r3
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	2200      	movs	r2, #0
 80009a8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	2201      	movs	r2, #1
 80009ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80009b2:	2300      	movs	r3, #0
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	3718      	adds	r7, #24
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	f010803f 	.word	0xf010803f

080009c0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	2b02      	cmp	r3, #2
 80009d2:	d004      	beq.n	80009de <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	2280      	movs	r2, #128	; 0x80
 80009d8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80009da:	2301      	movs	r3, #1
 80009dc:	e00c      	b.n	80009f8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	2205      	movs	r2, #5
 80009e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	f022 0201 	bic.w	r2, r2, #1
 80009f4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80009f6:	2300      	movs	r3, #0
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	370c      	adds	r7, #12
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr

08000a04 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b086      	sub	sp, #24
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000a10:	4b92      	ldr	r3, [pc, #584]	; (8000c5c <HAL_DMA_IRQHandler+0x258>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a92      	ldr	r2, [pc, #584]	; (8000c60 <HAL_DMA_IRQHandler+0x25c>)
 8000a16:	fba2 2303 	umull	r2, r3, r2, r3
 8000a1a:	0a9b      	lsrs	r3, r3, #10
 8000a1c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a22:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000a24:	693b      	ldr	r3, [r7, #16]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a2e:	2208      	movs	r2, #8
 8000a30:	409a      	lsls	r2, r3
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	4013      	ands	r3, r2
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d01a      	beq.n	8000a70 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	f003 0304 	and.w	r3, r3, #4
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d013      	beq.n	8000a70 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	681a      	ldr	r2, [r3, #0]
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	f022 0204 	bic.w	r2, r2, #4
 8000a56:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a5c:	2208      	movs	r2, #8
 8000a5e:	409a      	lsls	r2, r3
 8000a60:	693b      	ldr	r3, [r7, #16]
 8000a62:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a68:	f043 0201 	orr.w	r2, r3, #1
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a74:	2201      	movs	r2, #1
 8000a76:	409a      	lsls	r2, r3
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	4013      	ands	r3, r2
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d012      	beq.n	8000aa6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	695b      	ldr	r3, [r3, #20]
 8000a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d00b      	beq.n	8000aa6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a92:	2201      	movs	r2, #1
 8000a94:	409a      	lsls	r2, r3
 8000a96:	693b      	ldr	r3, [r7, #16]
 8000a98:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a9e:	f043 0202 	orr.w	r2, r3, #2
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000aaa:	2204      	movs	r2, #4
 8000aac:	409a      	lsls	r2, r3
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d012      	beq.n	8000adc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f003 0302 	and.w	r3, r3, #2
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d00b      	beq.n	8000adc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ac8:	2204      	movs	r2, #4
 8000aca:	409a      	lsls	r2, r3
 8000acc:	693b      	ldr	r3, [r7, #16]
 8000ace:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ad4:	f043 0204 	orr.w	r2, r3, #4
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ae0:	2210      	movs	r2, #16
 8000ae2:	409a      	lsls	r2, r3
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	4013      	ands	r3, r2
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d043      	beq.n	8000b74 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f003 0308 	and.w	r3, r3, #8
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d03c      	beq.n	8000b74 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000afe:	2210      	movs	r2, #16
 8000b00:	409a      	lsls	r2, r3
 8000b02:	693b      	ldr	r3, [r7, #16]
 8000b04:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d018      	beq.n	8000b46 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d108      	bne.n	8000b34 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d024      	beq.n	8000b74 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2e:	6878      	ldr	r0, [r7, #4]
 8000b30:	4798      	blx	r3
 8000b32:	e01f      	b.n	8000b74 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d01b      	beq.n	8000b74 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b40:	6878      	ldr	r0, [r7, #4]
 8000b42:	4798      	blx	r3
 8000b44:	e016      	b.n	8000b74 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d107      	bne.n	8000b64 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	f022 0208 	bic.w	r2, r2, #8
 8000b62:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d003      	beq.n	8000b74 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b70:	6878      	ldr	r0, [r7, #4]
 8000b72:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b78:	2220      	movs	r2, #32
 8000b7a:	409a      	lsls	r2, r3
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	4013      	ands	r3, r2
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	f000 808e 	beq.w	8000ca2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f003 0310 	and.w	r3, r3, #16
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	f000 8086 	beq.w	8000ca2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b9a:	2220      	movs	r2, #32
 8000b9c:	409a      	lsls	r2, r3
 8000b9e:	693b      	ldr	r3, [r7, #16]
 8000ba0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	2b05      	cmp	r3, #5
 8000bac:	d136      	bne.n	8000c1c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f022 0216 	bic.w	r2, r2, #22
 8000bbc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	695a      	ldr	r2, [r3, #20]
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000bcc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d103      	bne.n	8000bde <HAL_DMA_IRQHandler+0x1da>
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d007      	beq.n	8000bee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f022 0208 	bic.w	r2, r2, #8
 8000bec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bf2:	223f      	movs	r2, #63	; 0x3f
 8000bf4:	409a      	lsls	r2, r3
 8000bf6:	693b      	ldr	r3, [r7, #16]
 8000bf8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2201      	movs	r2, #1
 8000c06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d07d      	beq.n	8000d0e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000c16:	6878      	ldr	r0, [r7, #4]
 8000c18:	4798      	blx	r3
        }
        return;
 8000c1a:	e078      	b.n	8000d0e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d01c      	beq.n	8000c64 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d108      	bne.n	8000c4a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d030      	beq.n	8000ca2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c44:	6878      	ldr	r0, [r7, #4]
 8000c46:	4798      	blx	r3
 8000c48:	e02b      	b.n	8000ca2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d027      	beq.n	8000ca2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c56:	6878      	ldr	r0, [r7, #4]
 8000c58:	4798      	blx	r3
 8000c5a:	e022      	b.n	8000ca2 <HAL_DMA_IRQHandler+0x29e>
 8000c5c:	20000008 	.word	0x20000008
 8000c60:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d10f      	bne.n	8000c92 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f022 0210 	bic.w	r2, r2, #16
 8000c80:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2200      	movs	r2, #0
 8000c86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d003      	beq.n	8000ca2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c9e:	6878      	ldr	r0, [r7, #4]
 8000ca0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d032      	beq.n	8000d10 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000cae:	f003 0301 	and.w	r3, r3, #1
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d022      	beq.n	8000cfc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2205      	movs	r2, #5
 8000cba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f022 0201 	bic.w	r2, r2, #1
 8000ccc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8000cce:	68bb      	ldr	r3, [r7, #8]
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	60bb      	str	r3, [r7, #8]
 8000cd4:	697a      	ldr	r2, [r7, #20]
 8000cd6:	429a      	cmp	r2, r3
 8000cd8:	d307      	bcc.n	8000cea <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f003 0301 	and.w	r3, r3, #1
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d1f2      	bne.n	8000cce <HAL_DMA_IRQHandler+0x2ca>
 8000ce8:	e000      	b.n	8000cec <HAL_DMA_IRQHandler+0x2e8>
          break;
 8000cea:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2200      	movs	r2, #0
 8000cf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d005      	beq.n	8000d10 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d08:	6878      	ldr	r0, [r7, #4]
 8000d0a:	4798      	blx	r3
 8000d0c:	e000      	b.n	8000d10 <HAL_DMA_IRQHandler+0x30c>
        return;
 8000d0e:	bf00      	nop
    }
  }
}
 8000d10:	3718      	adds	r7, #24
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop

08000d18 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	3b10      	subs	r3, #16
 8000d28:	4a14      	ldr	r2, [pc, #80]	; (8000d7c <DMA_CalcBaseAndBitshift+0x64>)
 8000d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d2e:	091b      	lsrs	r3, r3, #4
 8000d30:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000d32:	4a13      	ldr	r2, [pc, #76]	; (8000d80 <DMA_CalcBaseAndBitshift+0x68>)
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	4413      	add	r3, r2
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	2b03      	cmp	r3, #3
 8000d44:	d909      	bls.n	8000d5a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000d4e:	f023 0303 	bic.w	r3, r3, #3
 8000d52:	1d1a      	adds	r2, r3, #4
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	659a      	str	r2, [r3, #88]	; 0x58
 8000d58:	e007      	b.n	8000d6a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000d62:	f023 0303 	bic.w	r3, r3, #3
 8000d66:	687a      	ldr	r2, [r7, #4]
 8000d68:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3714      	adds	r7, #20
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	aaaaaaab 	.word	0xaaaaaaab
 8000d80:	080047e0 	.word	0x080047e0

08000d84 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b085      	sub	sp, #20
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d94:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	699b      	ldr	r3, [r3, #24]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d11f      	bne.n	8000dde <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8000d9e:	68bb      	ldr	r3, [r7, #8]
 8000da0:	2b03      	cmp	r3, #3
 8000da2:	d855      	bhi.n	8000e50 <DMA_CheckFifoParam+0xcc>
 8000da4:	a201      	add	r2, pc, #4	; (adr r2, 8000dac <DMA_CheckFifoParam+0x28>)
 8000da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000daa:	bf00      	nop
 8000dac:	08000dbd 	.word	0x08000dbd
 8000db0:	08000dcf 	.word	0x08000dcf
 8000db4:	08000dbd 	.word	0x08000dbd
 8000db8:	08000e51 	.word	0x08000e51
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d045      	beq.n	8000e54 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000dcc:	e042      	b.n	8000e54 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dd2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000dd6:	d13f      	bne.n	8000e58 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000ddc:	e03c      	b.n	8000e58 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	699b      	ldr	r3, [r3, #24]
 8000de2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000de6:	d121      	bne.n	8000e2c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	2b03      	cmp	r3, #3
 8000dec:	d836      	bhi.n	8000e5c <DMA_CheckFifoParam+0xd8>
 8000dee:	a201      	add	r2, pc, #4	; (adr r2, 8000df4 <DMA_CheckFifoParam+0x70>)
 8000df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000df4:	08000e05 	.word	0x08000e05
 8000df8:	08000e0b 	.word	0x08000e0b
 8000dfc:	08000e05 	.word	0x08000e05
 8000e00:	08000e1d 	.word	0x08000e1d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8000e04:	2301      	movs	r3, #1
 8000e06:	73fb      	strb	r3, [r7, #15]
      break;
 8000e08:	e02f      	b.n	8000e6a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d024      	beq.n	8000e60 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000e1a:	e021      	b.n	8000e60 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e20:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000e24:	d11e      	bne.n	8000e64 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8000e26:	2301      	movs	r3, #1
 8000e28:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8000e2a:	e01b      	b.n	8000e64 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	2b02      	cmp	r3, #2
 8000e30:	d902      	bls.n	8000e38 <DMA_CheckFifoParam+0xb4>
 8000e32:	2b03      	cmp	r3, #3
 8000e34:	d003      	beq.n	8000e3e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8000e36:	e018      	b.n	8000e6a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	73fb      	strb	r3, [r7, #15]
      break;
 8000e3c:	e015      	b.n	8000e6a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d00e      	beq.n	8000e68 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	73fb      	strb	r3, [r7, #15]
      break;
 8000e4e:	e00b      	b.n	8000e68 <DMA_CheckFifoParam+0xe4>
      break;
 8000e50:	bf00      	nop
 8000e52:	e00a      	b.n	8000e6a <DMA_CheckFifoParam+0xe6>
      break;
 8000e54:	bf00      	nop
 8000e56:	e008      	b.n	8000e6a <DMA_CheckFifoParam+0xe6>
      break;
 8000e58:	bf00      	nop
 8000e5a:	e006      	b.n	8000e6a <DMA_CheckFifoParam+0xe6>
      break;
 8000e5c:	bf00      	nop
 8000e5e:	e004      	b.n	8000e6a <DMA_CheckFifoParam+0xe6>
      break;
 8000e60:	bf00      	nop
 8000e62:	e002      	b.n	8000e6a <DMA_CheckFifoParam+0xe6>
      break;   
 8000e64:	bf00      	nop
 8000e66:	e000      	b.n	8000e6a <DMA_CheckFifoParam+0xe6>
      break;
 8000e68:	bf00      	nop
    }
  } 
  
  return status; 
 8000e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3714      	adds	r7, #20
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr

08000e78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b089      	sub	sp, #36	; 0x24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e82:	2300      	movs	r3, #0
 8000e84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e86:	2300      	movs	r3, #0
 8000e88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61fb      	str	r3, [r7, #28]
 8000e92:	e165      	b.n	8001160 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e94:	2201      	movs	r2, #1
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	697a      	ldr	r2, [r7, #20]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	f040 8154 	bne.w	800115a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d00b      	beq.n	8000ed2 <HAL_GPIO_Init+0x5a>
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	2b02      	cmp	r3, #2
 8000ec0:	d007      	beq.n	8000ed2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ec6:	2b11      	cmp	r3, #17
 8000ec8:	d003      	beq.n	8000ed2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	2b12      	cmp	r3, #18
 8000ed0:	d130      	bne.n	8000f34 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	2203      	movs	r2, #3
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	43db      	mvns	r3, r3
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	68da      	ldr	r2, [r3, #12]
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f08:	2201      	movs	r2, #1
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	43db      	mvns	r3, r3
 8000f12:	69ba      	ldr	r2, [r7, #24]
 8000f14:	4013      	ands	r3, r2
 8000f16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	091b      	lsrs	r3, r3, #4
 8000f1e:	f003 0201 	and.w	r2, r3, #1
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	2203      	movs	r2, #3
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	43db      	mvns	r3, r3
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	689a      	ldr	r2, [r3, #8]
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d003      	beq.n	8000f74 <HAL_GPIO_Init+0xfc>
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	2b12      	cmp	r3, #18
 8000f72:	d123      	bne.n	8000fbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	08da      	lsrs	r2, r3, #3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	3208      	adds	r2, #8
 8000f7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	f003 0307 	and.w	r3, r3, #7
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	220f      	movs	r2, #15
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	43db      	mvns	r3, r3
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	4013      	ands	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	691a      	ldr	r2, [r3, #16]
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	f003 0307 	and.w	r3, r3, #7
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	08da      	lsrs	r2, r3, #3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	3208      	adds	r2, #8
 8000fb6:	69b9      	ldr	r1, [r7, #24]
 8000fb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	2203      	movs	r2, #3
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f003 0203 	and.w	r2, r3, #3
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	f000 80ae 	beq.w	800115a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	60fb      	str	r3, [r7, #12]
 8001002:	4b5c      	ldr	r3, [pc, #368]	; (8001174 <HAL_GPIO_Init+0x2fc>)
 8001004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001006:	4a5b      	ldr	r2, [pc, #364]	; (8001174 <HAL_GPIO_Init+0x2fc>)
 8001008:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800100c:	6453      	str	r3, [r2, #68]	; 0x44
 800100e:	4b59      	ldr	r3, [pc, #356]	; (8001174 <HAL_GPIO_Init+0x2fc>)
 8001010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001012:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800101a:	4a57      	ldr	r2, [pc, #348]	; (8001178 <HAL_GPIO_Init+0x300>)
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	089b      	lsrs	r3, r3, #2
 8001020:	3302      	adds	r3, #2
 8001022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001026:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	f003 0303 	and.w	r3, r3, #3
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	220f      	movs	r2, #15
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	43db      	mvns	r3, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4013      	ands	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a4e      	ldr	r2, [pc, #312]	; (800117c <HAL_GPIO_Init+0x304>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d025      	beq.n	8001092 <HAL_GPIO_Init+0x21a>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a4d      	ldr	r2, [pc, #308]	; (8001180 <HAL_GPIO_Init+0x308>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d01f      	beq.n	800108e <HAL_GPIO_Init+0x216>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a4c      	ldr	r2, [pc, #304]	; (8001184 <HAL_GPIO_Init+0x30c>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d019      	beq.n	800108a <HAL_GPIO_Init+0x212>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a4b      	ldr	r2, [pc, #300]	; (8001188 <HAL_GPIO_Init+0x310>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d013      	beq.n	8001086 <HAL_GPIO_Init+0x20e>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a4a      	ldr	r2, [pc, #296]	; (800118c <HAL_GPIO_Init+0x314>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d00d      	beq.n	8001082 <HAL_GPIO_Init+0x20a>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a49      	ldr	r2, [pc, #292]	; (8001190 <HAL_GPIO_Init+0x318>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d007      	beq.n	800107e <HAL_GPIO_Init+0x206>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a48      	ldr	r2, [pc, #288]	; (8001194 <HAL_GPIO_Init+0x31c>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d101      	bne.n	800107a <HAL_GPIO_Init+0x202>
 8001076:	2306      	movs	r3, #6
 8001078:	e00c      	b.n	8001094 <HAL_GPIO_Init+0x21c>
 800107a:	2307      	movs	r3, #7
 800107c:	e00a      	b.n	8001094 <HAL_GPIO_Init+0x21c>
 800107e:	2305      	movs	r3, #5
 8001080:	e008      	b.n	8001094 <HAL_GPIO_Init+0x21c>
 8001082:	2304      	movs	r3, #4
 8001084:	e006      	b.n	8001094 <HAL_GPIO_Init+0x21c>
 8001086:	2303      	movs	r3, #3
 8001088:	e004      	b.n	8001094 <HAL_GPIO_Init+0x21c>
 800108a:	2302      	movs	r3, #2
 800108c:	e002      	b.n	8001094 <HAL_GPIO_Init+0x21c>
 800108e:	2301      	movs	r3, #1
 8001090:	e000      	b.n	8001094 <HAL_GPIO_Init+0x21c>
 8001092:	2300      	movs	r3, #0
 8001094:	69fa      	ldr	r2, [r7, #28]
 8001096:	f002 0203 	and.w	r2, r2, #3
 800109a:	0092      	lsls	r2, r2, #2
 800109c:	4093      	lsls	r3, r2
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010a4:	4934      	ldr	r1, [pc, #208]	; (8001178 <HAL_GPIO_Init+0x300>)
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	089b      	lsrs	r3, r3, #2
 80010aa:	3302      	adds	r3, #2
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010b2:	4b39      	ldr	r3, [pc, #228]	; (8001198 <HAL_GPIO_Init+0x320>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	43db      	mvns	r3, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4013      	ands	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d003      	beq.n	80010d6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010d6:	4a30      	ldr	r2, [pc, #192]	; (8001198 <HAL_GPIO_Init+0x320>)
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010dc:	4b2e      	ldr	r3, [pc, #184]	; (8001198 <HAL_GPIO_Init+0x320>)
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	43db      	mvns	r3, r3
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	4013      	ands	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d003      	beq.n	8001100 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001100:	4a25      	ldr	r2, [pc, #148]	; (8001198 <HAL_GPIO_Init+0x320>)
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001106:	4b24      	ldr	r3, [pc, #144]	; (8001198 <HAL_GPIO_Init+0x320>)
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	43db      	mvns	r3, r3
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	4013      	ands	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d003      	beq.n	800112a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	4313      	orrs	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800112a:	4a1b      	ldr	r2, [pc, #108]	; (8001198 <HAL_GPIO_Init+0x320>)
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001130:	4b19      	ldr	r3, [pc, #100]	; (8001198 <HAL_GPIO_Init+0x320>)
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	43db      	mvns	r3, r3
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	4013      	ands	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001148:	2b00      	cmp	r3, #0
 800114a:	d003      	beq.n	8001154 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	4313      	orrs	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001154:	4a10      	ldr	r2, [pc, #64]	; (8001198 <HAL_GPIO_Init+0x320>)
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	3301      	adds	r3, #1
 800115e:	61fb      	str	r3, [r7, #28]
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	2b0f      	cmp	r3, #15
 8001164:	f67f ae96 	bls.w	8000e94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001168:	bf00      	nop
 800116a:	3724      	adds	r7, #36	; 0x24
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	40023800 	.word	0x40023800
 8001178:	40013800 	.word	0x40013800
 800117c:	40020000 	.word	0x40020000
 8001180:	40020400 	.word	0x40020400
 8001184:	40020800 	.word	0x40020800
 8001188:	40020c00 	.word	0x40020c00
 800118c:	40021000 	.word	0x40021000
 8001190:	40021400 	.word	0x40021400
 8001194:	40021800 	.word	0x40021800
 8001198:	40013c00 	.word	0x40013c00

0800119c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	460b      	mov	r3, r1
 80011a6:	807b      	strh	r3, [r7, #2]
 80011a8:	4613      	mov	r3, r2
 80011aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011ac:	787b      	ldrb	r3, [r7, #1]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d003      	beq.n	80011ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011b2:	887a      	ldrh	r2, [r7, #2]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011b8:	e003      	b.n	80011c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011ba:	887b      	ldrh	r3, [r7, #2]
 80011bc:	041a      	lsls	r2, r3, #16
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	619a      	str	r2, [r3, #24]
}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
	...

080011d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d101      	bne.n	80011e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011e0:	2301      	movs	r3, #1
 80011e2:	e0cc      	b.n	800137e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80011e4:	4b68      	ldr	r3, [pc, #416]	; (8001388 <HAL_RCC_ClockConfig+0x1b8>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f003 030f 	and.w	r3, r3, #15
 80011ec:	683a      	ldr	r2, [r7, #0]
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d90c      	bls.n	800120c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011f2:	4b65      	ldr	r3, [pc, #404]	; (8001388 <HAL_RCC_ClockConfig+0x1b8>)
 80011f4:	683a      	ldr	r2, [r7, #0]
 80011f6:	b2d2      	uxtb	r2, r2
 80011f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011fa:	4b63      	ldr	r3, [pc, #396]	; (8001388 <HAL_RCC_ClockConfig+0x1b8>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 030f 	and.w	r3, r3, #15
 8001202:	683a      	ldr	r2, [r7, #0]
 8001204:	429a      	cmp	r2, r3
 8001206:	d001      	beq.n	800120c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	e0b8      	b.n	800137e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 0302 	and.w	r3, r3, #2
 8001214:	2b00      	cmp	r3, #0
 8001216:	d020      	beq.n	800125a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 0304 	and.w	r3, r3, #4
 8001220:	2b00      	cmp	r3, #0
 8001222:	d005      	beq.n	8001230 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001224:	4b59      	ldr	r3, [pc, #356]	; (800138c <HAL_RCC_ClockConfig+0x1bc>)
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	4a58      	ldr	r2, [pc, #352]	; (800138c <HAL_RCC_ClockConfig+0x1bc>)
 800122a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800122e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f003 0308 	and.w	r3, r3, #8
 8001238:	2b00      	cmp	r3, #0
 800123a:	d005      	beq.n	8001248 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800123c:	4b53      	ldr	r3, [pc, #332]	; (800138c <HAL_RCC_ClockConfig+0x1bc>)
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	4a52      	ldr	r2, [pc, #328]	; (800138c <HAL_RCC_ClockConfig+0x1bc>)
 8001242:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001246:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001248:	4b50      	ldr	r3, [pc, #320]	; (800138c <HAL_RCC_ClockConfig+0x1bc>)
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	494d      	ldr	r1, [pc, #308]	; (800138c <HAL_RCC_ClockConfig+0x1bc>)
 8001256:	4313      	orrs	r3, r2
 8001258:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	2b00      	cmp	r3, #0
 8001264:	d044      	beq.n	80012f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d107      	bne.n	800127e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800126e:	4b47      	ldr	r3, [pc, #284]	; (800138c <HAL_RCC_ClockConfig+0x1bc>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d119      	bne.n	80012ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e07f      	b.n	800137e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	2b02      	cmp	r3, #2
 8001284:	d003      	beq.n	800128e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800128a:	2b03      	cmp	r3, #3
 800128c:	d107      	bne.n	800129e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800128e:	4b3f      	ldr	r3, [pc, #252]	; (800138c <HAL_RCC_ClockConfig+0x1bc>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d109      	bne.n	80012ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e06f      	b.n	800137e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800129e:	4b3b      	ldr	r3, [pc, #236]	; (800138c <HAL_RCC_ClockConfig+0x1bc>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d101      	bne.n	80012ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e067      	b.n	800137e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012ae:	4b37      	ldr	r3, [pc, #220]	; (800138c <HAL_RCC_ClockConfig+0x1bc>)
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	f023 0203 	bic.w	r2, r3, #3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	4934      	ldr	r1, [pc, #208]	; (800138c <HAL_RCC_ClockConfig+0x1bc>)
 80012bc:	4313      	orrs	r3, r2
 80012be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012c0:	f7ff f990 	bl	80005e4 <HAL_GetTick>
 80012c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012c6:	e00a      	b.n	80012de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012c8:	f7ff f98c 	bl	80005e4 <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d901      	bls.n	80012de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e04f      	b.n	800137e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012de:	4b2b      	ldr	r3, [pc, #172]	; (800138c <HAL_RCC_ClockConfig+0x1bc>)
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	f003 020c 	and.w	r2, r3, #12
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d1eb      	bne.n	80012c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80012f0:	4b25      	ldr	r3, [pc, #148]	; (8001388 <HAL_RCC_ClockConfig+0x1b8>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f003 030f 	and.w	r3, r3, #15
 80012f8:	683a      	ldr	r2, [r7, #0]
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d20c      	bcs.n	8001318 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012fe:	4b22      	ldr	r3, [pc, #136]	; (8001388 <HAL_RCC_ClockConfig+0x1b8>)
 8001300:	683a      	ldr	r2, [r7, #0]
 8001302:	b2d2      	uxtb	r2, r2
 8001304:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001306:	4b20      	ldr	r3, [pc, #128]	; (8001388 <HAL_RCC_ClockConfig+0x1b8>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 030f 	and.w	r3, r3, #15
 800130e:	683a      	ldr	r2, [r7, #0]
 8001310:	429a      	cmp	r2, r3
 8001312:	d001      	beq.n	8001318 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	e032      	b.n	800137e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f003 0304 	and.w	r3, r3, #4
 8001320:	2b00      	cmp	r3, #0
 8001322:	d008      	beq.n	8001336 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001324:	4b19      	ldr	r3, [pc, #100]	; (800138c <HAL_RCC_ClockConfig+0x1bc>)
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	4916      	ldr	r1, [pc, #88]	; (800138c <HAL_RCC_ClockConfig+0x1bc>)
 8001332:	4313      	orrs	r3, r2
 8001334:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0308 	and.w	r3, r3, #8
 800133e:	2b00      	cmp	r3, #0
 8001340:	d009      	beq.n	8001356 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001342:	4b12      	ldr	r3, [pc, #72]	; (800138c <HAL_RCC_ClockConfig+0x1bc>)
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	691b      	ldr	r3, [r3, #16]
 800134e:	00db      	lsls	r3, r3, #3
 8001350:	490e      	ldr	r1, [pc, #56]	; (800138c <HAL_RCC_ClockConfig+0x1bc>)
 8001352:	4313      	orrs	r3, r2
 8001354:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001356:	f000 f855 	bl	8001404 <HAL_RCC_GetSysClockFreq>
 800135a:	4601      	mov	r1, r0
 800135c:	4b0b      	ldr	r3, [pc, #44]	; (800138c <HAL_RCC_ClockConfig+0x1bc>)
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	091b      	lsrs	r3, r3, #4
 8001362:	f003 030f 	and.w	r3, r3, #15
 8001366:	4a0a      	ldr	r2, [pc, #40]	; (8001390 <HAL_RCC_ClockConfig+0x1c0>)
 8001368:	5cd3      	ldrb	r3, [r2, r3]
 800136a:	fa21 f303 	lsr.w	r3, r1, r3
 800136e:	4a09      	ldr	r2, [pc, #36]	; (8001394 <HAL_RCC_ClockConfig+0x1c4>)
 8001370:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001372:	4b09      	ldr	r3, [pc, #36]	; (8001398 <HAL_RCC_ClockConfig+0x1c8>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff f8f0 	bl	800055c <HAL_InitTick>

  return HAL_OK;
 800137c:	2300      	movs	r3, #0
}
 800137e:	4618      	mov	r0, r3
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40023c00 	.word	0x40023c00
 800138c:	40023800 	.word	0x40023800
 8001390:	080047e8 	.word	0x080047e8
 8001394:	20000008 	.word	0x20000008
 8001398:	20000000 	.word	0x20000000

0800139c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013a0:	4b03      	ldr	r3, [pc, #12]	; (80013b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80013a2:	681b      	ldr	r3, [r3, #0]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	20000008 	.word	0x20000008

080013b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80013b8:	f7ff fff0 	bl	800139c <HAL_RCC_GetHCLKFreq>
 80013bc:	4601      	mov	r1, r0
 80013be:	4b05      	ldr	r3, [pc, #20]	; (80013d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	0a9b      	lsrs	r3, r3, #10
 80013c4:	f003 0307 	and.w	r3, r3, #7
 80013c8:	4a03      	ldr	r2, [pc, #12]	; (80013d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80013ca:	5cd3      	ldrb	r3, [r2, r3]
 80013cc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40023800 	.word	0x40023800
 80013d8:	080047f8 	.word	0x080047f8

080013dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80013e0:	f7ff ffdc 	bl	800139c <HAL_RCC_GetHCLKFreq>
 80013e4:	4601      	mov	r1, r0
 80013e6:	4b05      	ldr	r3, [pc, #20]	; (80013fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	0b5b      	lsrs	r3, r3, #13
 80013ec:	f003 0307 	and.w	r3, r3, #7
 80013f0:	4a03      	ldr	r2, [pc, #12]	; (8001400 <HAL_RCC_GetPCLK2Freq+0x24>)
 80013f2:	5cd3      	ldrb	r3, [r2, r3]
 80013f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	40023800 	.word	0x40023800
 8001400:	080047f8 	.word	0x080047f8

08001404 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001404:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001406:	b087      	sub	sp, #28
 8001408:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800140a:	2300      	movs	r3, #0
 800140c:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 800140e:	2300      	movs	r3, #0
 8001410:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8001412:	2300      	movs	r3, #0
 8001414:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8001416:	2300      	movs	r3, #0
 8001418:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800141a:	2300      	movs	r3, #0
 800141c:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800141e:	4bc6      	ldr	r3, [pc, #792]	; (8001738 <HAL_RCC_GetSysClockFreq+0x334>)
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	f003 030c 	and.w	r3, r3, #12
 8001426:	2b0c      	cmp	r3, #12
 8001428:	f200 817e 	bhi.w	8001728 <HAL_RCC_GetSysClockFreq+0x324>
 800142c:	a201      	add	r2, pc, #4	; (adr r2, 8001434 <HAL_RCC_GetSysClockFreq+0x30>)
 800142e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001432:	bf00      	nop
 8001434:	08001469 	.word	0x08001469
 8001438:	08001729 	.word	0x08001729
 800143c:	08001729 	.word	0x08001729
 8001440:	08001729 	.word	0x08001729
 8001444:	0800146f 	.word	0x0800146f
 8001448:	08001729 	.word	0x08001729
 800144c:	08001729 	.word	0x08001729
 8001450:	08001729 	.word	0x08001729
 8001454:	08001475 	.word	0x08001475
 8001458:	08001729 	.word	0x08001729
 800145c:	08001729 	.word	0x08001729
 8001460:	08001729 	.word	0x08001729
 8001464:	080015d1 	.word	0x080015d1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001468:	4bb4      	ldr	r3, [pc, #720]	; (800173c <HAL_RCC_GetSysClockFreq+0x338>)
 800146a:	613b      	str	r3, [r7, #16]
       break;
 800146c:	e15f      	b.n	800172e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800146e:	4bb4      	ldr	r3, [pc, #720]	; (8001740 <HAL_RCC_GetSysClockFreq+0x33c>)
 8001470:	613b      	str	r3, [r7, #16]
      break;
 8001472:	e15c      	b.n	800172e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001474:	4bb0      	ldr	r3, [pc, #704]	; (8001738 <HAL_RCC_GetSysClockFreq+0x334>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800147c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800147e:	4bae      	ldr	r3, [pc, #696]	; (8001738 <HAL_RCC_GetSysClockFreq+0x334>)
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d04a      	beq.n	8001520 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800148a:	4bab      	ldr	r3, [pc, #684]	; (8001738 <HAL_RCC_GetSysClockFreq+0x334>)
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	099b      	lsrs	r3, r3, #6
 8001490:	f04f 0400 	mov.w	r4, #0
 8001494:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001498:	f04f 0200 	mov.w	r2, #0
 800149c:	ea03 0501 	and.w	r5, r3, r1
 80014a0:	ea04 0602 	and.w	r6, r4, r2
 80014a4:	4629      	mov	r1, r5
 80014a6:	4632      	mov	r2, r6
 80014a8:	f04f 0300 	mov.w	r3, #0
 80014ac:	f04f 0400 	mov.w	r4, #0
 80014b0:	0154      	lsls	r4, r2, #5
 80014b2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80014b6:	014b      	lsls	r3, r1, #5
 80014b8:	4619      	mov	r1, r3
 80014ba:	4622      	mov	r2, r4
 80014bc:	1b49      	subs	r1, r1, r5
 80014be:	eb62 0206 	sbc.w	r2, r2, r6
 80014c2:	f04f 0300 	mov.w	r3, #0
 80014c6:	f04f 0400 	mov.w	r4, #0
 80014ca:	0194      	lsls	r4, r2, #6
 80014cc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80014d0:	018b      	lsls	r3, r1, #6
 80014d2:	1a5b      	subs	r3, r3, r1
 80014d4:	eb64 0402 	sbc.w	r4, r4, r2
 80014d8:	f04f 0100 	mov.w	r1, #0
 80014dc:	f04f 0200 	mov.w	r2, #0
 80014e0:	00e2      	lsls	r2, r4, #3
 80014e2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80014e6:	00d9      	lsls	r1, r3, #3
 80014e8:	460b      	mov	r3, r1
 80014ea:	4614      	mov	r4, r2
 80014ec:	195b      	adds	r3, r3, r5
 80014ee:	eb44 0406 	adc.w	r4, r4, r6
 80014f2:	f04f 0100 	mov.w	r1, #0
 80014f6:	f04f 0200 	mov.w	r2, #0
 80014fa:	0262      	lsls	r2, r4, #9
 80014fc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001500:	0259      	lsls	r1, r3, #9
 8001502:	460b      	mov	r3, r1
 8001504:	4614      	mov	r4, r2
 8001506:	4618      	mov	r0, r3
 8001508:	4621      	mov	r1, r4
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	f04f 0400 	mov.w	r4, #0
 8001510:	461a      	mov	r2, r3
 8001512:	4623      	mov	r3, r4
 8001514:	f7fe fe80 	bl	8000218 <__aeabi_uldivmod>
 8001518:	4603      	mov	r3, r0
 800151a:	460c      	mov	r4, r1
 800151c:	617b      	str	r3, [r7, #20]
 800151e:	e049      	b.n	80015b4 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001520:	4b85      	ldr	r3, [pc, #532]	; (8001738 <HAL_RCC_GetSysClockFreq+0x334>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	099b      	lsrs	r3, r3, #6
 8001526:	f04f 0400 	mov.w	r4, #0
 800152a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800152e:	f04f 0200 	mov.w	r2, #0
 8001532:	ea03 0501 	and.w	r5, r3, r1
 8001536:	ea04 0602 	and.w	r6, r4, r2
 800153a:	4629      	mov	r1, r5
 800153c:	4632      	mov	r2, r6
 800153e:	f04f 0300 	mov.w	r3, #0
 8001542:	f04f 0400 	mov.w	r4, #0
 8001546:	0154      	lsls	r4, r2, #5
 8001548:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800154c:	014b      	lsls	r3, r1, #5
 800154e:	4619      	mov	r1, r3
 8001550:	4622      	mov	r2, r4
 8001552:	1b49      	subs	r1, r1, r5
 8001554:	eb62 0206 	sbc.w	r2, r2, r6
 8001558:	f04f 0300 	mov.w	r3, #0
 800155c:	f04f 0400 	mov.w	r4, #0
 8001560:	0194      	lsls	r4, r2, #6
 8001562:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001566:	018b      	lsls	r3, r1, #6
 8001568:	1a5b      	subs	r3, r3, r1
 800156a:	eb64 0402 	sbc.w	r4, r4, r2
 800156e:	f04f 0100 	mov.w	r1, #0
 8001572:	f04f 0200 	mov.w	r2, #0
 8001576:	00e2      	lsls	r2, r4, #3
 8001578:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800157c:	00d9      	lsls	r1, r3, #3
 800157e:	460b      	mov	r3, r1
 8001580:	4614      	mov	r4, r2
 8001582:	195b      	adds	r3, r3, r5
 8001584:	eb44 0406 	adc.w	r4, r4, r6
 8001588:	f04f 0100 	mov.w	r1, #0
 800158c:	f04f 0200 	mov.w	r2, #0
 8001590:	02a2      	lsls	r2, r4, #10
 8001592:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001596:	0299      	lsls	r1, r3, #10
 8001598:	460b      	mov	r3, r1
 800159a:	4614      	mov	r4, r2
 800159c:	4618      	mov	r0, r3
 800159e:	4621      	mov	r1, r4
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f04f 0400 	mov.w	r4, #0
 80015a6:	461a      	mov	r2, r3
 80015a8:	4623      	mov	r3, r4
 80015aa:	f7fe fe35 	bl	8000218 <__aeabi_uldivmod>
 80015ae:	4603      	mov	r3, r0
 80015b0:	460c      	mov	r4, r1
 80015b2:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80015b4:	4b60      	ldr	r3, [pc, #384]	; (8001738 <HAL_RCC_GetSysClockFreq+0x334>)
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	0c1b      	lsrs	r3, r3, #16
 80015ba:	f003 0303 	and.w	r3, r3, #3
 80015be:	3301      	adds	r3, #1
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80015c4:	697a      	ldr	r2, [r7, #20]
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80015cc:	613b      	str	r3, [r7, #16]
      break;
 80015ce:	e0ae      	b.n	800172e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015d0:	4b59      	ldr	r3, [pc, #356]	; (8001738 <HAL_RCC_GetSysClockFreq+0x334>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015d8:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015da:	4b57      	ldr	r3, [pc, #348]	; (8001738 <HAL_RCC_GetSysClockFreq+0x334>)
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d04a      	beq.n	800167c <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015e6:	4b54      	ldr	r3, [pc, #336]	; (8001738 <HAL_RCC_GetSysClockFreq+0x334>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	099b      	lsrs	r3, r3, #6
 80015ec:	f04f 0400 	mov.w	r4, #0
 80015f0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80015f4:	f04f 0200 	mov.w	r2, #0
 80015f8:	ea03 0501 	and.w	r5, r3, r1
 80015fc:	ea04 0602 	and.w	r6, r4, r2
 8001600:	4629      	mov	r1, r5
 8001602:	4632      	mov	r2, r6
 8001604:	f04f 0300 	mov.w	r3, #0
 8001608:	f04f 0400 	mov.w	r4, #0
 800160c:	0154      	lsls	r4, r2, #5
 800160e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001612:	014b      	lsls	r3, r1, #5
 8001614:	4619      	mov	r1, r3
 8001616:	4622      	mov	r2, r4
 8001618:	1b49      	subs	r1, r1, r5
 800161a:	eb62 0206 	sbc.w	r2, r2, r6
 800161e:	f04f 0300 	mov.w	r3, #0
 8001622:	f04f 0400 	mov.w	r4, #0
 8001626:	0194      	lsls	r4, r2, #6
 8001628:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800162c:	018b      	lsls	r3, r1, #6
 800162e:	1a5b      	subs	r3, r3, r1
 8001630:	eb64 0402 	sbc.w	r4, r4, r2
 8001634:	f04f 0100 	mov.w	r1, #0
 8001638:	f04f 0200 	mov.w	r2, #0
 800163c:	00e2      	lsls	r2, r4, #3
 800163e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001642:	00d9      	lsls	r1, r3, #3
 8001644:	460b      	mov	r3, r1
 8001646:	4614      	mov	r4, r2
 8001648:	195b      	adds	r3, r3, r5
 800164a:	eb44 0406 	adc.w	r4, r4, r6
 800164e:	f04f 0100 	mov.w	r1, #0
 8001652:	f04f 0200 	mov.w	r2, #0
 8001656:	0262      	lsls	r2, r4, #9
 8001658:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800165c:	0259      	lsls	r1, r3, #9
 800165e:	460b      	mov	r3, r1
 8001660:	4614      	mov	r4, r2
 8001662:	4618      	mov	r0, r3
 8001664:	4621      	mov	r1, r4
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	f04f 0400 	mov.w	r4, #0
 800166c:	461a      	mov	r2, r3
 800166e:	4623      	mov	r3, r4
 8001670:	f7fe fdd2 	bl	8000218 <__aeabi_uldivmod>
 8001674:	4603      	mov	r3, r0
 8001676:	460c      	mov	r4, r1
 8001678:	617b      	str	r3, [r7, #20]
 800167a:	e049      	b.n	8001710 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800167c:	4b2e      	ldr	r3, [pc, #184]	; (8001738 <HAL_RCC_GetSysClockFreq+0x334>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	099b      	lsrs	r3, r3, #6
 8001682:	f04f 0400 	mov.w	r4, #0
 8001686:	f240 11ff 	movw	r1, #511	; 0x1ff
 800168a:	f04f 0200 	mov.w	r2, #0
 800168e:	ea03 0501 	and.w	r5, r3, r1
 8001692:	ea04 0602 	and.w	r6, r4, r2
 8001696:	4629      	mov	r1, r5
 8001698:	4632      	mov	r2, r6
 800169a:	f04f 0300 	mov.w	r3, #0
 800169e:	f04f 0400 	mov.w	r4, #0
 80016a2:	0154      	lsls	r4, r2, #5
 80016a4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80016a8:	014b      	lsls	r3, r1, #5
 80016aa:	4619      	mov	r1, r3
 80016ac:	4622      	mov	r2, r4
 80016ae:	1b49      	subs	r1, r1, r5
 80016b0:	eb62 0206 	sbc.w	r2, r2, r6
 80016b4:	f04f 0300 	mov.w	r3, #0
 80016b8:	f04f 0400 	mov.w	r4, #0
 80016bc:	0194      	lsls	r4, r2, #6
 80016be:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80016c2:	018b      	lsls	r3, r1, #6
 80016c4:	1a5b      	subs	r3, r3, r1
 80016c6:	eb64 0402 	sbc.w	r4, r4, r2
 80016ca:	f04f 0100 	mov.w	r1, #0
 80016ce:	f04f 0200 	mov.w	r2, #0
 80016d2:	00e2      	lsls	r2, r4, #3
 80016d4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80016d8:	00d9      	lsls	r1, r3, #3
 80016da:	460b      	mov	r3, r1
 80016dc:	4614      	mov	r4, r2
 80016de:	195b      	adds	r3, r3, r5
 80016e0:	eb44 0406 	adc.w	r4, r4, r6
 80016e4:	f04f 0100 	mov.w	r1, #0
 80016e8:	f04f 0200 	mov.w	r2, #0
 80016ec:	02a2      	lsls	r2, r4, #10
 80016ee:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80016f2:	0299      	lsls	r1, r3, #10
 80016f4:	460b      	mov	r3, r1
 80016f6:	4614      	mov	r4, r2
 80016f8:	4618      	mov	r0, r3
 80016fa:	4621      	mov	r1, r4
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f04f 0400 	mov.w	r4, #0
 8001702:	461a      	mov	r2, r3
 8001704:	4623      	mov	r3, r4
 8001706:	f7fe fd87 	bl	8000218 <__aeabi_uldivmod>
 800170a:	4603      	mov	r3, r0
 800170c:	460c      	mov	r4, r1
 800170e:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001710:	4b09      	ldr	r3, [pc, #36]	; (8001738 <HAL_RCC_GetSysClockFreq+0x334>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	0f1b      	lsrs	r3, r3, #28
 8001716:	f003 0307 	and.w	r3, r3, #7
 800171a:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 800171c:	697a      	ldr	r2, [r7, #20]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	fbb2 f3f3 	udiv	r3, r2, r3
 8001724:	613b      	str	r3, [r7, #16]
      break;
 8001726:	e002      	b.n	800172e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001728:	4b04      	ldr	r3, [pc, #16]	; (800173c <HAL_RCC_GetSysClockFreq+0x338>)
 800172a:	613b      	str	r3, [r7, #16]
      break;
 800172c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800172e:	693b      	ldr	r3, [r7, #16]
}
 8001730:	4618      	mov	r0, r3
 8001732:	371c      	adds	r7, #28
 8001734:	46bd      	mov	sp, r7
 8001736:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001738:	40023800 	.word	0x40023800
 800173c:	00f42400 	.word	0x00f42400
 8001740:	007a1200 	.word	0x007a1200

08001744 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800174c:	2300      	movs	r3, #0
 800174e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0301 	and.w	r3, r3, #1
 8001758:	2b00      	cmp	r3, #0
 800175a:	f000 8083 	beq.w	8001864 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800175e:	4b95      	ldr	r3, [pc, #596]	; (80019b4 <HAL_RCC_OscConfig+0x270>)
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	f003 030c 	and.w	r3, r3, #12
 8001766:	2b04      	cmp	r3, #4
 8001768:	d019      	beq.n	800179e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800176a:	4b92      	ldr	r3, [pc, #584]	; (80019b4 <HAL_RCC_OscConfig+0x270>)
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001772:	2b08      	cmp	r3, #8
 8001774:	d106      	bne.n	8001784 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001776:	4b8f      	ldr	r3, [pc, #572]	; (80019b4 <HAL_RCC_OscConfig+0x270>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800177e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001782:	d00c      	beq.n	800179e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001784:	4b8b      	ldr	r3, [pc, #556]	; (80019b4 <HAL_RCC_OscConfig+0x270>)
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800178c:	2b0c      	cmp	r3, #12
 800178e:	d112      	bne.n	80017b6 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001790:	4b88      	ldr	r3, [pc, #544]	; (80019b4 <HAL_RCC_OscConfig+0x270>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001798:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800179c:	d10b      	bne.n	80017b6 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800179e:	4b85      	ldr	r3, [pc, #532]	; (80019b4 <HAL_RCC_OscConfig+0x270>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d05b      	beq.n	8001862 <HAL_RCC_OscConfig+0x11e>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d157      	bne.n	8001862 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e216      	b.n	8001be4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017be:	d106      	bne.n	80017ce <HAL_RCC_OscConfig+0x8a>
 80017c0:	4b7c      	ldr	r3, [pc, #496]	; (80019b4 <HAL_RCC_OscConfig+0x270>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a7b      	ldr	r2, [pc, #492]	; (80019b4 <HAL_RCC_OscConfig+0x270>)
 80017c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017ca:	6013      	str	r3, [r2, #0]
 80017cc:	e01d      	b.n	800180a <HAL_RCC_OscConfig+0xc6>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017d6:	d10c      	bne.n	80017f2 <HAL_RCC_OscConfig+0xae>
 80017d8:	4b76      	ldr	r3, [pc, #472]	; (80019b4 <HAL_RCC_OscConfig+0x270>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a75      	ldr	r2, [pc, #468]	; (80019b4 <HAL_RCC_OscConfig+0x270>)
 80017de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017e2:	6013      	str	r3, [r2, #0]
 80017e4:	4b73      	ldr	r3, [pc, #460]	; (80019b4 <HAL_RCC_OscConfig+0x270>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a72      	ldr	r2, [pc, #456]	; (80019b4 <HAL_RCC_OscConfig+0x270>)
 80017ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017ee:	6013      	str	r3, [r2, #0]
 80017f0:	e00b      	b.n	800180a <HAL_RCC_OscConfig+0xc6>
 80017f2:	4b70      	ldr	r3, [pc, #448]	; (80019b4 <HAL_RCC_OscConfig+0x270>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a6f      	ldr	r2, [pc, #444]	; (80019b4 <HAL_RCC_OscConfig+0x270>)
 80017f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017fc:	6013      	str	r3, [r2, #0]
 80017fe:	4b6d      	ldr	r3, [pc, #436]	; (80019b4 <HAL_RCC_OscConfig+0x270>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a6c      	ldr	r2, [pc, #432]	; (80019b4 <HAL_RCC_OscConfig+0x270>)
 8001804:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001808:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d013      	beq.n	800183a <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001812:	f7fe fee7 	bl	80005e4 <HAL_GetTick>
 8001816:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001818:	e008      	b.n	800182c <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800181a:	f7fe fee3 	bl	80005e4 <HAL_GetTick>
 800181e:	4602      	mov	r2, r0
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	2b64      	cmp	r3, #100	; 0x64
 8001826:	d901      	bls.n	800182c <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001828:	2303      	movs	r3, #3
 800182a:	e1db      	b.n	8001be4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800182c:	4b61      	ldr	r3, [pc, #388]	; (80019b4 <HAL_RCC_OscConfig+0x270>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d0f0      	beq.n	800181a <HAL_RCC_OscConfig+0xd6>
 8001838:	e014      	b.n	8001864 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800183a:	f7fe fed3 	bl	80005e4 <HAL_GetTick>
 800183e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001840:	e008      	b.n	8001854 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001842:	f7fe fecf 	bl	80005e4 <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	2b64      	cmp	r3, #100	; 0x64
 800184e:	d901      	bls.n	8001854 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	e1c7      	b.n	8001be4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001854:	4b57      	ldr	r3, [pc, #348]	; (80019b4 <HAL_RCC_OscConfig+0x270>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d1f0      	bne.n	8001842 <HAL_RCC_OscConfig+0xfe>
 8001860:	e000      	b.n	8001864 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001862:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0302 	and.w	r3, r3, #2
 800186c:	2b00      	cmp	r3, #0
 800186e:	d06f      	beq.n	8001950 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001870:	4b50      	ldr	r3, [pc, #320]	; (80019b4 <HAL_RCC_OscConfig+0x270>)
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	f003 030c 	and.w	r3, r3, #12
 8001878:	2b00      	cmp	r3, #0
 800187a:	d017      	beq.n	80018ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800187c:	4b4d      	ldr	r3, [pc, #308]	; (80019b4 <HAL_RCC_OscConfig+0x270>)
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001884:	2b08      	cmp	r3, #8
 8001886:	d105      	bne.n	8001894 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001888:	4b4a      	ldr	r3, [pc, #296]	; (80019b4 <HAL_RCC_OscConfig+0x270>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d00b      	beq.n	80018ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001894:	4b47      	ldr	r3, [pc, #284]	; (80019b4 <HAL_RCC_OscConfig+0x270>)
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800189c:	2b0c      	cmp	r3, #12
 800189e:	d11c      	bne.n	80018da <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018a0:	4b44      	ldr	r3, [pc, #272]	; (80019b4 <HAL_RCC_OscConfig+0x270>)
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d116      	bne.n	80018da <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ac:	4b41      	ldr	r3, [pc, #260]	; (80019b4 <HAL_RCC_OscConfig+0x270>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0302 	and.w	r3, r3, #2
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d005      	beq.n	80018c4 <HAL_RCC_OscConfig+0x180>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d001      	beq.n	80018c4 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e18f      	b.n	8001be4 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018c4:	4b3b      	ldr	r3, [pc, #236]	; (80019b4 <HAL_RCC_OscConfig+0x270>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	691b      	ldr	r3, [r3, #16]
 80018d0:	00db      	lsls	r3, r3, #3
 80018d2:	4938      	ldr	r1, [pc, #224]	; (80019b4 <HAL_RCC_OscConfig+0x270>)
 80018d4:	4313      	orrs	r3, r2
 80018d6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018d8:	e03a      	b.n	8001950 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d020      	beq.n	8001924 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018e2:	4b35      	ldr	r3, [pc, #212]	; (80019b8 <HAL_RCC_OscConfig+0x274>)
 80018e4:	2201      	movs	r2, #1
 80018e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e8:	f7fe fe7c 	bl	80005e4 <HAL_GetTick>
 80018ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ee:	e008      	b.n	8001902 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018f0:	f7fe fe78 	bl	80005e4 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d901      	bls.n	8001902 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e170      	b.n	8001be4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001902:	4b2c      	ldr	r3, [pc, #176]	; (80019b4 <HAL_RCC_OscConfig+0x270>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0302 	and.w	r3, r3, #2
 800190a:	2b00      	cmp	r3, #0
 800190c:	d0f0      	beq.n	80018f0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800190e:	4b29      	ldr	r3, [pc, #164]	; (80019b4 <HAL_RCC_OscConfig+0x270>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	691b      	ldr	r3, [r3, #16]
 800191a:	00db      	lsls	r3, r3, #3
 800191c:	4925      	ldr	r1, [pc, #148]	; (80019b4 <HAL_RCC_OscConfig+0x270>)
 800191e:	4313      	orrs	r3, r2
 8001920:	600b      	str	r3, [r1, #0]
 8001922:	e015      	b.n	8001950 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001924:	4b24      	ldr	r3, [pc, #144]	; (80019b8 <HAL_RCC_OscConfig+0x274>)
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800192a:	f7fe fe5b 	bl	80005e4 <HAL_GetTick>
 800192e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001930:	e008      	b.n	8001944 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001932:	f7fe fe57 	bl	80005e4 <HAL_GetTick>
 8001936:	4602      	mov	r2, r0
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	2b02      	cmp	r3, #2
 800193e:	d901      	bls.n	8001944 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e14f      	b.n	8001be4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001944:	4b1b      	ldr	r3, [pc, #108]	; (80019b4 <HAL_RCC_OscConfig+0x270>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0302 	and.w	r3, r3, #2
 800194c:	2b00      	cmp	r3, #0
 800194e:	d1f0      	bne.n	8001932 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0308 	and.w	r3, r3, #8
 8001958:	2b00      	cmp	r3, #0
 800195a:	d037      	beq.n	80019cc <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	695b      	ldr	r3, [r3, #20]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d016      	beq.n	8001992 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001964:	4b15      	ldr	r3, [pc, #84]	; (80019bc <HAL_RCC_OscConfig+0x278>)
 8001966:	2201      	movs	r2, #1
 8001968:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800196a:	f7fe fe3b 	bl	80005e4 <HAL_GetTick>
 800196e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001970:	e008      	b.n	8001984 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001972:	f7fe fe37 	bl	80005e4 <HAL_GetTick>
 8001976:	4602      	mov	r2, r0
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	2b02      	cmp	r3, #2
 800197e:	d901      	bls.n	8001984 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e12f      	b.n	8001be4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001984:	4b0b      	ldr	r3, [pc, #44]	; (80019b4 <HAL_RCC_OscConfig+0x270>)
 8001986:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001988:	f003 0302 	and.w	r3, r3, #2
 800198c:	2b00      	cmp	r3, #0
 800198e:	d0f0      	beq.n	8001972 <HAL_RCC_OscConfig+0x22e>
 8001990:	e01c      	b.n	80019cc <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001992:	4b0a      	ldr	r3, [pc, #40]	; (80019bc <HAL_RCC_OscConfig+0x278>)
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001998:	f7fe fe24 	bl	80005e4 <HAL_GetTick>
 800199c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800199e:	e00f      	b.n	80019c0 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019a0:	f7fe fe20 	bl	80005e4 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d908      	bls.n	80019c0 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e118      	b.n	8001be4 <HAL_RCC_OscConfig+0x4a0>
 80019b2:	bf00      	nop
 80019b4:	40023800 	.word	0x40023800
 80019b8:	42470000 	.word	0x42470000
 80019bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019c0:	4b8a      	ldr	r3, [pc, #552]	; (8001bec <HAL_RCC_OscConfig+0x4a8>)
 80019c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019c4:	f003 0302 	and.w	r3, r3, #2
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d1e9      	bne.n	80019a0 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0304 	and.w	r3, r3, #4
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	f000 8097 	beq.w	8001b08 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019da:	2300      	movs	r3, #0
 80019dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019de:	4b83      	ldr	r3, [pc, #524]	; (8001bec <HAL_RCC_OscConfig+0x4a8>)
 80019e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d10f      	bne.n	8001a0a <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	60fb      	str	r3, [r7, #12]
 80019ee:	4b7f      	ldr	r3, [pc, #508]	; (8001bec <HAL_RCC_OscConfig+0x4a8>)
 80019f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f2:	4a7e      	ldr	r2, [pc, #504]	; (8001bec <HAL_RCC_OscConfig+0x4a8>)
 80019f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019f8:	6413      	str	r3, [r2, #64]	; 0x40
 80019fa:	4b7c      	ldr	r3, [pc, #496]	; (8001bec <HAL_RCC_OscConfig+0x4a8>)
 80019fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001a06:	2301      	movs	r3, #1
 8001a08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a0a:	4b79      	ldr	r3, [pc, #484]	; (8001bf0 <HAL_RCC_OscConfig+0x4ac>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d118      	bne.n	8001a48 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a16:	4b76      	ldr	r3, [pc, #472]	; (8001bf0 <HAL_RCC_OscConfig+0x4ac>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a75      	ldr	r2, [pc, #468]	; (8001bf0 <HAL_RCC_OscConfig+0x4ac>)
 8001a1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a22:	f7fe fddf 	bl	80005e4 <HAL_GetTick>
 8001a26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a28:	e008      	b.n	8001a3c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a2a:	f7fe fddb 	bl	80005e4 <HAL_GetTick>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d901      	bls.n	8001a3c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e0d3      	b.n	8001be4 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a3c:	4b6c      	ldr	r3, [pc, #432]	; (8001bf0 <HAL_RCC_OscConfig+0x4ac>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d0f0      	beq.n	8001a2a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d106      	bne.n	8001a5e <HAL_RCC_OscConfig+0x31a>
 8001a50:	4b66      	ldr	r3, [pc, #408]	; (8001bec <HAL_RCC_OscConfig+0x4a8>)
 8001a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a54:	4a65      	ldr	r2, [pc, #404]	; (8001bec <HAL_RCC_OscConfig+0x4a8>)
 8001a56:	f043 0301 	orr.w	r3, r3, #1
 8001a5a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a5c:	e01c      	b.n	8001a98 <HAL_RCC_OscConfig+0x354>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	2b05      	cmp	r3, #5
 8001a64:	d10c      	bne.n	8001a80 <HAL_RCC_OscConfig+0x33c>
 8001a66:	4b61      	ldr	r3, [pc, #388]	; (8001bec <HAL_RCC_OscConfig+0x4a8>)
 8001a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a6a:	4a60      	ldr	r2, [pc, #384]	; (8001bec <HAL_RCC_OscConfig+0x4a8>)
 8001a6c:	f043 0304 	orr.w	r3, r3, #4
 8001a70:	6713      	str	r3, [r2, #112]	; 0x70
 8001a72:	4b5e      	ldr	r3, [pc, #376]	; (8001bec <HAL_RCC_OscConfig+0x4a8>)
 8001a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a76:	4a5d      	ldr	r2, [pc, #372]	; (8001bec <HAL_RCC_OscConfig+0x4a8>)
 8001a78:	f043 0301 	orr.w	r3, r3, #1
 8001a7c:	6713      	str	r3, [r2, #112]	; 0x70
 8001a7e:	e00b      	b.n	8001a98 <HAL_RCC_OscConfig+0x354>
 8001a80:	4b5a      	ldr	r3, [pc, #360]	; (8001bec <HAL_RCC_OscConfig+0x4a8>)
 8001a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a84:	4a59      	ldr	r2, [pc, #356]	; (8001bec <HAL_RCC_OscConfig+0x4a8>)
 8001a86:	f023 0301 	bic.w	r3, r3, #1
 8001a8a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a8c:	4b57      	ldr	r3, [pc, #348]	; (8001bec <HAL_RCC_OscConfig+0x4a8>)
 8001a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a90:	4a56      	ldr	r2, [pc, #344]	; (8001bec <HAL_RCC_OscConfig+0x4a8>)
 8001a92:	f023 0304 	bic.w	r3, r3, #4
 8001a96:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d015      	beq.n	8001acc <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aa0:	f7fe fda0 	bl	80005e4 <HAL_GetTick>
 8001aa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aa6:	e00a      	b.n	8001abe <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001aa8:	f7fe fd9c 	bl	80005e4 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e092      	b.n	8001be4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001abe:	4b4b      	ldr	r3, [pc, #300]	; (8001bec <HAL_RCC_OscConfig+0x4a8>)
 8001ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d0ee      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x364>
 8001aca:	e014      	b.n	8001af6 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001acc:	f7fe fd8a 	bl	80005e4 <HAL_GetTick>
 8001ad0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ad2:	e00a      	b.n	8001aea <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ad4:	f7fe fd86 	bl	80005e4 <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e07c      	b.n	8001be4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aea:	4b40      	ldr	r3, [pc, #256]	; (8001bec <HAL_RCC_OscConfig+0x4a8>)
 8001aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d1ee      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001af6:	7dfb      	ldrb	r3, [r7, #23]
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d105      	bne.n	8001b08 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001afc:	4b3b      	ldr	r3, [pc, #236]	; (8001bec <HAL_RCC_OscConfig+0x4a8>)
 8001afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b00:	4a3a      	ldr	r2, [pc, #232]	; (8001bec <HAL_RCC_OscConfig+0x4a8>)
 8001b02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b06:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d068      	beq.n	8001be2 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b10:	4b36      	ldr	r3, [pc, #216]	; (8001bec <HAL_RCC_OscConfig+0x4a8>)
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f003 030c 	and.w	r3, r3, #12
 8001b18:	2b08      	cmp	r3, #8
 8001b1a:	d060      	beq.n	8001bde <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d145      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b24:	4b33      	ldr	r3, [pc, #204]	; (8001bf4 <HAL_RCC_OscConfig+0x4b0>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b2a:	f7fe fd5b 	bl	80005e4 <HAL_GetTick>
 8001b2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b30:	e008      	b.n	8001b44 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b32:	f7fe fd57 	bl	80005e4 <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d901      	bls.n	8001b44 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e04f      	b.n	8001be4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b44:	4b29      	ldr	r3, [pc, #164]	; (8001bec <HAL_RCC_OscConfig+0x4a8>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d1f0      	bne.n	8001b32 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	69da      	ldr	r2, [r3, #28]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6a1b      	ldr	r3, [r3, #32]
 8001b58:	431a      	orrs	r2, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b5e:	019b      	lsls	r3, r3, #6
 8001b60:	431a      	orrs	r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b66:	085b      	lsrs	r3, r3, #1
 8001b68:	3b01      	subs	r3, #1
 8001b6a:	041b      	lsls	r3, r3, #16
 8001b6c:	431a      	orrs	r2, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b72:	061b      	lsls	r3, r3, #24
 8001b74:	431a      	orrs	r2, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	071b      	lsls	r3, r3, #28
 8001b7c:	491b      	ldr	r1, [pc, #108]	; (8001bec <HAL_RCC_OscConfig+0x4a8>)
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b82:	4b1c      	ldr	r3, [pc, #112]	; (8001bf4 <HAL_RCC_OscConfig+0x4b0>)
 8001b84:	2201      	movs	r2, #1
 8001b86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b88:	f7fe fd2c 	bl	80005e4 <HAL_GetTick>
 8001b8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b8e:	e008      	b.n	8001ba2 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b90:	f7fe fd28 	bl	80005e4 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e020      	b.n	8001be4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ba2:	4b12      	ldr	r3, [pc, #72]	; (8001bec <HAL_RCC_OscConfig+0x4a8>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d0f0      	beq.n	8001b90 <HAL_RCC_OscConfig+0x44c>
 8001bae:	e018      	b.n	8001be2 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bb0:	4b10      	ldr	r3, [pc, #64]	; (8001bf4 <HAL_RCC_OscConfig+0x4b0>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb6:	f7fe fd15 	bl	80005e4 <HAL_GetTick>
 8001bba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bbc:	e008      	b.n	8001bd0 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bbe:	f7fe fd11 	bl	80005e4 <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d901      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e009      	b.n	8001be4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bd0:	4b06      	ldr	r3, [pc, #24]	; (8001bec <HAL_RCC_OscConfig+0x4a8>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d1f0      	bne.n	8001bbe <HAL_RCC_OscConfig+0x47a>
 8001bdc:	e001      	b.n	8001be2 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e000      	b.n	8001be4 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8001be2:	2300      	movs	r3, #0
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3718      	adds	r7, #24
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	40023800 	.word	0x40023800
 8001bf0:	40007000 	.word	0x40007000
 8001bf4:	42470060 	.word	0x42470060

08001bf8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d101      	bne.n	8001c0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e01d      	b.n	8001c46 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d106      	bne.n	8001c24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f000 f845 	bl	8001cae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2202      	movs	r2, #2
 8001c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	3304      	adds	r3, #4
 8001c34:	4619      	mov	r1, r3
 8001c36:	4610      	mov	r0, r2
 8001c38:	f000 fa3e 	bl	80020b8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b082      	sub	sp, #8
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2202      	movs	r2, #2
 8001c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	6a1a      	ldr	r2, [r3, #32]
 8001c64:	f241 1311 	movw	r3, #4369	; 0x1111
 8001c68:	4013      	ands	r3, r2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d10f      	bne.n	8001c8e <HAL_TIM_Base_DeInit+0x40>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	6a1a      	ldr	r2, [r3, #32]
 8001c74:	f240 4344 	movw	r3, #1092	; 0x444
 8001c78:	4013      	ands	r3, r2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d107      	bne.n	8001c8e <HAL_TIM_Base_DeInit+0x40>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f022 0201 	bic.w	r2, r2, #1
 8001c8c:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f000 f817 	bl	8001cc2 <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2200      	movs	r2, #0
 8001c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	b083      	sub	sp, #12
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001cb6:	bf00      	nop
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr

08001cc2 <HAL_TIM_Base_MspDeInit>:
  * @brief  DeInitializes TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef *htim)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	b083      	sub	sp, #12
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspDeInit could be implemented in the user file
   */
}
 8001cca:	bf00      	nop
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr

08001cd6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b082      	sub	sp, #8
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d101      	bne.n	8001ce8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e01d      	b.n	8001d24 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d106      	bne.n	8001d02 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f000 f815 	bl	8001d2c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2202      	movs	r2, #2
 8001d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	3304      	adds	r3, #4
 8001d12:	4619      	mov	r1, r3
 8001d14:	4610      	mov	r0, r2
 8001d16:	f000 f9cf 	bl	80020b8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d22:	2300      	movs	r3, #0
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3708      	adds	r7, #8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001d34:	bf00      	nop
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	6839      	ldr	r1, [r7, #0]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f000 fc9a 	bl	800268c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a15      	ldr	r2, [pc, #84]	; (8001db4 <HAL_TIM_PWM_Start+0x74>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d004      	beq.n	8001d6c <HAL_TIM_PWM_Start+0x2c>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a14      	ldr	r2, [pc, #80]	; (8001db8 <HAL_TIM_PWM_Start+0x78>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d101      	bne.n	8001d70 <HAL_TIM_PWM_Start+0x30>
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e000      	b.n	8001d72 <HAL_TIM_PWM_Start+0x32>
 8001d70:	2300      	movs	r3, #0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d007      	beq.n	8001d86 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d84:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f003 0307 	and.w	r3, r3, #7
 8001d90:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2b06      	cmp	r3, #6
 8001d96:	d007      	beq.n	8001da8 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f042 0201 	orr.w	r2, r2, #1
 8001da6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3710      	adds	r7, #16
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	40010000 	.word	0x40010000
 8001db8:	40010400 	.word	0x40010400

08001dbc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d101      	bne.n	8001dd6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	e0b4      	b.n	8001f40 <HAL_TIM_PWM_ConfigChannel+0x184>
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2201      	movs	r2, #1
 8001dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2202      	movs	r2, #2
 8001de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2b0c      	cmp	r3, #12
 8001dea:	f200 809f 	bhi.w	8001f2c <HAL_TIM_PWM_ConfigChannel+0x170>
 8001dee:	a201      	add	r2, pc, #4	; (adr r2, 8001df4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8001df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001df4:	08001e29 	.word	0x08001e29
 8001df8:	08001f2d 	.word	0x08001f2d
 8001dfc:	08001f2d 	.word	0x08001f2d
 8001e00:	08001f2d 	.word	0x08001f2d
 8001e04:	08001e69 	.word	0x08001e69
 8001e08:	08001f2d 	.word	0x08001f2d
 8001e0c:	08001f2d 	.word	0x08001f2d
 8001e10:	08001f2d 	.word	0x08001f2d
 8001e14:	08001eab 	.word	0x08001eab
 8001e18:	08001f2d 	.word	0x08001f2d
 8001e1c:	08001f2d 	.word	0x08001f2d
 8001e20:	08001f2d 	.word	0x08001f2d
 8001e24:	08001eeb 	.word	0x08001eeb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	68b9      	ldr	r1, [r7, #8]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f000 f9e2 	bl	80021f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	699a      	ldr	r2, [r3, #24]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f042 0208 	orr.w	r2, r2, #8
 8001e42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	699a      	ldr	r2, [r3, #24]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f022 0204 	bic.w	r2, r2, #4
 8001e52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	6999      	ldr	r1, [r3, #24]
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	691a      	ldr	r2, [r3, #16]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	430a      	orrs	r2, r1
 8001e64:	619a      	str	r2, [r3, #24]
      break;
 8001e66:	e062      	b.n	8001f2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	68b9      	ldr	r1, [r7, #8]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f000 fa32 	bl	80022d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	699a      	ldr	r2, [r3, #24]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	699a      	ldr	r2, [r3, #24]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	6999      	ldr	r1, [r3, #24]
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	021a      	lsls	r2, r3, #8
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	430a      	orrs	r2, r1
 8001ea6:	619a      	str	r2, [r3, #24]
      break;
 8001ea8:	e041      	b.n	8001f2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	68b9      	ldr	r1, [r7, #8]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f000 fa87 	bl	80023c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	69da      	ldr	r2, [r3, #28]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f042 0208 	orr.w	r2, r2, #8
 8001ec4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	69da      	ldr	r2, [r3, #28]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f022 0204 	bic.w	r2, r2, #4
 8001ed4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	69d9      	ldr	r1, [r3, #28]
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	691a      	ldr	r2, [r3, #16]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	61da      	str	r2, [r3, #28]
      break;
 8001ee8:	e021      	b.n	8001f2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	68b9      	ldr	r1, [r7, #8]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f000 fadb 	bl	80024ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	69da      	ldr	r2, [r3, #28]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	69da      	ldr	r2, [r3, #28]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	69d9      	ldr	r1, [r3, #28]
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	691b      	ldr	r3, [r3, #16]
 8001f20:	021a      	lsls	r2, r3, #8
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	430a      	orrs	r2, r1
 8001f28:	61da      	str	r2, [r3, #28]
      break;
 8001f2a:	e000      	b.n	8001f2e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8001f2c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2201      	movs	r2, #1
 8001f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001f3e:	2300      	movs	r3, #0
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3710      	adds	r7, #16
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d101      	bne.n	8001f60 <HAL_TIM_ConfigClockSource+0x18>
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	e0a6      	b.n	80020ae <HAL_TIM_ConfigClockSource+0x166>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2202      	movs	r2, #2
 8001f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001f7e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001f86:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	68fa      	ldr	r2, [r7, #12]
 8001f8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2b40      	cmp	r3, #64	; 0x40
 8001f96:	d067      	beq.n	8002068 <HAL_TIM_ConfigClockSource+0x120>
 8001f98:	2b40      	cmp	r3, #64	; 0x40
 8001f9a:	d80b      	bhi.n	8001fb4 <HAL_TIM_ConfigClockSource+0x6c>
 8001f9c:	2b10      	cmp	r3, #16
 8001f9e:	d073      	beq.n	8002088 <HAL_TIM_ConfigClockSource+0x140>
 8001fa0:	2b10      	cmp	r3, #16
 8001fa2:	d802      	bhi.n	8001faa <HAL_TIM_ConfigClockSource+0x62>
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d06f      	beq.n	8002088 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8001fa8:	e078      	b.n	800209c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001faa:	2b20      	cmp	r3, #32
 8001fac:	d06c      	beq.n	8002088 <HAL_TIM_ConfigClockSource+0x140>
 8001fae:	2b30      	cmp	r3, #48	; 0x30
 8001fb0:	d06a      	beq.n	8002088 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8001fb2:	e073      	b.n	800209c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001fb4:	2b70      	cmp	r3, #112	; 0x70
 8001fb6:	d00d      	beq.n	8001fd4 <HAL_TIM_ConfigClockSource+0x8c>
 8001fb8:	2b70      	cmp	r3, #112	; 0x70
 8001fba:	d804      	bhi.n	8001fc6 <HAL_TIM_ConfigClockSource+0x7e>
 8001fbc:	2b50      	cmp	r3, #80	; 0x50
 8001fbe:	d033      	beq.n	8002028 <HAL_TIM_ConfigClockSource+0xe0>
 8001fc0:	2b60      	cmp	r3, #96	; 0x60
 8001fc2:	d041      	beq.n	8002048 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8001fc4:	e06a      	b.n	800209c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001fc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fca:	d066      	beq.n	800209a <HAL_TIM_ConfigClockSource+0x152>
 8001fcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fd0:	d017      	beq.n	8002002 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8001fd2:	e063      	b.n	800209c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6818      	ldr	r0, [r3, #0]
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	6899      	ldr	r1, [r3, #8]
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685a      	ldr	r2, [r3, #4]
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	f000 fb32 	bl	800264c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001ff6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	68fa      	ldr	r2, [r7, #12]
 8001ffe:	609a      	str	r2, [r3, #8]
      break;
 8002000:	e04c      	b.n	800209c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6818      	ldr	r0, [r3, #0]
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	6899      	ldr	r1, [r3, #8]
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685a      	ldr	r2, [r3, #4]
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	f000 fb1b 	bl	800264c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	689a      	ldr	r2, [r3, #8]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002024:	609a      	str	r2, [r3, #8]
      break;
 8002026:	e039      	b.n	800209c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6818      	ldr	r0, [r3, #0]
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	6859      	ldr	r1, [r3, #4]
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	461a      	mov	r2, r3
 8002036:	f000 fa8f 	bl	8002558 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2150      	movs	r1, #80	; 0x50
 8002040:	4618      	mov	r0, r3
 8002042:	f000 fae8 	bl	8002616 <TIM_ITRx_SetConfig>
      break;
 8002046:	e029      	b.n	800209c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6818      	ldr	r0, [r3, #0]
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	6859      	ldr	r1, [r3, #4]
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	461a      	mov	r2, r3
 8002056:	f000 faae 	bl	80025b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2160      	movs	r1, #96	; 0x60
 8002060:	4618      	mov	r0, r3
 8002062:	f000 fad8 	bl	8002616 <TIM_ITRx_SetConfig>
      break;
 8002066:	e019      	b.n	800209c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6818      	ldr	r0, [r3, #0]
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	6859      	ldr	r1, [r3, #4]
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	461a      	mov	r2, r3
 8002076:	f000 fa6f 	bl	8002558 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2140      	movs	r1, #64	; 0x40
 8002080:	4618      	mov	r0, r3
 8002082:	f000 fac8 	bl	8002616 <TIM_ITRx_SetConfig>
      break;
 8002086:	e009      	b.n	800209c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4619      	mov	r1, r3
 8002092:	4610      	mov	r0, r2
 8002094:	f000 fabf 	bl	8002616 <TIM_ITRx_SetConfig>
      break;
 8002098:	e000      	b.n	800209c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800209a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
	...

080020b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b085      	sub	sp, #20
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4a40      	ldr	r2, [pc, #256]	; (80021cc <TIM_Base_SetConfig+0x114>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d013      	beq.n	80020f8 <TIM_Base_SetConfig+0x40>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020d6:	d00f      	beq.n	80020f8 <TIM_Base_SetConfig+0x40>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	4a3d      	ldr	r2, [pc, #244]	; (80021d0 <TIM_Base_SetConfig+0x118>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d00b      	beq.n	80020f8 <TIM_Base_SetConfig+0x40>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	4a3c      	ldr	r2, [pc, #240]	; (80021d4 <TIM_Base_SetConfig+0x11c>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d007      	beq.n	80020f8 <TIM_Base_SetConfig+0x40>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4a3b      	ldr	r2, [pc, #236]	; (80021d8 <TIM_Base_SetConfig+0x120>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d003      	beq.n	80020f8 <TIM_Base_SetConfig+0x40>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4a3a      	ldr	r2, [pc, #232]	; (80021dc <TIM_Base_SetConfig+0x124>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d108      	bne.n	800210a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	68fa      	ldr	r2, [r7, #12]
 8002106:	4313      	orrs	r3, r2
 8002108:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a2f      	ldr	r2, [pc, #188]	; (80021cc <TIM_Base_SetConfig+0x114>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d02b      	beq.n	800216a <TIM_Base_SetConfig+0xb2>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002118:	d027      	beq.n	800216a <TIM_Base_SetConfig+0xb2>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a2c      	ldr	r2, [pc, #176]	; (80021d0 <TIM_Base_SetConfig+0x118>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d023      	beq.n	800216a <TIM_Base_SetConfig+0xb2>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a2b      	ldr	r2, [pc, #172]	; (80021d4 <TIM_Base_SetConfig+0x11c>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d01f      	beq.n	800216a <TIM_Base_SetConfig+0xb2>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a2a      	ldr	r2, [pc, #168]	; (80021d8 <TIM_Base_SetConfig+0x120>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d01b      	beq.n	800216a <TIM_Base_SetConfig+0xb2>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a29      	ldr	r2, [pc, #164]	; (80021dc <TIM_Base_SetConfig+0x124>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d017      	beq.n	800216a <TIM_Base_SetConfig+0xb2>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a28      	ldr	r2, [pc, #160]	; (80021e0 <TIM_Base_SetConfig+0x128>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d013      	beq.n	800216a <TIM_Base_SetConfig+0xb2>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a27      	ldr	r2, [pc, #156]	; (80021e4 <TIM_Base_SetConfig+0x12c>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d00f      	beq.n	800216a <TIM_Base_SetConfig+0xb2>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a26      	ldr	r2, [pc, #152]	; (80021e8 <TIM_Base_SetConfig+0x130>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d00b      	beq.n	800216a <TIM_Base_SetConfig+0xb2>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a25      	ldr	r2, [pc, #148]	; (80021ec <TIM_Base_SetConfig+0x134>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d007      	beq.n	800216a <TIM_Base_SetConfig+0xb2>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a24      	ldr	r2, [pc, #144]	; (80021f0 <TIM_Base_SetConfig+0x138>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d003      	beq.n	800216a <TIM_Base_SetConfig+0xb2>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a23      	ldr	r2, [pc, #140]	; (80021f4 <TIM_Base_SetConfig+0x13c>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d108      	bne.n	800217c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002170:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	68fa      	ldr	r2, [r7, #12]
 8002178:	4313      	orrs	r3, r2
 800217a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	695b      	ldr	r3, [r3, #20]
 8002186:	4313      	orrs	r3, r2
 8002188:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	68fa      	ldr	r2, [r7, #12]
 800218e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	689a      	ldr	r2, [r3, #8]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4a0a      	ldr	r2, [pc, #40]	; (80021cc <TIM_Base_SetConfig+0x114>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d003      	beq.n	80021b0 <TIM_Base_SetConfig+0xf8>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4a0c      	ldr	r2, [pc, #48]	; (80021dc <TIM_Base_SetConfig+0x124>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d103      	bne.n	80021b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	691a      	ldr	r2, [r3, #16]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	615a      	str	r2, [r3, #20]
}
 80021be:	bf00      	nop
 80021c0:	3714      	adds	r7, #20
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	40010000 	.word	0x40010000
 80021d0:	40000400 	.word	0x40000400
 80021d4:	40000800 	.word	0x40000800
 80021d8:	40000c00 	.word	0x40000c00
 80021dc:	40010400 	.word	0x40010400
 80021e0:	40014000 	.word	0x40014000
 80021e4:	40014400 	.word	0x40014400
 80021e8:	40014800 	.word	0x40014800
 80021ec:	40001800 	.word	0x40001800
 80021f0:	40001c00 	.word	0x40001c00
 80021f4:	40002000 	.word	0x40002000

080021f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b087      	sub	sp, #28
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a1b      	ldr	r3, [r3, #32]
 8002206:	f023 0201 	bic.w	r2, r3, #1
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a1b      	ldr	r3, [r3, #32]
 8002212:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	699b      	ldr	r3, [r3, #24]
 800221e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002226:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f023 0303 	bic.w	r3, r3, #3
 800222e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68fa      	ldr	r2, [r7, #12]
 8002236:	4313      	orrs	r3, r2
 8002238:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	f023 0302 	bic.w	r3, r3, #2
 8002240:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	697a      	ldr	r2, [r7, #20]
 8002248:	4313      	orrs	r3, r2
 800224a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	4a20      	ldr	r2, [pc, #128]	; (80022d0 <TIM_OC1_SetConfig+0xd8>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d003      	beq.n	800225c <TIM_OC1_SetConfig+0x64>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	4a1f      	ldr	r2, [pc, #124]	; (80022d4 <TIM_OC1_SetConfig+0xdc>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d10c      	bne.n	8002276 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	f023 0308 	bic.w	r3, r3, #8
 8002262:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	697a      	ldr	r2, [r7, #20]
 800226a:	4313      	orrs	r3, r2
 800226c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	f023 0304 	bic.w	r3, r3, #4
 8002274:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a15      	ldr	r2, [pc, #84]	; (80022d0 <TIM_OC1_SetConfig+0xd8>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d003      	beq.n	8002286 <TIM_OC1_SetConfig+0x8e>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a14      	ldr	r2, [pc, #80]	; (80022d4 <TIM_OC1_SetConfig+0xdc>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d111      	bne.n	80022aa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800228c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002294:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	695b      	ldr	r3, [r3, #20]
 800229a:	693a      	ldr	r2, [r7, #16]
 800229c:	4313      	orrs	r3, r2
 800229e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	699b      	ldr	r3, [r3, #24]
 80022a4:	693a      	ldr	r2, [r7, #16]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	693a      	ldr	r2, [r7, #16]
 80022ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	685a      	ldr	r2, [r3, #4]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	697a      	ldr	r2, [r7, #20]
 80022c2:	621a      	str	r2, [r3, #32]
}
 80022c4:	bf00      	nop
 80022c6:	371c      	adds	r7, #28
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr
 80022d0:	40010000 	.word	0x40010000
 80022d4:	40010400 	.word	0x40010400

080022d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80022d8:	b480      	push	{r7}
 80022da:	b087      	sub	sp, #28
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a1b      	ldr	r3, [r3, #32]
 80022e6:	f023 0210 	bic.w	r2, r3, #16
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a1b      	ldr	r3, [r3, #32]
 80022f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	699b      	ldr	r3, [r3, #24]
 80022fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002306:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800230e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	021b      	lsls	r3, r3, #8
 8002316:	68fa      	ldr	r2, [r7, #12]
 8002318:	4313      	orrs	r3, r2
 800231a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	f023 0320 	bic.w	r3, r3, #32
 8002322:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	011b      	lsls	r3, r3, #4
 800232a:	697a      	ldr	r2, [r7, #20]
 800232c:	4313      	orrs	r3, r2
 800232e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	4a22      	ldr	r2, [pc, #136]	; (80023bc <TIM_OC2_SetConfig+0xe4>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d003      	beq.n	8002340 <TIM_OC2_SetConfig+0x68>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4a21      	ldr	r2, [pc, #132]	; (80023c0 <TIM_OC2_SetConfig+0xe8>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d10d      	bne.n	800235c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002346:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	011b      	lsls	r3, r3, #4
 800234e:	697a      	ldr	r2, [r7, #20]
 8002350:	4313      	orrs	r3, r2
 8002352:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800235a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	4a17      	ldr	r2, [pc, #92]	; (80023bc <TIM_OC2_SetConfig+0xe4>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d003      	beq.n	800236c <TIM_OC2_SetConfig+0x94>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	4a16      	ldr	r2, [pc, #88]	; (80023c0 <TIM_OC2_SetConfig+0xe8>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d113      	bne.n	8002394 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002372:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800237a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	695b      	ldr	r3, [r3, #20]
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	4313      	orrs	r3, r2
 8002386:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	4313      	orrs	r3, r2
 8002392:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	68fa      	ldr	r2, [r7, #12]
 800239e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685a      	ldr	r2, [r3, #4]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	697a      	ldr	r2, [r7, #20]
 80023ac:	621a      	str	r2, [r3, #32]
}
 80023ae:	bf00      	nop
 80023b0:	371c      	adds	r7, #28
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	40010000 	.word	0x40010000
 80023c0:	40010400 	.word	0x40010400

080023c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b087      	sub	sp, #28
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a1b      	ldr	r3, [r3, #32]
 80023d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6a1b      	ldr	r3, [r3, #32]
 80023de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	69db      	ldr	r3, [r3, #28]
 80023ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f023 0303 	bic.w	r3, r3, #3
 80023fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	68fa      	ldr	r2, [r7, #12]
 8002402:	4313      	orrs	r3, r2
 8002404:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800240c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	021b      	lsls	r3, r3, #8
 8002414:	697a      	ldr	r2, [r7, #20]
 8002416:	4313      	orrs	r3, r2
 8002418:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a21      	ldr	r2, [pc, #132]	; (80024a4 <TIM_OC3_SetConfig+0xe0>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d003      	beq.n	800242a <TIM_OC3_SetConfig+0x66>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a20      	ldr	r2, [pc, #128]	; (80024a8 <TIM_OC3_SetConfig+0xe4>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d10d      	bne.n	8002446 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002430:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	021b      	lsls	r3, r3, #8
 8002438:	697a      	ldr	r2, [r7, #20]
 800243a:	4313      	orrs	r3, r2
 800243c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002444:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a16      	ldr	r2, [pc, #88]	; (80024a4 <TIM_OC3_SetConfig+0xe0>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d003      	beq.n	8002456 <TIM_OC3_SetConfig+0x92>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a15      	ldr	r2, [pc, #84]	; (80024a8 <TIM_OC3_SetConfig+0xe4>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d113      	bne.n	800247e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800245c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002464:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	695b      	ldr	r3, [r3, #20]
 800246a:	011b      	lsls	r3, r3, #4
 800246c:	693a      	ldr	r2, [r7, #16]
 800246e:	4313      	orrs	r3, r2
 8002470:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	699b      	ldr	r3, [r3, #24]
 8002476:	011b      	lsls	r3, r3, #4
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	4313      	orrs	r3, r2
 800247c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	693a      	ldr	r2, [r7, #16]
 8002482:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	68fa      	ldr	r2, [r7, #12]
 8002488:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685a      	ldr	r2, [r3, #4]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	697a      	ldr	r2, [r7, #20]
 8002496:	621a      	str	r2, [r3, #32]
}
 8002498:	bf00      	nop
 800249a:	371c      	adds	r7, #28
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	40010000 	.word	0x40010000
 80024a8:	40010400 	.word	0x40010400

080024ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b087      	sub	sp, #28
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a1b      	ldr	r3, [r3, #32]
 80024ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6a1b      	ldr	r3, [r3, #32]
 80024c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	69db      	ldr	r3, [r3, #28]
 80024d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	021b      	lsls	r3, r3, #8
 80024ea:	68fa      	ldr	r2, [r7, #12]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80024f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	031b      	lsls	r3, r3, #12
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	4313      	orrs	r3, r2
 8002502:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	4a12      	ldr	r2, [pc, #72]	; (8002550 <TIM_OC4_SetConfig+0xa4>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d003      	beq.n	8002514 <TIM_OC4_SetConfig+0x68>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	4a11      	ldr	r2, [pc, #68]	; (8002554 <TIM_OC4_SetConfig+0xa8>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d109      	bne.n	8002528 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800251a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	695b      	ldr	r3, [r3, #20]
 8002520:	019b      	lsls	r3, r3, #6
 8002522:	697a      	ldr	r2, [r7, #20]
 8002524:	4313      	orrs	r3, r2
 8002526:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	697a      	ldr	r2, [r7, #20]
 800252c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	68fa      	ldr	r2, [r7, #12]
 8002532:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685a      	ldr	r2, [r3, #4]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	621a      	str	r2, [r3, #32]
}
 8002542:	bf00      	nop
 8002544:	371c      	adds	r7, #28
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	40010000 	.word	0x40010000
 8002554:	40010400 	.word	0x40010400

08002558 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002558:	b480      	push	{r7}
 800255a:	b087      	sub	sp, #28
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6a1b      	ldr	r3, [r3, #32]
 8002568:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6a1b      	ldr	r3, [r3, #32]
 800256e:	f023 0201 	bic.w	r2, r3, #1
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	699b      	ldr	r3, [r3, #24]
 800257a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002582:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	011b      	lsls	r3, r3, #4
 8002588:	693a      	ldr	r2, [r7, #16]
 800258a:	4313      	orrs	r3, r2
 800258c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	f023 030a 	bic.w	r3, r3, #10
 8002594:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002596:	697a      	ldr	r2, [r7, #20]
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	4313      	orrs	r3, r2
 800259c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	693a      	ldr	r2, [r7, #16]
 80025a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	697a      	ldr	r2, [r7, #20]
 80025a8:	621a      	str	r2, [r3, #32]
}
 80025aa:	bf00      	nop
 80025ac:	371c      	adds	r7, #28
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr

080025b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025b6:	b480      	push	{r7}
 80025b8:	b087      	sub	sp, #28
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	60f8      	str	r0, [r7, #12]
 80025be:	60b9      	str	r1, [r7, #8]
 80025c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6a1b      	ldr	r3, [r3, #32]
 80025c6:	f023 0210 	bic.w	r2, r3, #16
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	699b      	ldr	r3, [r3, #24]
 80025d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6a1b      	ldr	r3, [r3, #32]
 80025d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80025e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	031b      	lsls	r3, r3, #12
 80025e6:	697a      	ldr	r2, [r7, #20]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80025f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	011b      	lsls	r3, r3, #4
 80025f8:	693a      	ldr	r2, [r7, #16]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	697a      	ldr	r2, [r7, #20]
 8002602:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	693a      	ldr	r2, [r7, #16]
 8002608:	621a      	str	r2, [r3, #32]
}
 800260a:	bf00      	nop
 800260c:	371c      	adds	r7, #28
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr

08002616 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002616:	b480      	push	{r7}
 8002618:	b085      	sub	sp, #20
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
 800261e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800262c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800262e:	683a      	ldr	r2, [r7, #0]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	4313      	orrs	r3, r2
 8002634:	f043 0307 	orr.w	r3, r3, #7
 8002638:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	68fa      	ldr	r2, [r7, #12]
 800263e:	609a      	str	r2, [r3, #8]
}
 8002640:	bf00      	nop
 8002642:	3714      	adds	r7, #20
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800264c:	b480      	push	{r7}
 800264e:	b087      	sub	sp, #28
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	607a      	str	r2, [r7, #4]
 8002658:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002666:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	021a      	lsls	r2, r3, #8
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	431a      	orrs	r2, r3
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	4313      	orrs	r3, r2
 8002674:	697a      	ldr	r2, [r7, #20]
 8002676:	4313      	orrs	r3, r2
 8002678:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	697a      	ldr	r2, [r7, #20]
 800267e:	609a      	str	r2, [r3, #8]
}
 8002680:	bf00      	nop
 8002682:	371c      	adds	r7, #28
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800268c:	b480      	push	{r7}
 800268e:	b087      	sub	sp, #28
 8002690:	af00      	add	r7, sp, #0
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	f003 031f 	and.w	r3, r3, #31
 800269e:	2201      	movs	r2, #1
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6a1a      	ldr	r2, [r3, #32]
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	43db      	mvns	r3, r3
 80026ae:	401a      	ands	r2, r3
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6a1a      	ldr	r2, [r3, #32]
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	f003 031f 	and.w	r3, r3, #31
 80026be:	6879      	ldr	r1, [r7, #4]
 80026c0:	fa01 f303 	lsl.w	r3, r1, r3
 80026c4:	431a      	orrs	r2, r3
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	621a      	str	r2, [r3, #32]
}
 80026ca:	bf00      	nop
 80026cc:	371c      	adds	r7, #28
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
	...

080026d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80026d8:	b480      	push	{r7}
 80026da:	b085      	sub	sp, #20
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d101      	bne.n	80026f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80026ec:	2302      	movs	r3, #2
 80026ee:	e05a      	b.n	80027a6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2201      	movs	r2, #1
 80026f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2202      	movs	r2, #2
 80026fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002716:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	68fa      	ldr	r2, [r7, #12]
 800271e:	4313      	orrs	r3, r2
 8002720:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a21      	ldr	r2, [pc, #132]	; (80027b4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d022      	beq.n	800277a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800273c:	d01d      	beq.n	800277a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a1d      	ldr	r2, [pc, #116]	; (80027b8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d018      	beq.n	800277a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a1b      	ldr	r2, [pc, #108]	; (80027bc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d013      	beq.n	800277a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a1a      	ldr	r2, [pc, #104]	; (80027c0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d00e      	beq.n	800277a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a18      	ldr	r2, [pc, #96]	; (80027c4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d009      	beq.n	800277a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a17      	ldr	r2, [pc, #92]	; (80027c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d004      	beq.n	800277a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a15      	ldr	r2, [pc, #84]	; (80027cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d10c      	bne.n	8002794 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002780:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	68ba      	ldr	r2, [r7, #8]
 8002788:	4313      	orrs	r3, r2
 800278a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	68ba      	ldr	r2, [r7, #8]
 8002792:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3714      	adds	r7, #20
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	40010000 	.word	0x40010000
 80027b8:	40000400 	.word	0x40000400
 80027bc:	40000800 	.word	0x40000800
 80027c0:	40000c00 	.word	0x40000c00
 80027c4:	40010400 	.word	0x40010400
 80027c8:	40014000 	.word	0x40014000
 80027cc:	40001800 	.word	0x40001800

080027d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d101      	bne.n	80027e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e03f      	b.n	8002862 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d106      	bne.n	80027fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f001 fda2 	bl	8004340 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2224      	movs	r2, #36	; 0x24
 8002800:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	68da      	ldr	r2, [r3, #12]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002812:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f000 fbf1 	bl	8002ffc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	691a      	ldr	r2, [r3, #16]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002828:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	695a      	ldr	r2, [r3, #20]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002838:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	68da      	ldr	r2, [r3, #12]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002848:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2220      	movs	r2, #32
 8002854:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2220      	movs	r2, #32
 800285c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	3708      	adds	r7, #8
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800286a:	b580      	push	{r7, lr}
 800286c:	b088      	sub	sp, #32
 800286e:	af02      	add	r7, sp, #8
 8002870:	60f8      	str	r0, [r7, #12]
 8002872:	60b9      	str	r1, [r7, #8]
 8002874:	603b      	str	r3, [r7, #0]
 8002876:	4613      	mov	r3, r2
 8002878:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800287a:	2300      	movs	r3, #0
 800287c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b20      	cmp	r3, #32
 8002888:	f040 8083 	bne.w	8002992 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d002      	beq.n	8002898 <HAL_UART_Transmit+0x2e>
 8002892:	88fb      	ldrh	r3, [r7, #6]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d101      	bne.n	800289c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e07b      	b.n	8002994 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d101      	bne.n	80028aa <HAL_UART_Transmit+0x40>
 80028a6:	2302      	movs	r3, #2
 80028a8:	e074      	b.n	8002994 <HAL_UART_Transmit+0x12a>
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2201      	movs	r2, #1
 80028ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2200      	movs	r2, #0
 80028b6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2221      	movs	r2, #33	; 0x21
 80028bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80028c0:	f7fd fe90 	bl	80005e4 <HAL_GetTick>
 80028c4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	88fa      	ldrh	r2, [r7, #6]
 80028ca:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	88fa      	ldrh	r2, [r7, #6]
 80028d0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80028da:	e042      	b.n	8002962 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	3b01      	subs	r3, #1
 80028e4:	b29a      	uxth	r2, r3
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028f2:	d122      	bne.n	800293a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	9300      	str	r3, [sp, #0]
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	2200      	movs	r2, #0
 80028fc:	2180      	movs	r1, #128	; 0x80
 80028fe:	68f8      	ldr	r0, [r7, #12]
 8002900:	f000 fa10 	bl	8002d24 <UART_WaitOnFlagUntilTimeout>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e042      	b.n	8002994 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	881b      	ldrh	r3, [r3, #0]
 8002916:	461a      	mov	r2, r3
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002920:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d103      	bne.n	8002932 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	3302      	adds	r3, #2
 800292e:	60bb      	str	r3, [r7, #8]
 8002930:	e017      	b.n	8002962 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	3301      	adds	r3, #1
 8002936:	60bb      	str	r3, [r7, #8]
 8002938:	e013      	b.n	8002962 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	9300      	str	r3, [sp, #0]
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	2200      	movs	r2, #0
 8002942:	2180      	movs	r1, #128	; 0x80
 8002944:	68f8      	ldr	r0, [r7, #12]
 8002946:	f000 f9ed 	bl	8002d24 <UART_WaitOnFlagUntilTimeout>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d001      	beq.n	8002954 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e01f      	b.n	8002994 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	1c5a      	adds	r2, r3, #1
 8002958:	60ba      	str	r2, [r7, #8]
 800295a:	781a      	ldrb	r2, [r3, #0]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002966:	b29b      	uxth	r3, r3
 8002968:	2b00      	cmp	r3, #0
 800296a:	d1b7      	bne.n	80028dc <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	9300      	str	r3, [sp, #0]
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	2200      	movs	r2, #0
 8002974:	2140      	movs	r1, #64	; 0x40
 8002976:	68f8      	ldr	r0, [r7, #12]
 8002978:	f000 f9d4 	bl	8002d24 <UART_WaitOnFlagUntilTimeout>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e006      	b.n	8002994 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2220      	movs	r2, #32
 800298a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800298e:	2300      	movs	r3, #0
 8002990:	e000      	b.n	8002994 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002992:	2302      	movs	r3, #2
  }
}
 8002994:	4618      	mov	r0, r3
 8002996:	3718      	adds	r7, #24
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}

0800299c <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b088      	sub	sp, #32
 80029a0:	af02      	add	r7, sp, #8
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	603b      	str	r3, [r7, #0]
 80029a8:	4613      	mov	r3, r2
 80029aa:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80029ac:	2300      	movs	r3, #0
 80029ae:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	2b20      	cmp	r3, #32
 80029ba:	f040 8090 	bne.w	8002ade <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d002      	beq.n	80029ca <HAL_UART_Receive+0x2e>
 80029c4:	88fb      	ldrh	r3, [r7, #6]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d101      	bne.n	80029ce <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e088      	b.n	8002ae0 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d101      	bne.n	80029dc <HAL_UART_Receive+0x40>
 80029d8:	2302      	movs	r3, #2
 80029da:	e081      	b.n	8002ae0 <HAL_UART_Receive+0x144>
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2200      	movs	r2, #0
 80029e8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2222      	movs	r2, #34	; 0x22
 80029ee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80029f2:	f7fd fdf7 	bl	80005e4 <HAL_GetTick>
 80029f6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	88fa      	ldrh	r2, [r7, #6]
 80029fc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	88fa      	ldrh	r2, [r7, #6]
 8002a02:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002a0c:	e05c      	b.n	8002ac8 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	3b01      	subs	r3, #1
 8002a16:	b29a      	uxth	r2, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a24:	d12b      	bne.n	8002a7e <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	9300      	str	r3, [sp, #0]
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	2120      	movs	r1, #32
 8002a30:	68f8      	ldr	r0, [r7, #12]
 8002a32:	f000 f977 	bl	8002d24 <UART_WaitOnFlagUntilTimeout>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d001      	beq.n	8002a40 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e04f      	b.n	8002ae0 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	691b      	ldr	r3, [r3, #16]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d10c      	bne.n	8002a66 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a58:	b29a      	uxth	r2, r3
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	3302      	adds	r3, #2
 8002a62:	60bb      	str	r3, [r7, #8]
 8002a64:	e030      	b.n	8002ac8 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	b29a      	uxth	r2, r3
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	3301      	adds	r3, #1
 8002a7a:	60bb      	str	r3, [r7, #8]
 8002a7c:	e024      	b.n	8002ac8 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	9300      	str	r3, [sp, #0]
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	2200      	movs	r2, #0
 8002a86:	2120      	movs	r1, #32
 8002a88:	68f8      	ldr	r0, [r7, #12]
 8002a8a:	f000 f94b 	bl	8002d24 <UART_WaitOnFlagUntilTimeout>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d001      	beq.n	8002a98 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e023      	b.n	8002ae0 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	691b      	ldr	r3, [r3, #16]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d108      	bne.n	8002ab2 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	6859      	ldr	r1, [r3, #4]
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	1c5a      	adds	r2, r3, #1
 8002aaa:	60ba      	str	r2, [r7, #8]
 8002aac:	b2ca      	uxtb	r2, r1
 8002aae:	701a      	strb	r2, [r3, #0]
 8002ab0:	e00a      	b.n	8002ac8 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	b2da      	uxtb	r2, r3
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	1c59      	adds	r1, r3, #1
 8002abe:	60b9      	str	r1, [r7, #8]
 8002ac0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002ac4:	b2d2      	uxtb	r2, r2
 8002ac6:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d19d      	bne.n	8002a0e <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2220      	movs	r2, #32
 8002ad6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8002ada:	2300      	movs	r3, #0
 8002adc:	e000      	b.n	8002ae0 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8002ade:	2302      	movs	r3, #2
  }
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3718      	adds	r7, #24
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b088      	sub	sp, #32
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	695b      	ldr	r3, [r3, #20]
 8002b06:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	f003 030f 	and.w	r3, r3, #15
 8002b16:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d10d      	bne.n	8002b3a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	f003 0320 	and.w	r3, r3, #32
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d008      	beq.n	8002b3a <HAL_UART_IRQHandler+0x52>
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	f003 0320 	and.w	r3, r3, #32
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d003      	beq.n	8002b3a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 f9e0 	bl	8002ef8 <UART_Receive_IT>
      return;
 8002b38:	e0d1      	b.n	8002cde <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	f000 80b0 	beq.w	8002ca2 <HAL_UART_IRQHandler+0x1ba>
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	f003 0301 	and.w	r3, r3, #1
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d105      	bne.n	8002b58 <HAL_UART_IRQHandler+0x70>
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	f000 80a5 	beq.w	8002ca2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d00a      	beq.n	8002b78 <HAL_UART_IRQHandler+0x90>
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d005      	beq.n	8002b78 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b70:	f043 0201 	orr.w	r2, r3, #1
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	f003 0304 	and.w	r3, r3, #4
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d00a      	beq.n	8002b98 <HAL_UART_IRQHandler+0xb0>
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	f003 0301 	and.w	r3, r3, #1
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d005      	beq.n	8002b98 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b90:	f043 0202 	orr.w	r2, r3, #2
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d00a      	beq.n	8002bb8 <HAL_UART_IRQHandler+0xd0>
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	f003 0301 	and.w	r3, r3, #1
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d005      	beq.n	8002bb8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bb0:	f043 0204 	orr.w	r2, r3, #4
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	f003 0308 	and.w	r3, r3, #8
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d00f      	beq.n	8002be2 <HAL_UART_IRQHandler+0xfa>
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	f003 0320 	and.w	r3, r3, #32
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d104      	bne.n	8002bd6 <HAL_UART_IRQHandler+0xee>
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d005      	beq.n	8002be2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bda:	f043 0208 	orr.w	r2, r3, #8
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d078      	beq.n	8002cdc <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	f003 0320 	and.w	r3, r3, #32
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d007      	beq.n	8002c04 <HAL_UART_IRQHandler+0x11c>
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	f003 0320 	and.w	r3, r3, #32
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d002      	beq.n	8002c04 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 f97a 	bl	8002ef8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c0e:	2b40      	cmp	r3, #64	; 0x40
 8002c10:	bf0c      	ite	eq
 8002c12:	2301      	moveq	r3, #1
 8002c14:	2300      	movne	r3, #0
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c1e:	f003 0308 	and.w	r3, r3, #8
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d102      	bne.n	8002c2c <HAL_UART_IRQHandler+0x144>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d031      	beq.n	8002c90 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f000 f8c3 	bl	8002db8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	695b      	ldr	r3, [r3, #20]
 8002c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c3c:	2b40      	cmp	r3, #64	; 0x40
 8002c3e:	d123      	bne.n	8002c88 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	695a      	ldr	r2, [r3, #20]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c4e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d013      	beq.n	8002c80 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c5c:	4a21      	ldr	r2, [pc, #132]	; (8002ce4 <HAL_UART_IRQHandler+0x1fc>)
 8002c5e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7fd feab 	bl	80009c0 <HAL_DMA_Abort_IT>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d016      	beq.n	8002c9e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c7a:	4610      	mov	r0, r2
 8002c7c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c7e:	e00e      	b.n	8002c9e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f000 f845 	bl	8002d10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c86:	e00a      	b.n	8002c9e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f000 f841 	bl	8002d10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c8e:	e006      	b.n	8002c9e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f000 f83d 	bl	8002d10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002c9c:	e01e      	b.n	8002cdc <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c9e:	bf00      	nop
    return;
 8002ca0:	e01c      	b.n	8002cdc <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d008      	beq.n	8002cbe <HAL_UART_IRQHandler+0x1d6>
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d003      	beq.n	8002cbe <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 f8b0 	bl	8002e1c <UART_Transmit_IT>
    return;
 8002cbc:	e00f      	b.n	8002cde <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d00a      	beq.n	8002cde <HAL_UART_IRQHandler+0x1f6>
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d005      	beq.n	8002cde <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f000 f8f8 	bl	8002ec8 <UART_EndTransmit_IT>
    return;
 8002cd8:	bf00      	nop
 8002cda:	e000      	b.n	8002cde <HAL_UART_IRQHandler+0x1f6>
    return;
 8002cdc:	bf00      	nop
  }
}
 8002cde:	3720      	adds	r7, #32
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	08002df5 	.word	0x08002df5

08002ce8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002cf0:	bf00      	nop
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 // HAL_Delay(500);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002d04:	bf00      	nop
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002d18:	bf00      	nop
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	603b      	str	r3, [r7, #0]
 8002d30:	4613      	mov	r3, r2
 8002d32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d34:	e02c      	b.n	8002d90 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d3c:	d028      	beq.n	8002d90 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d007      	beq.n	8002d54 <UART_WaitOnFlagUntilTimeout+0x30>
 8002d44:	f7fd fc4e 	bl	80005e4 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	69ba      	ldr	r2, [r7, #24]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d21d      	bcs.n	8002d90 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	68da      	ldr	r2, [r3, #12]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002d62:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	695a      	ldr	r2, [r3, #20]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f022 0201 	bic.w	r2, r2, #1
 8002d72:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2220      	movs	r2, #32
 8002d78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2220      	movs	r2, #32
 8002d80:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	e00f      	b.n	8002db0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	4013      	ands	r3, r2
 8002d9a:	68ba      	ldr	r2, [r7, #8]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	bf0c      	ite	eq
 8002da0:	2301      	moveq	r3, #1
 8002da2:	2300      	movne	r3, #0
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	461a      	mov	r2, r3
 8002da8:	79fb      	ldrb	r3, [r7, #7]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d0c3      	beq.n	8002d36 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002dae:	2300      	movs	r3, #0
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3710      	adds	r7, #16
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68da      	ldr	r2, [r3, #12]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002dce:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	695a      	ldr	r2, [r3, #20]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f022 0201 	bic.w	r2, r2, #1
 8002dde:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2220      	movs	r2, #32
 8002de4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002de8:	bf00      	nop
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e00:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2200      	movs	r2, #0
 8002e06:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002e0e:	68f8      	ldr	r0, [r7, #12]
 8002e10:	f7ff ff7e 	bl	8002d10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e14:	bf00      	nop
 8002e16:	3710      	adds	r7, #16
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b085      	sub	sp, #20
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	2b21      	cmp	r3, #33	; 0x21
 8002e2e:	d144      	bne.n	8002eba <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e38:	d11a      	bne.n	8002e70 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a1b      	ldr	r3, [r3, #32]
 8002e3e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	881b      	ldrh	r3, [r3, #0]
 8002e44:	461a      	mov	r2, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e4e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d105      	bne.n	8002e64 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a1b      	ldr	r3, [r3, #32]
 8002e5c:	1c9a      	adds	r2, r3, #2
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	621a      	str	r2, [r3, #32]
 8002e62:	e00e      	b.n	8002e82 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a1b      	ldr	r3, [r3, #32]
 8002e68:	1c5a      	adds	r2, r3, #1
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	621a      	str	r2, [r3, #32]
 8002e6e:	e008      	b.n	8002e82 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a1b      	ldr	r3, [r3, #32]
 8002e74:	1c59      	adds	r1, r3, #1
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	6211      	str	r1, [r2, #32]
 8002e7a:	781a      	ldrb	r2, [r3, #0]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	4619      	mov	r1, r3
 8002e90:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d10f      	bne.n	8002eb6 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68da      	ldr	r2, [r3, #12]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ea4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	68da      	ldr	r2, [r3, #12]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002eb4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	e000      	b.n	8002ebc <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002eba:	2302      	movs	r3, #2
  }
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3714      	adds	r7, #20
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	68da      	ldr	r2, [r3, #12]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ede:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2220      	movs	r2, #32
 8002ee4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f7ff fefd 	bl	8002ce8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3708      	adds	r7, #8
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	2b22      	cmp	r3, #34	; 0x22
 8002f0a:	d171      	bne.n	8002ff0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f14:	d123      	bne.n	8002f5e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f1a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	691b      	ldr	r3, [r3, #16]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d10e      	bne.n	8002f42 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f30:	b29a      	uxth	r2, r3
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f3a:	1c9a      	adds	r2, r3, #2
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	629a      	str	r2, [r3, #40]	; 0x28
 8002f40:	e029      	b.n	8002f96 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	b29a      	uxth	r2, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f56:	1c5a      	adds	r2, r3, #1
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	629a      	str	r2, [r3, #40]	; 0x28
 8002f5c:	e01b      	b.n	8002f96 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d10a      	bne.n	8002f7c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	6858      	ldr	r0, [r3, #4]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f70:	1c59      	adds	r1, r3, #1
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	6291      	str	r1, [r2, #40]	; 0x28
 8002f76:	b2c2      	uxtb	r2, r0
 8002f78:	701a      	strb	r2, [r3, #0]
 8002f7a:	e00c      	b.n	8002f96 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	b2da      	uxtb	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f88:	1c58      	adds	r0, r3, #1
 8002f8a:	6879      	ldr	r1, [r7, #4]
 8002f8c:	6288      	str	r0, [r1, #40]	; 0x28
 8002f8e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002f92:	b2d2      	uxtb	r2, r2
 8002f94:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	3b01      	subs	r3, #1
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d120      	bne.n	8002fec <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	68da      	ldr	r2, [r3, #12]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f022 0220 	bic.w	r2, r2, #32
 8002fb8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68da      	ldr	r2, [r3, #12]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fc8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	695a      	ldr	r2, [r3, #20]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f022 0201 	bic.w	r2, r2, #1
 8002fd8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2220      	movs	r2, #32
 8002fde:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f7ff fe8a 	bl	8002cfc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	e002      	b.n	8002ff2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002fec:	2300      	movs	r3, #0
 8002fee:	e000      	b.n	8002ff2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002ff0:	2302      	movs	r3, #2
  }
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3710      	adds	r7, #16
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
	...

08002ffc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003000:	b085      	sub	sp, #20
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	68da      	ldr	r2, [r3, #12]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	430a      	orrs	r2, r1
 800301a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689a      	ldr	r2, [r3, #8]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	691b      	ldr	r3, [r3, #16]
 8003024:	431a      	orrs	r2, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	431a      	orrs	r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	69db      	ldr	r3, [r3, #28]
 8003030:	4313      	orrs	r3, r2
 8003032:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800303e:	f023 030c 	bic.w	r3, r3, #12
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	6812      	ldr	r2, [r2, #0]
 8003046:	68f9      	ldr	r1, [r7, #12]
 8003048:	430b      	orrs	r3, r1
 800304a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	695b      	ldr	r3, [r3, #20]
 8003052:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	699a      	ldr	r2, [r3, #24]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	430a      	orrs	r2, r1
 8003060:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	69db      	ldr	r3, [r3, #28]
 8003066:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800306a:	f040 818b 	bne.w	8003384 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4ac1      	ldr	r2, [pc, #772]	; (8003378 <UART_SetConfig+0x37c>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d005      	beq.n	8003084 <UART_SetConfig+0x88>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4abf      	ldr	r2, [pc, #764]	; (800337c <UART_SetConfig+0x380>)
 800307e:	4293      	cmp	r3, r2
 8003080:	f040 80bd 	bne.w	80031fe <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003084:	f7fe f9aa 	bl	80013dc <HAL_RCC_GetPCLK2Freq>
 8003088:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	461d      	mov	r5, r3
 800308e:	f04f 0600 	mov.w	r6, #0
 8003092:	46a8      	mov	r8, r5
 8003094:	46b1      	mov	r9, r6
 8003096:	eb18 0308 	adds.w	r3, r8, r8
 800309a:	eb49 0409 	adc.w	r4, r9, r9
 800309e:	4698      	mov	r8, r3
 80030a0:	46a1      	mov	r9, r4
 80030a2:	eb18 0805 	adds.w	r8, r8, r5
 80030a6:	eb49 0906 	adc.w	r9, r9, r6
 80030aa:	f04f 0100 	mov.w	r1, #0
 80030ae:	f04f 0200 	mov.w	r2, #0
 80030b2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80030b6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80030ba:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80030be:	4688      	mov	r8, r1
 80030c0:	4691      	mov	r9, r2
 80030c2:	eb18 0005 	adds.w	r0, r8, r5
 80030c6:	eb49 0106 	adc.w	r1, r9, r6
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	461d      	mov	r5, r3
 80030d0:	f04f 0600 	mov.w	r6, #0
 80030d4:	196b      	adds	r3, r5, r5
 80030d6:	eb46 0406 	adc.w	r4, r6, r6
 80030da:	461a      	mov	r2, r3
 80030dc:	4623      	mov	r3, r4
 80030de:	f7fd f89b 	bl	8000218 <__aeabi_uldivmod>
 80030e2:	4603      	mov	r3, r0
 80030e4:	460c      	mov	r4, r1
 80030e6:	461a      	mov	r2, r3
 80030e8:	4ba5      	ldr	r3, [pc, #660]	; (8003380 <UART_SetConfig+0x384>)
 80030ea:	fba3 2302 	umull	r2, r3, r3, r2
 80030ee:	095b      	lsrs	r3, r3, #5
 80030f0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	461d      	mov	r5, r3
 80030f8:	f04f 0600 	mov.w	r6, #0
 80030fc:	46a9      	mov	r9, r5
 80030fe:	46b2      	mov	sl, r6
 8003100:	eb19 0309 	adds.w	r3, r9, r9
 8003104:	eb4a 040a 	adc.w	r4, sl, sl
 8003108:	4699      	mov	r9, r3
 800310a:	46a2      	mov	sl, r4
 800310c:	eb19 0905 	adds.w	r9, r9, r5
 8003110:	eb4a 0a06 	adc.w	sl, sl, r6
 8003114:	f04f 0100 	mov.w	r1, #0
 8003118:	f04f 0200 	mov.w	r2, #0
 800311c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003120:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003124:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003128:	4689      	mov	r9, r1
 800312a:	4692      	mov	sl, r2
 800312c:	eb19 0005 	adds.w	r0, r9, r5
 8003130:	eb4a 0106 	adc.w	r1, sl, r6
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	461d      	mov	r5, r3
 800313a:	f04f 0600 	mov.w	r6, #0
 800313e:	196b      	adds	r3, r5, r5
 8003140:	eb46 0406 	adc.w	r4, r6, r6
 8003144:	461a      	mov	r2, r3
 8003146:	4623      	mov	r3, r4
 8003148:	f7fd f866 	bl	8000218 <__aeabi_uldivmod>
 800314c:	4603      	mov	r3, r0
 800314e:	460c      	mov	r4, r1
 8003150:	461a      	mov	r2, r3
 8003152:	4b8b      	ldr	r3, [pc, #556]	; (8003380 <UART_SetConfig+0x384>)
 8003154:	fba3 1302 	umull	r1, r3, r3, r2
 8003158:	095b      	lsrs	r3, r3, #5
 800315a:	2164      	movs	r1, #100	; 0x64
 800315c:	fb01 f303 	mul.w	r3, r1, r3
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	00db      	lsls	r3, r3, #3
 8003164:	3332      	adds	r3, #50	; 0x32
 8003166:	4a86      	ldr	r2, [pc, #536]	; (8003380 <UART_SetConfig+0x384>)
 8003168:	fba2 2303 	umull	r2, r3, r2, r3
 800316c:	095b      	lsrs	r3, r3, #5
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003174:	4498      	add	r8, r3
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	461d      	mov	r5, r3
 800317a:	f04f 0600 	mov.w	r6, #0
 800317e:	46a9      	mov	r9, r5
 8003180:	46b2      	mov	sl, r6
 8003182:	eb19 0309 	adds.w	r3, r9, r9
 8003186:	eb4a 040a 	adc.w	r4, sl, sl
 800318a:	4699      	mov	r9, r3
 800318c:	46a2      	mov	sl, r4
 800318e:	eb19 0905 	adds.w	r9, r9, r5
 8003192:	eb4a 0a06 	adc.w	sl, sl, r6
 8003196:	f04f 0100 	mov.w	r1, #0
 800319a:	f04f 0200 	mov.w	r2, #0
 800319e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031a2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80031a6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80031aa:	4689      	mov	r9, r1
 80031ac:	4692      	mov	sl, r2
 80031ae:	eb19 0005 	adds.w	r0, r9, r5
 80031b2:	eb4a 0106 	adc.w	r1, sl, r6
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	461d      	mov	r5, r3
 80031bc:	f04f 0600 	mov.w	r6, #0
 80031c0:	196b      	adds	r3, r5, r5
 80031c2:	eb46 0406 	adc.w	r4, r6, r6
 80031c6:	461a      	mov	r2, r3
 80031c8:	4623      	mov	r3, r4
 80031ca:	f7fd f825 	bl	8000218 <__aeabi_uldivmod>
 80031ce:	4603      	mov	r3, r0
 80031d0:	460c      	mov	r4, r1
 80031d2:	461a      	mov	r2, r3
 80031d4:	4b6a      	ldr	r3, [pc, #424]	; (8003380 <UART_SetConfig+0x384>)
 80031d6:	fba3 1302 	umull	r1, r3, r3, r2
 80031da:	095b      	lsrs	r3, r3, #5
 80031dc:	2164      	movs	r1, #100	; 0x64
 80031de:	fb01 f303 	mul.w	r3, r1, r3
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	00db      	lsls	r3, r3, #3
 80031e6:	3332      	adds	r3, #50	; 0x32
 80031e8:	4a65      	ldr	r2, [pc, #404]	; (8003380 <UART_SetConfig+0x384>)
 80031ea:	fba2 2303 	umull	r2, r3, r2, r3
 80031ee:	095b      	lsrs	r3, r3, #5
 80031f0:	f003 0207 	and.w	r2, r3, #7
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4442      	add	r2, r8
 80031fa:	609a      	str	r2, [r3, #8]
 80031fc:	e26f      	b.n	80036de <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80031fe:	f7fe f8d9 	bl	80013b4 <HAL_RCC_GetPCLK1Freq>
 8003202:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	461d      	mov	r5, r3
 8003208:	f04f 0600 	mov.w	r6, #0
 800320c:	46a8      	mov	r8, r5
 800320e:	46b1      	mov	r9, r6
 8003210:	eb18 0308 	adds.w	r3, r8, r8
 8003214:	eb49 0409 	adc.w	r4, r9, r9
 8003218:	4698      	mov	r8, r3
 800321a:	46a1      	mov	r9, r4
 800321c:	eb18 0805 	adds.w	r8, r8, r5
 8003220:	eb49 0906 	adc.w	r9, r9, r6
 8003224:	f04f 0100 	mov.w	r1, #0
 8003228:	f04f 0200 	mov.w	r2, #0
 800322c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003230:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003234:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003238:	4688      	mov	r8, r1
 800323a:	4691      	mov	r9, r2
 800323c:	eb18 0005 	adds.w	r0, r8, r5
 8003240:	eb49 0106 	adc.w	r1, r9, r6
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	461d      	mov	r5, r3
 800324a:	f04f 0600 	mov.w	r6, #0
 800324e:	196b      	adds	r3, r5, r5
 8003250:	eb46 0406 	adc.w	r4, r6, r6
 8003254:	461a      	mov	r2, r3
 8003256:	4623      	mov	r3, r4
 8003258:	f7fc ffde 	bl	8000218 <__aeabi_uldivmod>
 800325c:	4603      	mov	r3, r0
 800325e:	460c      	mov	r4, r1
 8003260:	461a      	mov	r2, r3
 8003262:	4b47      	ldr	r3, [pc, #284]	; (8003380 <UART_SetConfig+0x384>)
 8003264:	fba3 2302 	umull	r2, r3, r3, r2
 8003268:	095b      	lsrs	r3, r3, #5
 800326a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	461d      	mov	r5, r3
 8003272:	f04f 0600 	mov.w	r6, #0
 8003276:	46a9      	mov	r9, r5
 8003278:	46b2      	mov	sl, r6
 800327a:	eb19 0309 	adds.w	r3, r9, r9
 800327e:	eb4a 040a 	adc.w	r4, sl, sl
 8003282:	4699      	mov	r9, r3
 8003284:	46a2      	mov	sl, r4
 8003286:	eb19 0905 	adds.w	r9, r9, r5
 800328a:	eb4a 0a06 	adc.w	sl, sl, r6
 800328e:	f04f 0100 	mov.w	r1, #0
 8003292:	f04f 0200 	mov.w	r2, #0
 8003296:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800329a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800329e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80032a2:	4689      	mov	r9, r1
 80032a4:	4692      	mov	sl, r2
 80032a6:	eb19 0005 	adds.w	r0, r9, r5
 80032aa:	eb4a 0106 	adc.w	r1, sl, r6
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	461d      	mov	r5, r3
 80032b4:	f04f 0600 	mov.w	r6, #0
 80032b8:	196b      	adds	r3, r5, r5
 80032ba:	eb46 0406 	adc.w	r4, r6, r6
 80032be:	461a      	mov	r2, r3
 80032c0:	4623      	mov	r3, r4
 80032c2:	f7fc ffa9 	bl	8000218 <__aeabi_uldivmod>
 80032c6:	4603      	mov	r3, r0
 80032c8:	460c      	mov	r4, r1
 80032ca:	461a      	mov	r2, r3
 80032cc:	4b2c      	ldr	r3, [pc, #176]	; (8003380 <UART_SetConfig+0x384>)
 80032ce:	fba3 1302 	umull	r1, r3, r3, r2
 80032d2:	095b      	lsrs	r3, r3, #5
 80032d4:	2164      	movs	r1, #100	; 0x64
 80032d6:	fb01 f303 	mul.w	r3, r1, r3
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	00db      	lsls	r3, r3, #3
 80032de:	3332      	adds	r3, #50	; 0x32
 80032e0:	4a27      	ldr	r2, [pc, #156]	; (8003380 <UART_SetConfig+0x384>)
 80032e2:	fba2 2303 	umull	r2, r3, r2, r3
 80032e6:	095b      	lsrs	r3, r3, #5
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80032ee:	4498      	add	r8, r3
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	461d      	mov	r5, r3
 80032f4:	f04f 0600 	mov.w	r6, #0
 80032f8:	46a9      	mov	r9, r5
 80032fa:	46b2      	mov	sl, r6
 80032fc:	eb19 0309 	adds.w	r3, r9, r9
 8003300:	eb4a 040a 	adc.w	r4, sl, sl
 8003304:	4699      	mov	r9, r3
 8003306:	46a2      	mov	sl, r4
 8003308:	eb19 0905 	adds.w	r9, r9, r5
 800330c:	eb4a 0a06 	adc.w	sl, sl, r6
 8003310:	f04f 0100 	mov.w	r1, #0
 8003314:	f04f 0200 	mov.w	r2, #0
 8003318:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800331c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003320:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003324:	4689      	mov	r9, r1
 8003326:	4692      	mov	sl, r2
 8003328:	eb19 0005 	adds.w	r0, r9, r5
 800332c:	eb4a 0106 	adc.w	r1, sl, r6
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	461d      	mov	r5, r3
 8003336:	f04f 0600 	mov.w	r6, #0
 800333a:	196b      	adds	r3, r5, r5
 800333c:	eb46 0406 	adc.w	r4, r6, r6
 8003340:	461a      	mov	r2, r3
 8003342:	4623      	mov	r3, r4
 8003344:	f7fc ff68 	bl	8000218 <__aeabi_uldivmod>
 8003348:	4603      	mov	r3, r0
 800334a:	460c      	mov	r4, r1
 800334c:	461a      	mov	r2, r3
 800334e:	4b0c      	ldr	r3, [pc, #48]	; (8003380 <UART_SetConfig+0x384>)
 8003350:	fba3 1302 	umull	r1, r3, r3, r2
 8003354:	095b      	lsrs	r3, r3, #5
 8003356:	2164      	movs	r1, #100	; 0x64
 8003358:	fb01 f303 	mul.w	r3, r1, r3
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	00db      	lsls	r3, r3, #3
 8003360:	3332      	adds	r3, #50	; 0x32
 8003362:	4a07      	ldr	r2, [pc, #28]	; (8003380 <UART_SetConfig+0x384>)
 8003364:	fba2 2303 	umull	r2, r3, r2, r3
 8003368:	095b      	lsrs	r3, r3, #5
 800336a:	f003 0207 	and.w	r2, r3, #7
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4442      	add	r2, r8
 8003374:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003376:	e1b2      	b.n	80036de <UART_SetConfig+0x6e2>
 8003378:	40011000 	.word	0x40011000
 800337c:	40011400 	.word	0x40011400
 8003380:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4ad7      	ldr	r2, [pc, #860]	; (80036e8 <UART_SetConfig+0x6ec>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d005      	beq.n	800339a <UART_SetConfig+0x39e>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4ad6      	ldr	r2, [pc, #856]	; (80036ec <UART_SetConfig+0x6f0>)
 8003394:	4293      	cmp	r3, r2
 8003396:	f040 80d1 	bne.w	800353c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800339a:	f7fe f81f 	bl	80013dc <HAL_RCC_GetPCLK2Freq>
 800339e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	469a      	mov	sl, r3
 80033a4:	f04f 0b00 	mov.w	fp, #0
 80033a8:	46d0      	mov	r8, sl
 80033aa:	46d9      	mov	r9, fp
 80033ac:	eb18 0308 	adds.w	r3, r8, r8
 80033b0:	eb49 0409 	adc.w	r4, r9, r9
 80033b4:	4698      	mov	r8, r3
 80033b6:	46a1      	mov	r9, r4
 80033b8:	eb18 080a 	adds.w	r8, r8, sl
 80033bc:	eb49 090b 	adc.w	r9, r9, fp
 80033c0:	f04f 0100 	mov.w	r1, #0
 80033c4:	f04f 0200 	mov.w	r2, #0
 80033c8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80033cc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80033d0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80033d4:	4688      	mov	r8, r1
 80033d6:	4691      	mov	r9, r2
 80033d8:	eb1a 0508 	adds.w	r5, sl, r8
 80033dc:	eb4b 0609 	adc.w	r6, fp, r9
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	4619      	mov	r1, r3
 80033e6:	f04f 0200 	mov.w	r2, #0
 80033ea:	f04f 0300 	mov.w	r3, #0
 80033ee:	f04f 0400 	mov.w	r4, #0
 80033f2:	0094      	lsls	r4, r2, #2
 80033f4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80033f8:	008b      	lsls	r3, r1, #2
 80033fa:	461a      	mov	r2, r3
 80033fc:	4623      	mov	r3, r4
 80033fe:	4628      	mov	r0, r5
 8003400:	4631      	mov	r1, r6
 8003402:	f7fc ff09 	bl	8000218 <__aeabi_uldivmod>
 8003406:	4603      	mov	r3, r0
 8003408:	460c      	mov	r4, r1
 800340a:	461a      	mov	r2, r3
 800340c:	4bb8      	ldr	r3, [pc, #736]	; (80036f0 <UART_SetConfig+0x6f4>)
 800340e:	fba3 2302 	umull	r2, r3, r3, r2
 8003412:	095b      	lsrs	r3, r3, #5
 8003414:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	469b      	mov	fp, r3
 800341c:	f04f 0c00 	mov.w	ip, #0
 8003420:	46d9      	mov	r9, fp
 8003422:	46e2      	mov	sl, ip
 8003424:	eb19 0309 	adds.w	r3, r9, r9
 8003428:	eb4a 040a 	adc.w	r4, sl, sl
 800342c:	4699      	mov	r9, r3
 800342e:	46a2      	mov	sl, r4
 8003430:	eb19 090b 	adds.w	r9, r9, fp
 8003434:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003438:	f04f 0100 	mov.w	r1, #0
 800343c:	f04f 0200 	mov.w	r2, #0
 8003440:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003444:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003448:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800344c:	4689      	mov	r9, r1
 800344e:	4692      	mov	sl, r2
 8003450:	eb1b 0509 	adds.w	r5, fp, r9
 8003454:	eb4c 060a 	adc.w	r6, ip, sl
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	4619      	mov	r1, r3
 800345e:	f04f 0200 	mov.w	r2, #0
 8003462:	f04f 0300 	mov.w	r3, #0
 8003466:	f04f 0400 	mov.w	r4, #0
 800346a:	0094      	lsls	r4, r2, #2
 800346c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003470:	008b      	lsls	r3, r1, #2
 8003472:	461a      	mov	r2, r3
 8003474:	4623      	mov	r3, r4
 8003476:	4628      	mov	r0, r5
 8003478:	4631      	mov	r1, r6
 800347a:	f7fc fecd 	bl	8000218 <__aeabi_uldivmod>
 800347e:	4603      	mov	r3, r0
 8003480:	460c      	mov	r4, r1
 8003482:	461a      	mov	r2, r3
 8003484:	4b9a      	ldr	r3, [pc, #616]	; (80036f0 <UART_SetConfig+0x6f4>)
 8003486:	fba3 1302 	umull	r1, r3, r3, r2
 800348a:	095b      	lsrs	r3, r3, #5
 800348c:	2164      	movs	r1, #100	; 0x64
 800348e:	fb01 f303 	mul.w	r3, r1, r3
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	011b      	lsls	r3, r3, #4
 8003496:	3332      	adds	r3, #50	; 0x32
 8003498:	4a95      	ldr	r2, [pc, #596]	; (80036f0 <UART_SetConfig+0x6f4>)
 800349a:	fba2 2303 	umull	r2, r3, r2, r3
 800349e:	095b      	lsrs	r3, r3, #5
 80034a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034a4:	4498      	add	r8, r3
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	469b      	mov	fp, r3
 80034aa:	f04f 0c00 	mov.w	ip, #0
 80034ae:	46d9      	mov	r9, fp
 80034b0:	46e2      	mov	sl, ip
 80034b2:	eb19 0309 	adds.w	r3, r9, r9
 80034b6:	eb4a 040a 	adc.w	r4, sl, sl
 80034ba:	4699      	mov	r9, r3
 80034bc:	46a2      	mov	sl, r4
 80034be:	eb19 090b 	adds.w	r9, r9, fp
 80034c2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80034c6:	f04f 0100 	mov.w	r1, #0
 80034ca:	f04f 0200 	mov.w	r2, #0
 80034ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034d2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80034d6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80034da:	4689      	mov	r9, r1
 80034dc:	4692      	mov	sl, r2
 80034de:	eb1b 0509 	adds.w	r5, fp, r9
 80034e2:	eb4c 060a 	adc.w	r6, ip, sl
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	4619      	mov	r1, r3
 80034ec:	f04f 0200 	mov.w	r2, #0
 80034f0:	f04f 0300 	mov.w	r3, #0
 80034f4:	f04f 0400 	mov.w	r4, #0
 80034f8:	0094      	lsls	r4, r2, #2
 80034fa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80034fe:	008b      	lsls	r3, r1, #2
 8003500:	461a      	mov	r2, r3
 8003502:	4623      	mov	r3, r4
 8003504:	4628      	mov	r0, r5
 8003506:	4631      	mov	r1, r6
 8003508:	f7fc fe86 	bl	8000218 <__aeabi_uldivmod>
 800350c:	4603      	mov	r3, r0
 800350e:	460c      	mov	r4, r1
 8003510:	461a      	mov	r2, r3
 8003512:	4b77      	ldr	r3, [pc, #476]	; (80036f0 <UART_SetConfig+0x6f4>)
 8003514:	fba3 1302 	umull	r1, r3, r3, r2
 8003518:	095b      	lsrs	r3, r3, #5
 800351a:	2164      	movs	r1, #100	; 0x64
 800351c:	fb01 f303 	mul.w	r3, r1, r3
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	011b      	lsls	r3, r3, #4
 8003524:	3332      	adds	r3, #50	; 0x32
 8003526:	4a72      	ldr	r2, [pc, #456]	; (80036f0 <UART_SetConfig+0x6f4>)
 8003528:	fba2 2303 	umull	r2, r3, r2, r3
 800352c:	095b      	lsrs	r3, r3, #5
 800352e:	f003 020f 	and.w	r2, r3, #15
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4442      	add	r2, r8
 8003538:	609a      	str	r2, [r3, #8]
 800353a:	e0d0      	b.n	80036de <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800353c:	f7fd ff3a 	bl	80013b4 <HAL_RCC_GetPCLK1Freq>
 8003540:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	469a      	mov	sl, r3
 8003546:	f04f 0b00 	mov.w	fp, #0
 800354a:	46d0      	mov	r8, sl
 800354c:	46d9      	mov	r9, fp
 800354e:	eb18 0308 	adds.w	r3, r8, r8
 8003552:	eb49 0409 	adc.w	r4, r9, r9
 8003556:	4698      	mov	r8, r3
 8003558:	46a1      	mov	r9, r4
 800355a:	eb18 080a 	adds.w	r8, r8, sl
 800355e:	eb49 090b 	adc.w	r9, r9, fp
 8003562:	f04f 0100 	mov.w	r1, #0
 8003566:	f04f 0200 	mov.w	r2, #0
 800356a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800356e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003572:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003576:	4688      	mov	r8, r1
 8003578:	4691      	mov	r9, r2
 800357a:	eb1a 0508 	adds.w	r5, sl, r8
 800357e:	eb4b 0609 	adc.w	r6, fp, r9
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	4619      	mov	r1, r3
 8003588:	f04f 0200 	mov.w	r2, #0
 800358c:	f04f 0300 	mov.w	r3, #0
 8003590:	f04f 0400 	mov.w	r4, #0
 8003594:	0094      	lsls	r4, r2, #2
 8003596:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800359a:	008b      	lsls	r3, r1, #2
 800359c:	461a      	mov	r2, r3
 800359e:	4623      	mov	r3, r4
 80035a0:	4628      	mov	r0, r5
 80035a2:	4631      	mov	r1, r6
 80035a4:	f7fc fe38 	bl	8000218 <__aeabi_uldivmod>
 80035a8:	4603      	mov	r3, r0
 80035aa:	460c      	mov	r4, r1
 80035ac:	461a      	mov	r2, r3
 80035ae:	4b50      	ldr	r3, [pc, #320]	; (80036f0 <UART_SetConfig+0x6f4>)
 80035b0:	fba3 2302 	umull	r2, r3, r3, r2
 80035b4:	095b      	lsrs	r3, r3, #5
 80035b6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	469b      	mov	fp, r3
 80035be:	f04f 0c00 	mov.w	ip, #0
 80035c2:	46d9      	mov	r9, fp
 80035c4:	46e2      	mov	sl, ip
 80035c6:	eb19 0309 	adds.w	r3, r9, r9
 80035ca:	eb4a 040a 	adc.w	r4, sl, sl
 80035ce:	4699      	mov	r9, r3
 80035d0:	46a2      	mov	sl, r4
 80035d2:	eb19 090b 	adds.w	r9, r9, fp
 80035d6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80035da:	f04f 0100 	mov.w	r1, #0
 80035de:	f04f 0200 	mov.w	r2, #0
 80035e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035e6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80035ea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80035ee:	4689      	mov	r9, r1
 80035f0:	4692      	mov	sl, r2
 80035f2:	eb1b 0509 	adds.w	r5, fp, r9
 80035f6:	eb4c 060a 	adc.w	r6, ip, sl
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	4619      	mov	r1, r3
 8003600:	f04f 0200 	mov.w	r2, #0
 8003604:	f04f 0300 	mov.w	r3, #0
 8003608:	f04f 0400 	mov.w	r4, #0
 800360c:	0094      	lsls	r4, r2, #2
 800360e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003612:	008b      	lsls	r3, r1, #2
 8003614:	461a      	mov	r2, r3
 8003616:	4623      	mov	r3, r4
 8003618:	4628      	mov	r0, r5
 800361a:	4631      	mov	r1, r6
 800361c:	f7fc fdfc 	bl	8000218 <__aeabi_uldivmod>
 8003620:	4603      	mov	r3, r0
 8003622:	460c      	mov	r4, r1
 8003624:	461a      	mov	r2, r3
 8003626:	4b32      	ldr	r3, [pc, #200]	; (80036f0 <UART_SetConfig+0x6f4>)
 8003628:	fba3 1302 	umull	r1, r3, r3, r2
 800362c:	095b      	lsrs	r3, r3, #5
 800362e:	2164      	movs	r1, #100	; 0x64
 8003630:	fb01 f303 	mul.w	r3, r1, r3
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	011b      	lsls	r3, r3, #4
 8003638:	3332      	adds	r3, #50	; 0x32
 800363a:	4a2d      	ldr	r2, [pc, #180]	; (80036f0 <UART_SetConfig+0x6f4>)
 800363c:	fba2 2303 	umull	r2, r3, r2, r3
 8003640:	095b      	lsrs	r3, r3, #5
 8003642:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003646:	4498      	add	r8, r3
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	469b      	mov	fp, r3
 800364c:	f04f 0c00 	mov.w	ip, #0
 8003650:	46d9      	mov	r9, fp
 8003652:	46e2      	mov	sl, ip
 8003654:	eb19 0309 	adds.w	r3, r9, r9
 8003658:	eb4a 040a 	adc.w	r4, sl, sl
 800365c:	4699      	mov	r9, r3
 800365e:	46a2      	mov	sl, r4
 8003660:	eb19 090b 	adds.w	r9, r9, fp
 8003664:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003668:	f04f 0100 	mov.w	r1, #0
 800366c:	f04f 0200 	mov.w	r2, #0
 8003670:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003674:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003678:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800367c:	4689      	mov	r9, r1
 800367e:	4692      	mov	sl, r2
 8003680:	eb1b 0509 	adds.w	r5, fp, r9
 8003684:	eb4c 060a 	adc.w	r6, ip, sl
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	4619      	mov	r1, r3
 800368e:	f04f 0200 	mov.w	r2, #0
 8003692:	f04f 0300 	mov.w	r3, #0
 8003696:	f04f 0400 	mov.w	r4, #0
 800369a:	0094      	lsls	r4, r2, #2
 800369c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80036a0:	008b      	lsls	r3, r1, #2
 80036a2:	461a      	mov	r2, r3
 80036a4:	4623      	mov	r3, r4
 80036a6:	4628      	mov	r0, r5
 80036a8:	4631      	mov	r1, r6
 80036aa:	f7fc fdb5 	bl	8000218 <__aeabi_uldivmod>
 80036ae:	4603      	mov	r3, r0
 80036b0:	460c      	mov	r4, r1
 80036b2:	461a      	mov	r2, r3
 80036b4:	4b0e      	ldr	r3, [pc, #56]	; (80036f0 <UART_SetConfig+0x6f4>)
 80036b6:	fba3 1302 	umull	r1, r3, r3, r2
 80036ba:	095b      	lsrs	r3, r3, #5
 80036bc:	2164      	movs	r1, #100	; 0x64
 80036be:	fb01 f303 	mul.w	r3, r1, r3
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	011b      	lsls	r3, r3, #4
 80036c6:	3332      	adds	r3, #50	; 0x32
 80036c8:	4a09      	ldr	r2, [pc, #36]	; (80036f0 <UART_SetConfig+0x6f4>)
 80036ca:	fba2 2303 	umull	r2, r3, r2, r3
 80036ce:	095b      	lsrs	r3, r3, #5
 80036d0:	f003 020f 	and.w	r2, r3, #15
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4442      	add	r2, r8
 80036da:	609a      	str	r2, [r3, #8]
}
 80036dc:	e7ff      	b.n	80036de <UART_SetConfig+0x6e2>
 80036de:	bf00      	nop
 80036e0:	3714      	adds	r7, #20
 80036e2:	46bd      	mov	sp, r7
 80036e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036e8:	40011000 	.word	0x40011000
 80036ec:	40011400 	.word	0x40011400
 80036f0:	51eb851f 	.word	0x51eb851f

080036f4 <_ZN13ClassUartTestC1E20__UART_HandleTypeDef>:
#include "stm32f4xx_hal.h"
#include "stm32f4xx_hal_uart.h"
#include "usart.h"
#include "string.h"
#include "main.h"
ClassUartTest::ClassUartTest(UART_HandleTypeDef h) :
 80036f4:	b084      	sub	sp, #16
 80036f6:	b5b0      	push	{r4, r5, r7, lr}
 80036f8:	b082      	sub	sp, #8
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
 80036fe:	f107 001c 	add.w	r0, r7, #28
 8003702:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	huart(h)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	461d      	mov	r5, r3
 800370a:	f107 041c 	add.w	r4, r7, #28
 800370e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003710:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003712:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003714:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003716:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003718:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800371a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800371e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
{
	if (HAL_UART_Init(&huart) != HAL_OK)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4618      	mov	r0, r3
 8003726:	f7ff f853 	bl	80027d0 <HAL_UART_Init>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	bf14      	ite	ne
 8003730:	2301      	movne	r3, #1
 8003732:	2300      	moveq	r3, #0
 8003734:	b2db      	uxtb	r3, r3
 8003736:	2b00      	cmp	r3, #0
 8003738:	d001      	beq.n	800373e <_ZN13ClassUartTestC1E20__UART_HandleTypeDef+0x4a>
	{
		Error_Handler();
 800373a:	f000 fd53 	bl	80041e4 <Error_Handler>
	}
}
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4618      	mov	r0, r3
 8003742:	3708      	adds	r7, #8
 8003744:	46bd      	mov	sp, r7
 8003746:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800374a:	b004      	add	sp, #16
 800374c:	4770      	bx	lr

0800374e <_ZN13ClassUartTest11sendMessageEPhtm>:

bool ClassUartTest::sendMessage(uint8_t* buffer, uint16_t bufferLength, uint32_t timeout)
{
 800374e:	b580      	push	{r7, lr}
 8003750:	b084      	sub	sp, #16
 8003752:	af00      	add	r7, sp, #0
 8003754:	60f8      	str	r0, [r7, #12]
 8003756:	60b9      	str	r1, [r7, #8]
 8003758:	603b      	str	r3, [r7, #0]
 800375a:	4613      	mov	r3, r2
 800375c:	80fb      	strh	r3, [r7, #6]
	return (HAL_UART_Transmit(&huart, buffer, bufferLength, timeout) == HAL_OK);
 800375e:	68f8      	ldr	r0, [r7, #12]
 8003760:	88fa      	ldrh	r2, [r7, #6]
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	68b9      	ldr	r1, [r7, #8]
 8003766:	f7ff f880 	bl	800286a <HAL_UART_Transmit>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	bf0c      	ite	eq
 8003770:	2301      	moveq	r3, #1
 8003772:	2300      	movne	r3, #0
 8003774:	b2db      	uxtb	r3, r3
}
 8003776:	4618      	mov	r0, r3
 8003778:	3710      	adds	r7, #16
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}

0800377e <_ZN13ClassUartTest14receiveMessageEPhtm>:

bool ClassUartTest::receiveMessage(uint8_t* buffer, uint16_t bufferLength, uint32_t timeout)
{
 800377e:	b580      	push	{r7, lr}
 8003780:	b084      	sub	sp, #16
 8003782:	af00      	add	r7, sp, #0
 8003784:	60f8      	str	r0, [r7, #12]
 8003786:	60b9      	str	r1, [r7, #8]
 8003788:	603b      	str	r3, [r7, #0]
 800378a:	4613      	mov	r3, r2
 800378c:	80fb      	strh	r3, [r7, #6]
	return (HAL_UART_Receive(&huart, buffer, bufferLength, timeout) == HAL_OK);
 800378e:	68f8      	ldr	r0, [r7, #12]
 8003790:	88fa      	ldrh	r2, [r7, #6]
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	68b9      	ldr	r1, [r7, #8]
 8003796:	f7ff f901 	bl	800299c <HAL_UART_Receive>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	bf0c      	ite	eq
 80037a0:	2301      	moveq	r3, #1
 80037a2:	2300      	movne	r3, #0
 80037a4:	b2db      	uxtb	r3, r3
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3710      	adds	r7, #16
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
	...

080037b0 <_ZN13HighLevelCommC1ER20__UART_HandleTypeDefR17TIM_HandleTypeDef>:



Queue QueueTest;

HighLevelComm::HighLevelComm(UART_HandleTypeDef& uart,TIM_HandleTypeDef& pwm) :
 80037b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037b2:	b093      	sub	sp, #76	; 0x4c
 80037b4:	af0e      	add	r7, sp, #56	; 0x38
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	607a      	str	r2, [r7, #4]
	myTxData_OK("OK\r\n"),
	myTxData_Battery("50\r\n"), //initial battery life is 50%
	myTxData_Distance("50\r\n"), //initial distance is 50mm
	uart(uart),
	pwm(pwm)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2200      	movs	r2, #0
 80037c0:	701a      	strb	r2, [r3, #0]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	4a23      	ldr	r2, [pc, #140]	; (8003854 <_ZN13HighLevelCommC1ER20__UART_HandleTypeDefR17TIM_HandleTypeDef+0xa4>)
 80037c6:	330a      	adds	r3, #10
 80037c8:	6810      	ldr	r0, [r2, #0]
 80037ca:	6018      	str	r0, [r3, #0]
 80037cc:	7912      	ldrb	r2, [r2, #4]
 80037ce:	711a      	strb	r2, [r3, #4]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	4921      	ldr	r1, [pc, #132]	; (8003858 <_ZN13HighLevelCommC1ER20__UART_HandleTypeDefR17TIM_HandleTypeDef+0xa8>)
 80037d4:	f103 020f 	add.w	r2, r3, #15
 80037d8:	6808      	ldr	r0, [r1, #0]
 80037da:	6010      	str	r0, [r2, #0]
 80037dc:	7909      	ldrb	r1, [r1, #4]
 80037de:	7111      	strb	r1, [r2, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	751a      	strb	r2, [r3, #20]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	491c      	ldr	r1, [pc, #112]	; (8003858 <_ZN13HighLevelCommC1ER20__UART_HandleTypeDefR17TIM_HandleTypeDef+0xa8>)
 80037e8:	f103 0215 	add.w	r2, r3, #21
 80037ec:	6808      	ldr	r0, [r1, #0]
 80037ee:	6010      	str	r0, [r2, #0]
 80037f0:	7909      	ldrb	r1, [r1, #4]
 80037f2:	7111      	strb	r1, [r2, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	769a      	strb	r2, [r3, #26]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f103 0c1c 	add.w	ip, r3, #28
 80037fe:	68be      	ldr	r6, [r7, #8]
 8003800:	466d      	mov	r5, sp
 8003802:	f106 040c 	add.w	r4, r6, #12
 8003806:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003808:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800380a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800380c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800380e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003810:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003812:	6823      	ldr	r3, [r4, #0]
 8003814:	602b      	str	r3, [r5, #0]
 8003816:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800381a:	4660      	mov	r0, ip
 800381c:	f7ff ff6a 	bl	80036f4 <_ZN13ClassUartTestC1E20__UART_HandleTypeDef>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f103 0c5c 	add.w	ip, r3, #92	; 0x5c
 8003826:	687e      	ldr	r6, [r7, #4]
 8003828:	466d      	mov	r5, sp
 800382a:	f106 040c 	add.w	r4, r6, #12
 800382e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003830:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003832:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003834:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003836:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003838:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800383a:	6823      	ldr	r3, [r4, #0]
 800383c:	602b      	str	r3, [r5, #0]
 800383e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8003842:	4660      	mov	r0, ip
 8003844:	f000 f98a 	bl	8003b5c <_ZN3PWMC1E17TIM_HandleTypeDef>
{
}
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	4618      	mov	r0, r3
 800384c:	3714      	adds	r7, #20
 800384e:	46bd      	mov	sp, r7
 8003850:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003852:	bf00      	nop
 8003854:	08004770 	.word	0x08004770
 8003858:	08004778 	.word	0x08004778

0800385c <_ZN13HighLevelComm14ReceiveMessageEh>:
bool HighLevelComm::ReceiveMessage(uint8_t myRxData_9bits)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	460b      	mov	r3, r1
 8003866:	70fb      	strb	r3, [r7, #3]
	if (uart.receiveMessage(&myRxData_9bits, sizeof(myRxData_9bits), 100) == true)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f103 001c 	add.w	r0, r3, #28
 800386e:	1cf9      	adds	r1, r7, #3
 8003870:	2364      	movs	r3, #100	; 0x64
 8003872:	2201      	movs	r2, #1
 8003874:	f7ff ff83 	bl	800377e <_ZN13ClassUartTest14receiveMessageEPhtm>
 8003878:	4603      	mov	r3, r0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d009      	beq.n	8003892 <_ZN13HighLevelComm14ReceiveMessageEh+0x36>
	{
		HAL_Delay(100);
 800387e:	2064      	movs	r0, #100	; 0x64
 8003880:	f7fc febc 	bl	80005fc <HAL_Delay>
		QueueTest.Buffer_Write(myRxData_9bits);
 8003884:	78fb      	ldrb	r3, [r7, #3]
 8003886:	4619      	mov	r1, r3
 8003888:	4804      	ldr	r0, [pc, #16]	; (800389c <_ZN13HighLevelComm14ReceiveMessageEh+0x40>)
 800388a:	f000 fab3 	bl	8003df4 <_ZN5Queue12Buffer_WriteEh>
		return true;
 800388e:	2301      	movs	r3, #1
 8003890:	e000      	b.n	8003894 <_ZN13HighLevelComm14ReceiveMessageEh+0x38>
	}else
		return false;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	3708      	adds	r7, #8
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	200005c4 	.word	0x200005c4

080038a0 <_ZN13HighLevelComm4MoveEi>:
bool HighLevelComm::Move(int x)  //x means moving at x millimeter/second.
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
		if (strcmp((const char*)(QueueTest.Buffer_Read(&itemread)), "Move\n")) {	//"Move\n" means move forward
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	331b      	adds	r3, #27
 80038ae:	4619      	mov	r1, r3
 80038b0:	481f      	ldr	r0, [pc, #124]	; (8003930 <_ZN13HighLevelComm4MoveEi+0x90>)
 80038b2:	f000 fae7 	bl	8003e84 <_ZN5Queue11Buffer_ReadEPh>
 80038b6:	4603      	mov	r3, r0
 80038b8:	491e      	ldr	r1, [pc, #120]	; (8003934 <_ZN13HighLevelComm4MoveEi+0x94>)
 80038ba:	4618      	mov	r0, r3
 80038bc:	f7fc fca2 	bl	8000204 <strcmp>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	bf14      	ite	ne
 80038c6:	2301      	movne	r3, #1
 80038c8:	2300      	moveq	r3, #0
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d02a      	beq.n	8003926 <_ZN13HighLevelComm4MoveEi+0x86>
			HAL_Delay(1000);
 80038d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80038d4:	f7fc fe92 	bl	80005fc <HAL_Delay>
			if (pwm.setPWM(x/MaxSpeed)) {
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	4a15      	ldr	r2, [pc, #84]	; (8003938 <_ZN13HighLevelComm4MoveEi+0x98>)
 80038e2:	fb82 1203 	smull	r1, r2, r2, r3
 80038e6:	1152      	asrs	r2, r2, #5
 80038e8:	17db      	asrs	r3, r3, #31
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	4619      	mov	r1, r3
 80038f0:	f000 fa3a 	bl	8003d68 <_ZN3PWM6setPWMEh>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d013      	beq.n	8003922 <_ZN13HighLevelComm4MoveEi+0x82>
				isRun = true;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2201      	movs	r2, #1
 80038fe:	701a      	strb	r2, [r3, #0]
				if (uart.sendMessage(myTxData_OK, sizeof(myTxData_OK), 100)== true) {
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f103 001c 	add.w	r0, r3, #28
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f103 010a 	add.w	r1, r3, #10
 800390c:	2364      	movs	r3, #100	; 0x64
 800390e:	2205      	movs	r2, #5
 8003910:	f7ff ff1d 	bl	800374e <_ZN13ClassUartTest11sendMessageEPhtm>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d001      	beq.n	800391e <_ZN13HighLevelComm4MoveEi+0x7e>
					return true;
 800391a:	2301      	movs	r3, #1
 800391c:	e004      	b.n	8003928 <_ZN13HighLevelComm4MoveEi+0x88>
				}else
					return false;
 800391e:	2300      	movs	r3, #0
 8003920:	e002      	b.n	8003928 <_ZN13HighLevelComm4MoveEi+0x88>
			}else
				return false;
 8003922:	2300      	movs	r3, #0
 8003924:	e000      	b.n	8003928 <_ZN13HighLevelComm4MoveEi+0x88>
		}else
			return false;
 8003926:	2300      	movs	r3, #0
}
 8003928:	4618      	mov	r0, r3
 800392a:	3708      	adds	r7, #8
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	200005c4 	.word	0x200005c4
 8003934:	08004780 	.word	0x08004780
 8003938:	51eb851f 	.word	0x51eb851f

0800393c <_ZN13HighLevelComm4StopEv>:

bool HighLevelComm::Stop()
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]

		if (strcmp((const char*)(QueueTest.Buffer_Read(&itemread)), "Stop\n") && isRun==true) {	//"Stop\n"
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	331b      	adds	r3, #27
 8003948:	4619      	mov	r1, r3
 800394a:	481e      	ldr	r0, [pc, #120]	; (80039c4 <_ZN13HighLevelComm4StopEv+0x88>)
 800394c:	f000 fa9a 	bl	8003e84 <_ZN5Queue11Buffer_ReadEPh>
 8003950:	4603      	mov	r3, r0
 8003952:	491d      	ldr	r1, [pc, #116]	; (80039c8 <_ZN13HighLevelComm4StopEv+0x8c>)
 8003954:	4618      	mov	r0, r3
 8003956:	f7fc fc55 	bl	8000204 <strcmp>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d005      	beq.n	800396c <_ZN13HighLevelComm4StopEv+0x30>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d001      	beq.n	800396c <_ZN13HighLevelComm4StopEv+0x30>
 8003968:	2301      	movs	r3, #1
 800396a:	e000      	b.n	800396e <_ZN13HighLevelComm4StopEv+0x32>
 800396c:	2300      	movs	r3, #0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d022      	beq.n	80039b8 <_ZN13HighLevelComm4StopEv+0x7c>
			HAL_Delay(1000);
 8003972:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003976:	f7fc fe41 	bl	80005fc <HAL_Delay>
			if (pwm.setPWM(0)) {
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	335c      	adds	r3, #92	; 0x5c
 800397e:	2100      	movs	r1, #0
 8003980:	4618      	mov	r0, r3
 8003982:	f000 f9f1 	bl	8003d68 <_ZN3PWM6setPWMEh>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d013      	beq.n	80039b4 <_ZN13HighLevelComm4StopEv+0x78>
				isRun=false;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	701a      	strb	r2, [r3, #0]
				//HAL_Delay(1000);
				if (uart.sendMessage(myTxData_OK, sizeof(myTxData_OK), 100)== true) {
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f103 001c 	add.w	r0, r3, #28
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f103 010a 	add.w	r1, r3, #10
 800399e:	2364      	movs	r3, #100	; 0x64
 80039a0:	2205      	movs	r2, #5
 80039a2:	f7ff fed4 	bl	800374e <_ZN13ClassUartTest11sendMessageEPhtm>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d001      	beq.n	80039b0 <_ZN13HighLevelComm4StopEv+0x74>

					return true;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e004      	b.n	80039ba <_ZN13HighLevelComm4StopEv+0x7e>

				}else
					return false;
 80039b0:	2300      	movs	r3, #0
 80039b2:	e002      	b.n	80039ba <_ZN13HighLevelComm4StopEv+0x7e>

			}else
				return false;
 80039b4:	2300      	movs	r3, #0
 80039b6:	e000      	b.n	80039ba <_ZN13HighLevelComm4StopEv+0x7e>
		}else
			return false;
 80039b8:	2300      	movs	r3, #0

}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3708      	adds	r7, #8
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	200005c4 	.word	0x200005c4
 80039c8:	08004788 	.word	0x08004788

080039cc <_ZN13HighLevelComm4TurnEi>:

bool HighLevelComm::Turn(int x) //'x' means the angle of the steering system from -180 degrees to 180 degrees
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
		if (strcmp((const char*)(QueueTest.Buffer_Read(&itemread)), "Turn\n") && isRun ==true) {	//"Turn\n"
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	331b      	adds	r3, #27
 80039da:	4619      	mov	r1, r3
 80039dc:	4816      	ldr	r0, [pc, #88]	; (8003a38 <_ZN13HighLevelComm4TurnEi+0x6c>)
 80039de:	f000 fa51 	bl	8003e84 <_ZN5Queue11Buffer_ReadEPh>
 80039e2:	4603      	mov	r3, r0
 80039e4:	4915      	ldr	r1, [pc, #84]	; (8003a3c <_ZN13HighLevelComm4TurnEi+0x70>)
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7fc fc0c 	bl	8000204 <strcmp>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d005      	beq.n	80039fe <_ZN13HighLevelComm4TurnEi+0x32>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d001      	beq.n	80039fe <_ZN13HighLevelComm4TurnEi+0x32>
 80039fa:	2301      	movs	r3, #1
 80039fc:	e000      	b.n	8003a00 <_ZN13HighLevelComm4TurnEi+0x34>
 80039fe:	2300      	movs	r3, #0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d014      	beq.n	8003a2e <_ZN13HighLevelComm4TurnEi+0x62>
			HAL_Delay(1000);
 8003a04:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003a08:	f7fc fdf8 	bl	80005fc <HAL_Delay>
			//if (setSteering(x)) {//finish the turning
				if (uart.sendMessage(myTxData_OK, sizeof(myTxData_OK), 100)== true) {
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f103 001c 	add.w	r0, r3, #28
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f103 010a 	add.w	r1, r3, #10
 8003a18:	2364      	movs	r3, #100	; 0x64
 8003a1a:	2205      	movs	r2, #5
 8003a1c:	f7ff fe97 	bl	800374e <_ZN13ClassUartTest11sendMessageEPhtm>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d001      	beq.n	8003a2a <_ZN13HighLevelComm4TurnEi+0x5e>
					return true;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e002      	b.n	8003a30 <_ZN13HighLevelComm4TurnEi+0x64>
				}else
					return false;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	e000      	b.n	8003a30 <_ZN13HighLevelComm4TurnEi+0x64>
			//}else
				//return false;
		}else
			return false;
 8003a2e:	2300      	movs	r3, #0

}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3708      	adds	r7, #8
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	200005c4 	.word	0x200005c4
 8003a3c:	08004790 	.word	0x08004790

08003a40 <_ZN13HighLevelComm11showBatteryEv>:

bool HighLevelComm::showBattery()
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
		if (strcmp((const char*)(QueueTest.Buffer_Read(&itemread)), "Battery\n")) { //"Battery\n" means getting the battery life information
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	331b      	adds	r3, #27
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	4815      	ldr	r0, [pc, #84]	; (8003aa4 <_ZN13HighLevelComm11showBatteryEv+0x64>)
 8003a50:	f000 fa18 	bl	8003e84 <_ZN5Queue11Buffer_ReadEPh>
 8003a54:	4603      	mov	r3, r0
 8003a56:	4914      	ldr	r1, [pc, #80]	; (8003aa8 <_ZN13HighLevelComm11showBatteryEv+0x68>)
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f7fc fbd3 	bl	8000204 <strcmp>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	bf14      	ite	ne
 8003a64:	2301      	movne	r3, #1
 8003a66:	2300      	moveq	r3, #0
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d014      	beq.n	8003a98 <_ZN13HighLevelComm11showBatteryEv+0x58>
			HAL_Delay(1000);
 8003a6e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003a72:	f7fc fdc3 	bl	80005fc <HAL_Delay>
			if (uart.sendMessage(myTxData_Battery, sizeof(myTxData_Battery), 100) == true) {
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f103 001c 	add.w	r0, r3, #28
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f103 010f 	add.w	r1, r3, #15
 8003a82:	2364      	movs	r3, #100	; 0x64
 8003a84:	2206      	movs	r2, #6
 8003a86:	f7ff fe62 	bl	800374e <_ZN13ClassUartTest11sendMessageEPhtm>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d001      	beq.n	8003a94 <_ZN13HighLevelComm11showBatteryEv+0x54>
				//myTxData_Battery saves the data from the battery sensor about its battery life.
				return true;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e002      	b.n	8003a9a <_ZN13HighLevelComm11showBatteryEv+0x5a>
			}else
				return false;
 8003a94:	2300      	movs	r3, #0
 8003a96:	e000      	b.n	8003a9a <_ZN13HighLevelComm11showBatteryEv+0x5a>

		}else
			return false;
 8003a98:	2300      	movs	r3, #0

}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3708      	adds	r7, #8
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	200005c4 	.word	0x200005c4
 8003aa8:	08004798 	.word	0x08004798

08003aac <_ZN13HighLevelComm12showDistanceEv>:

bool HighLevelComm::showDistance()
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
		if (strcmp((const char*)(QueueTest.Buffer_Read(&itemread)), "Distance\n") && isRun==true) {//"Distance\n" means getting the distance of the nearest obstacle information
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	331b      	adds	r3, #27
 8003ab8:	4619      	mov	r1, r3
 8003aba:	4817      	ldr	r0, [pc, #92]	; (8003b18 <_ZN13HighLevelComm12showDistanceEv+0x6c>)
 8003abc:	f000 f9e2 	bl	8003e84 <_ZN5Queue11Buffer_ReadEPh>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	4916      	ldr	r1, [pc, #88]	; (8003b1c <_ZN13HighLevelComm12showDistanceEv+0x70>)
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f7fc fb9d 	bl	8000204 <strcmp>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d005      	beq.n	8003adc <_ZN13HighLevelComm12showDistanceEv+0x30>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d001      	beq.n	8003adc <_ZN13HighLevelComm12showDistanceEv+0x30>
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e000      	b.n	8003ade <_ZN13HighLevelComm12showDistanceEv+0x32>
 8003adc:	2300      	movs	r3, #0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d014      	beq.n	8003b0c <_ZN13HighLevelComm12showDistanceEv+0x60>
			HAL_Delay(1000);
 8003ae2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003ae6:	f7fc fd89 	bl	80005fc <HAL_Delay>
			if (uart.sendMessage(myTxData_Distance, sizeof(myTxData_Distance), 100) == true) {
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f103 001c 	add.w	r0, r3, #28
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f103 0115 	add.w	r1, r3, #21
 8003af6:	2364      	movs	r3, #100	; 0x64
 8003af8:	2206      	movs	r2, #6
 8003afa:	f7ff fe28 	bl	800374e <_ZN13ClassUartTest11sendMessageEPhtm>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d001      	beq.n	8003b08 <_ZN13HighLevelComm12showDistanceEv+0x5c>
				//HAL_Delay(1000);
				//myTxData_Distance saves the data from the distance sensor.
				return true;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e002      	b.n	8003b0e <_ZN13HighLevelComm12showDistanceEv+0x62>
			}else
				return false;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	e000      	b.n	8003b0e <_ZN13HighLevelComm12showDistanceEv+0x62>

		}else
			return false;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3708      	adds	r7, #8
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	200005c4 	.word	0x200005c4
 8003b1c:	080047a4 	.word	0x080047a4

08003b20 <_Z41__static_initialization_and_destruction_0ii>:
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d107      	bne.n	8003b40 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d102      	bne.n	8003b40 <_Z41__static_initialization_and_destruction_0ii+0x20>
Queue QueueTest;
 8003b3a:	4803      	ldr	r0, [pc, #12]	; (8003b48 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8003b3c:	f000 f92f 	bl	8003d9e <_ZN5QueueC1Ev>
}
 8003b40:	bf00      	nop
 8003b42:	3708      	adds	r7, #8
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	200005c4 	.word	0x200005c4

08003b4c <_GLOBAL__sub_I_QueueTest>:
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003b54:	2001      	movs	r0, #1
 8003b56:	f7ff ffe3 	bl	8003b20 <_Z41__static_initialization_and_destruction_0ii>
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <_ZN3PWMC1E17TIM_HandleTypeDef>:
#include "stm32f4xx.h"
#include "stm32f4xx_hal.h"
#include "gpio.h"
#include "stdint.h"

PWM::PWM(TIM_HandleTypeDef h) :
 8003b5c:	b084      	sub	sp, #16
 8003b5e:	b5b0      	push	{r4, r5, r7, lr}
 8003b60:	b096      	sub	sp, #88	; 0x58
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
 8003b66:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8003b6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	htim(h)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	461d      	mov	r5, r3
 8003b72:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 8003b76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b82:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003b86:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
{
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b8a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003b8e:	2200      	movs	r2, #0
 8003b90:	601a      	str	r2, [r3, #0]
 8003b92:	605a      	str	r2, [r3, #4]
 8003b94:	609a      	str	r2, [r3, #8]
 8003b96:	60da      	str	r2, [r3, #12]
 8003b98:	611a      	str	r2, [r3, #16]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b9a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	601a      	str	r2, [r3, #0]
 8003ba2:	605a      	str	r2, [r3, #4]
 8003ba4:	609a      	str	r2, [r3, #8]
 8003ba6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ba8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003bac:	2200      	movs	r2, #0
 8003bae:	601a      	str	r2, [r3, #0]
 8003bb0:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8003bb2:	f107 0310 	add.w	r3, r7, #16
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	601a      	str	r2, [r3, #0]
 8003bba:	605a      	str	r2, [r3, #4]
 8003bbc:	609a      	str	r2, [r3, #8]
 8003bbe:	60da      	str	r2, [r3, #12]
 8003bc0:	611a      	str	r2, [r3, #16]
 8003bc2:	615a      	str	r2, [r3, #20]
 8003bc4:	619a      	str	r2, [r3, #24]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	60fb      	str	r3, [r7, #12]
 8003bca:	4b65      	ldr	r3, [pc, #404]	; (8003d60 <_ZN3PWMC1E17TIM_HandleTypeDef+0x204>)
 8003bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bce:	4a64      	ldr	r2, [pc, #400]	; (8003d60 <_ZN3PWMC1E17TIM_HandleTypeDef+0x204>)
 8003bd0:	f043 0301 	orr.w	r3, r3, #1
 8003bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8003bd6:	4b62      	ldr	r3, [pc, #392]	; (8003d60 <_ZN3PWMC1E17TIM_HandleTypeDef+0x204>)
 8003bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bda:	f003 0301 	and.w	r3, r3, #1
 8003bde:	60fb      	str	r3, [r7, #12]
 8003be0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_TIM2_CLK_ENABLE();
 8003be2:	2300      	movs	r3, #0
 8003be4:	60bb      	str	r3, [r7, #8]
 8003be6:	4b5e      	ldr	r3, [pc, #376]	; (8003d60 <_ZN3PWMC1E17TIM_HandleTypeDef+0x204>)
 8003be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bea:	4a5d      	ldr	r2, [pc, #372]	; (8003d60 <_ZN3PWMC1E17TIM_HandleTypeDef+0x204>)
 8003bec:	f043 0301 	orr.w	r3, r3, #1
 8003bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8003bf2:	4b5b      	ldr	r3, [pc, #364]	; (8003d60 <_ZN3PWMC1E17TIM_HandleTypeDef+0x204>)
 8003bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf6:	f003 0301 	and.w	r3, r3, #1
 8003bfa:	60bb      	str	r3, [r7, #8]
 8003bfc:	68bb      	ldr	r3, [r7, #8]

	// PA5 -> TIM2_CH1
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003bfe:	2320      	movs	r3, #32
 8003c00:	647b      	str	r3, [r7, #68]	; 0x44
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c02:	2302      	movs	r3, #2
 8003c04:	64bb      	str	r3, [r7, #72]	; 0x48
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c06:	2300      	movs	r3, #0
 8003c08:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	657b      	str	r3, [r7, #84]	; 0x54
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c12:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003c16:	4619      	mov	r1, r3
 8003c18:	4852      	ldr	r0, [pc, #328]	; (8003d64 <_ZN3PWMC1E17TIM_HandleTypeDef+0x208>)
 8003c1a:	f7fd f92d 	bl	8000e78 <HAL_GPIO_Init>

	if (HAL_TIM_Base_DeInit(&htim) != HAL_OK)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7fe f814 	bl	8001c4e <HAL_TIM_Base_DeInit>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	bf14      	ite	ne
 8003c2c:	2301      	movne	r3, #1
 8003c2e:	2300      	moveq	r3, #0
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d001      	beq.n	8003c3a <_ZN3PWMC1E17TIM_HandleTypeDef+0xde>
	{
		Error_Handler();
 8003c36:	f000 fad5 	bl	80041e4 <Error_Handler>
	}

	htim.Instance = TIM2;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003c40:	601a      	str	r2, [r3, #0]
	htim.Init.Prescaler = 84;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2254      	movs	r2, #84	; 0x54
 8003c46:	605a      	str	r2, [r3, #4]
	htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	609a      	str	r2, [r3, #8]
	htim.Init.Period = 1000;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003c54:	60da      	str	r2, [r3, #12]
	htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	611a      	str	r2, [r3, #16]
	htim.Init.RepetitionCounter = 0;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	615a      	str	r2, [r3, #20]
	htim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim) != HAL_OK)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f7fd ffc4 	bl	8001bf8 <HAL_TIM_Base_Init>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	bf14      	ite	ne
 8003c76:	2301      	movne	r3, #1
 8003c78:	2300      	moveq	r3, #0
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d001      	beq.n	8003c84 <_ZN3PWMC1E17TIM_HandleTypeDef+0x128>
	{
		Error_Handler();
 8003c80:	f000 fab0 	bl	80041e4 <Error_Handler>
	}

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c88:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_TIM_ConfigClockSource(&htim, &sClockSourceConfig) != HAL_OK)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003c90:	4611      	mov	r1, r2
 8003c92:	4618      	mov	r0, r3
 8003c94:	f7fe f958 	bl	8001f48 <HAL_TIM_ConfigClockSource>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	bf14      	ite	ne
 8003c9e:	2301      	movne	r3, #1
 8003ca0:	2300      	moveq	r3, #0
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d001      	beq.n	8003cac <_ZN3PWMC1E17TIM_HandleTypeDef+0x150>
	{
		Error_Handler();
 8003ca8:	f000 fa9c 	bl	80041e4 <Error_Handler>
	}

	if (HAL_TIM_PWM_Init(&htim) != HAL_OK)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f7fe f811 	bl	8001cd6 <HAL_TIM_PWM_Init>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	bf14      	ite	ne
 8003cba:	2301      	movne	r3, #1
 8003cbc:	2300      	moveq	r3, #0
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d001      	beq.n	8003cc8 <_ZN3PWMC1E17TIM_HandleTypeDef+0x16c>
	{
		Error_Handler();
 8003cc4:	f000 fa8e 	bl	80041e4 <Error_Handler>
	}

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	62fb      	str	r3, [r7, #44]	; 0x2c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_TIMEx_MasterConfigSynchronization(&htim, &sMasterConfig) != HAL_OK)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8003cd6:	4611      	mov	r1, r2
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f7fe fcfd 	bl	80026d8 <HAL_TIMEx_MasterConfigSynchronization>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	bf14      	ite	ne
 8003ce4:	2301      	movne	r3, #1
 8003ce6:	2300      	moveq	r3, #0
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d001      	beq.n	8003cf2 <_ZN3PWMC1E17TIM_HandleTypeDef+0x196>
	{
		Error_Handler();
 8003cee:	f000 fa79 	bl	80041e4 <Error_Handler>
	}

	//TODO: Initialize the PWM channel using HAL_TIM_PWM_ConfigChannel function and the variable sConfigOC.
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003cf2:	2360      	movs	r3, #96	; 0x60
 8003cf4:	613b      	str	r3, [r7, #16]
	sConfigOC.Pulse = 500;
 8003cf6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003cfa:	617b      	str	r3, [r7, #20]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	61bb      	str	r3, [r7, #24]
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003d00:	2300      	movs	r3, #0
 8003d02:	61fb      	str	r3, [r7, #28]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003d04:	2300      	movs	r3, #0
 8003d06:	623b      	str	r3, [r7, #32]
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	62bb      	str	r3, [r7, #40]	; 0x28
	if(HAL_TIM_PWM_ConfigChannel(&htim, &sConfigOC, TIM_CHANNEL_1)!=HAL_OK)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f107 0110 	add.w	r1, r7, #16
 8003d16:	2200      	movs	r2, #0
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f7fe f84f 	bl	8001dbc <HAL_TIM_PWM_ConfigChannel>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	bf14      	ite	ne
 8003d24:	2301      	movne	r3, #1
 8003d26:	2300      	moveq	r3, #0
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d001      	beq.n	8003d32 <_ZN3PWMC1E17TIM_HandleTypeDef+0x1d6>
	{
		Error_Handler();
 8003d2e:	f000 fa59 	bl	80041e4 <Error_Handler>
	}

	if (HAL_TIM_PWM_Start(&htim, TIM_CHANNEL_1)!=HAL_OK)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2100      	movs	r1, #0
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7fe f802 	bl	8001d40 <HAL_TIM_PWM_Start>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	bf14      	ite	ne
 8003d42:	2301      	movne	r3, #1
 8003d44:	2300      	moveq	r3, #0
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d001      	beq.n	8003d50 <_ZN3PWMC1E17TIM_HandleTypeDef+0x1f4>
	{
		Error_Handler();
 8003d4c:	f000 fa4a 	bl	80041e4 <Error_Handler>
	}
}
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4618      	mov	r0, r3
 8003d54:	3758      	adds	r7, #88	; 0x58
 8003d56:	46bd      	mov	sp, r7
 8003d58:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8003d5c:	b004      	add	sp, #16
 8003d5e:	4770      	bx	lr
 8003d60:	40023800 	.word	0x40023800
 8003d64:	40020000 	.word	0x40020000

08003d68 <_ZN3PWM6setPWMEh>:

bool PWM::setPWM(uint8_t percent)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	460b      	mov	r3, r1
 8003d72:	70fb      	strb	r3, [r7, #3]
	//TODO: Implement this task using a HAL function
	//TIM2->CCR1 = percent;
	if(percent>=0 && percent<=100)	//TODO-AKOS: How can be variable percent negative? I ask it, because of your code "percent>= 0".
 8003d74:	78fb      	ldrb	r3, [r7, #3]
 8003d76:	2b64      	cmp	r3, #100	; 0x64
 8003d78:	d80a      	bhi.n	8003d90 <_ZN3PWM6setPWMEh+0x28>
	{
		__HAL_TIM_SET_COMPARE(&htim,TIM_CHANNEL_1, percent*10);
 8003d7a:	78fa      	ldrb	r2, [r7, #3]
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	4413      	add	r3, r2
 8003d82:	005b      	lsls	r3, r3, #1
 8003d84:	461a      	mov	r2, r3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	635a      	str	r2, [r3, #52]	; 0x34
		return true;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e000      	b.n	8003d92 <_ZN3PWM6setPWMEh+0x2a>
	}else
	{
		return false;
 8003d90:	2300      	movs	r3, #0
	}
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	370c      	adds	r7, #12
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr

08003d9e <_ZN5QueueC1Ev>:
#include "stm32f4xx_hal.h"
#include "string.h"
#include "Queue.h"
#include "cstdlib"
Queue::Queue()
 8003d9e:	b480      	push	{r7}
 8003da0:	b083      	sub	sp, #12
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	701a      	strb	r2, [r3, #0]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	705a      	strb	r2, [r3, #1]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	709a      	strb	r2, [r3, #2]
{
}
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	370c      	adds	r7, #12
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr

08003dc6 <_ZN5Queue14IsBuffer_EmptyEv>:
{
	return full;

}
bool Queue::IsBuffer_Empty()
{
 8003dc6:	b480      	push	{r7}
 8003dc8:	b083      	sub	sp, #12
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
	if((head==tail)&&(full==false))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	781a      	ldrb	r2, [r3, #0]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	785b      	ldrb	r3, [r3, #1]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d105      	bne.n	8003de6 <_ZN5Queue14IsBuffer_EmptyEv+0x20>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	789b      	ldrb	r3, [r3, #2]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d101      	bne.n	8003de6 <_ZN5Queue14IsBuffer_EmptyEv+0x20>
		return true;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e000      	b.n	8003de8 <_ZN5Queue14IsBuffer_EmptyEv+0x22>
	else
		return false;
 8003de6:	2300      	movs	r3, #0
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	370c      	adds	r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <_ZN5Queue12Buffer_WriteEh>:
bool Queue::Buffer_Write(uint8_t item)//overwrite the oldest value
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	70fb      	strb	r3, [r7, #3]
	buffer[head]=item;//left is a pointer, right is a value
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	461a      	mov	r2, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4413      	add	r3, r2
 8003e0a:	78fa      	ldrb	r2, [r7, #3]
 8003e0c:	70da      	strb	r2, [r3, #3]
	if(full==true)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	789b      	ldrb	r3, [r3, #2]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d00f      	beq.n	8003e36 <_ZN5Queue12Buffer_WriteEh+0x42>
	{
		tail=(tail+1) % QUEUE_MAX_SIZE;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	785b      	ldrb	r3, [r3, #1]
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	4a18      	ldr	r2, [pc, #96]	; (8003e80 <_ZN5Queue12Buffer_WriteEh+0x8c>)
 8003e1e:	fb82 1203 	smull	r1, r2, r2, r3
 8003e22:	1151      	asrs	r1, r2, #5
 8003e24:	17da      	asrs	r2, r3, #31
 8003e26:	1a8a      	subs	r2, r1, r2
 8003e28:	2164      	movs	r1, #100	; 0x64
 8003e2a:	fb01 f202 	mul.w	r2, r1, r2
 8003e2e:	1a9a      	subs	r2, r3, r2
 8003e30:	b2d2      	uxtb	r2, r2
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	705a      	strb	r2, [r3, #1]
	}
	head=(head+1)%QUEUE_MAX_SIZE;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	4a10      	ldr	r2, [pc, #64]	; (8003e80 <_ZN5Queue12Buffer_WriteEh+0x8c>)
 8003e3e:	fb82 1203 	smull	r1, r2, r2, r3
 8003e42:	1151      	asrs	r1, r2, #5
 8003e44:	17da      	asrs	r2, r3, #31
 8003e46:	1a8a      	subs	r2, r1, r2
 8003e48:	2164      	movs	r1, #100	; 0x64
 8003e4a:	fb01 f202 	mul.w	r2, r1, r2
 8003e4e:	1a9a      	subs	r2, r3, r2
 8003e50:	b2d2      	uxtb	r2, r2
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	701a      	strb	r2, [r3, #0]
	if (head==tail)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	781a      	ldrb	r2, [r3, #0]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	785b      	ldrb	r3, [r3, #1]
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d103      	bne.n	8003e6a <_ZN5Queue12Buffer_WriteEh+0x76>
			full=true;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2201      	movs	r2, #1
 8003e66:	709a      	strb	r2, [r3, #2]
 8003e68:	e002      	b.n	8003e70 <_ZN5Queue12Buffer_WriteEh+0x7c>
	else
			full=false;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	709a      	strb	r2, [r3, #2]
	return true;
 8003e70:	2301      	movs	r3, #1

}
 8003e72:	4618      	mov	r0, r3
 8003e74:	370c      	adds	r7, #12
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	51eb851f 	.word	0x51eb851f

08003e84 <_ZN5Queue11Buffer_ReadEPh>:
bool Queue::Buffer_Read(uint8_t* item)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b082      	sub	sp, #8
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]

	if(IsBuffer_Empty())
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f7ff ff99 	bl	8003dc6 <_ZN5Queue14IsBuffer_EmptyEv>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d001      	beq.n	8003e9e <_ZN5Queue11Buffer_ReadEPh+0x1a>
	{
		return false;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	e01b      	b.n	8003ed6 <_ZN5Queue11Buffer_ReadEPh+0x52>
	}

	*(item) =buffer[tail];//read the data and move the value in the tail;left is a pointer, right is a value
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	785b      	ldrb	r3, [r3, #1]
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	440a      	add	r2, r1
 8003eaa:	78d2      	ldrb	r2, [r2, #3]
 8003eac:	701a      	strb	r2, [r3, #0]
	full=false;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	709a      	strb	r2, [r3, #2]
	tail=(tail+1) % QUEUE_MAX_SIZE;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	785b      	ldrb	r3, [r3, #1]
 8003eb8:	3301      	adds	r3, #1
 8003eba:	4a09      	ldr	r2, [pc, #36]	; (8003ee0 <_ZN5Queue11Buffer_ReadEPh+0x5c>)
 8003ebc:	fb82 1203 	smull	r1, r2, r2, r3
 8003ec0:	1151      	asrs	r1, r2, #5
 8003ec2:	17da      	asrs	r2, r3, #31
 8003ec4:	1a8a      	subs	r2, r1, r2
 8003ec6:	2164      	movs	r1, #100	; 0x64
 8003ec8:	fb01 f202 	mul.w	r2, r1, r2
 8003ecc:	1a9a      	subs	r2, r3, r2
 8003ece:	b2d2      	uxtb	r2, r2
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	705a      	strb	r2, [r3, #1]
	return true;
 8003ed4:	2301      	movs	r3, #1

}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3708      	adds	r7, #8
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	51eb851f 	.word	0x51eb851f

08003ee4 <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b0ae      	sub	sp, #184	; 0xb8
 8003ee8:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003eea:	f7fc fb15 	bl	8000518 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003eee:	f000 f893 	bl	8004018 <_Z18SystemClock_Configv>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */

  MX_GPIO_Init();
 8003ef2:	f000 f909 	bl	8004108 <_Z12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8003ef6:	f000 f9f9 	bl	80042ec <MX_USART2_UART_Init>
  //MX_DMA_Init();
  //MX_SPI1_Init();
  //MX_TIM2_Init();
  //HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);

  HighLevelComm HighLevelCommTest(huart2, htim2);
 8003efa:	463b      	mov	r3, r7
 8003efc:	4a3f      	ldr	r2, [pc, #252]	; (8003ffc <main+0x118>)
 8003efe:	4940      	ldr	r1, [pc, #256]	; (8004000 <main+0x11c>)
 8003f00:	4618      	mov	r0, r3
 8003f02:	f7ff fc55 	bl	80037b0 <_ZN13HighLevelCommC1ER20__UART_HandleTypeDefR17TIM_HandleTypeDef>
  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	/* USER CODE BEGIN 3 */

 const char * str1="Move\n";
 8003f06:	4b3f      	ldr	r3, [pc, #252]	; (8004004 <main+0x120>)
 8003f08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 const char * str2="Stop\n";
 8003f0c:	4b3e      	ldr	r3, [pc, #248]	; (8004008 <main+0x124>)
 8003f0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 const char * str3="Turn\n";
 8003f12:	4b3e      	ldr	r3, [pc, #248]	; (800400c <main+0x128>)
 8003f14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 const char * str4="Battery\n";
 8003f18:	4b3d      	ldr	r3, [pc, #244]	; (8004010 <main+0x12c>)
 8003f1a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 const char * str5="Distance\n";
 8003f1e:	4b3d      	ldr	r3, [pc, #244]	; (8004014 <main+0x130>)
 8003f20:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 uint8_t message1 = std::atoi(str1);
 8003f24:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8003f28:	f000 fab5 	bl	8004496 <atoi>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
 uint8_t message2 = std::atoi(str2);
 8003f32:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8003f36:	f000 faae 	bl	8004496 <atoi>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
 uint8_t message3 = std::atoi(str3);
 8003f40:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8003f44:	f000 faa7 	bl	8004496 <atoi>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
 uint8_t message4 = std::atoi(str4);
 8003f4e:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8003f52:	f000 faa0 	bl	8004496 <atoi>
 8003f56:	4603      	mov	r3, r0
 8003f58:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
 uint8_t message5 = std::atoi(str5);
 8003f5c:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8003f60:	f000 fa99 	bl	8004496 <atoi>
 8003f64:	4603      	mov	r3, r0
 8003f66:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	while (1)
	{
		/* USER CODE END WHILE */
		if(HighLevelCommTest.ReceiveMessage(message1)){HighLevelCommTest.Move(50);}
 8003f6a:	f897 20a3 	ldrb.w	r2, [r7, #163]	; 0xa3
 8003f6e:	463b      	mov	r3, r7
 8003f70:	4611      	mov	r1, r2
 8003f72:	4618      	mov	r0, r3
 8003f74:	f7ff fc72 	bl	800385c <_ZN13HighLevelComm14ReceiveMessageEh>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d004      	beq.n	8003f88 <main+0xa4>
 8003f7e:	463b      	mov	r3, r7
 8003f80:	2132      	movs	r1, #50	; 0x32
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7ff fc8c 	bl	80038a0 <_ZN13HighLevelComm4MoveEi>
		if(HighLevelCommTest.ReceiveMessage(message2)){HighLevelCommTest.Stop();}
 8003f88:	f897 20a2 	ldrb.w	r2, [r7, #162]	; 0xa2
 8003f8c:	463b      	mov	r3, r7
 8003f8e:	4611      	mov	r1, r2
 8003f90:	4618      	mov	r0, r3
 8003f92:	f7ff fc63 	bl	800385c <_ZN13HighLevelComm14ReceiveMessageEh>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d003      	beq.n	8003fa4 <main+0xc0>
 8003f9c:	463b      	mov	r3, r7
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f7ff fccc 	bl	800393c <_ZN13HighLevelComm4StopEv>
		if(HighLevelCommTest.ReceiveMessage(message3)){HighLevelCommTest.Turn(50);}
 8003fa4:	f897 20a1 	ldrb.w	r2, [r7, #161]	; 0xa1
 8003fa8:	463b      	mov	r3, r7
 8003faa:	4611      	mov	r1, r2
 8003fac:	4618      	mov	r0, r3
 8003fae:	f7ff fc55 	bl	800385c <_ZN13HighLevelComm14ReceiveMessageEh>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d004      	beq.n	8003fc2 <main+0xde>
 8003fb8:	463b      	mov	r3, r7
 8003fba:	2132      	movs	r1, #50	; 0x32
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f7ff fd05 	bl	80039cc <_ZN13HighLevelComm4TurnEi>
		if(HighLevelCommTest.ReceiveMessage(message4)){HighLevelCommTest.showBattery();}
 8003fc2:	f897 20a0 	ldrb.w	r2, [r7, #160]	; 0xa0
 8003fc6:	463b      	mov	r3, r7
 8003fc8:	4611      	mov	r1, r2
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f7ff fc46 	bl	800385c <_ZN13HighLevelComm14ReceiveMessageEh>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d003      	beq.n	8003fde <main+0xfa>
 8003fd6:	463b      	mov	r3, r7
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f7ff fd31 	bl	8003a40 <_ZN13HighLevelComm11showBatteryEv>
		if(HighLevelCommTest.ReceiveMessage(message5)){HighLevelCommTest.showDistance();}
 8003fde:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 8003fe2:	463b      	mov	r3, r7
 8003fe4:	4611      	mov	r1, r2
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f7ff fc38 	bl	800385c <_ZN13HighLevelComm14ReceiveMessageEh>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d0bb      	beq.n	8003f6a <main+0x86>
 8003ff2:	463b      	mov	r3, r7
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f7ff fd59 	bl	8003aac <_ZN13HighLevelComm12showDistanceEv>
		if(HighLevelCommTest.ReceiveMessage(message1)){HighLevelCommTest.Move(50);}
 8003ffa:	e7b6      	b.n	8003f6a <main+0x86>
 8003ffc:	2000066c 	.word	0x2000066c
 8004000:	2000062c 	.word	0x2000062c
 8004004:	080047b0 	.word	0x080047b0
 8004008:	080047b8 	.word	0x080047b8
 800400c:	080047c0 	.word	0x080047c0
 8004010:	080047c8 	.word	0x080047c8
 8004014:	080047d4 	.word	0x080047d4

08004018 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b094      	sub	sp, #80	; 0x50
 800401c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800401e:	f107 031c 	add.w	r3, r7, #28
 8004022:	2234      	movs	r2, #52	; 0x34
 8004024:	2100      	movs	r1, #0
 8004026:	4618      	mov	r0, r3
 8004028:	f000 fa5e 	bl	80044e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800402c:	f107 0308 	add.w	r3, r7, #8
 8004030:	2200      	movs	r2, #0
 8004032:	601a      	str	r2, [r3, #0]
 8004034:	605a      	str	r2, [r3, #4]
 8004036:	609a      	str	r2, [r3, #8]
 8004038:	60da      	str	r2, [r3, #12]
 800403a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800403c:	2300      	movs	r3, #0
 800403e:	607b      	str	r3, [r7, #4]
 8004040:	4b2f      	ldr	r3, [pc, #188]	; (8004100 <_Z18SystemClock_Configv+0xe8>)
 8004042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004044:	4a2e      	ldr	r2, [pc, #184]	; (8004100 <_Z18SystemClock_Configv+0xe8>)
 8004046:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800404a:	6413      	str	r3, [r2, #64]	; 0x40
 800404c:	4b2c      	ldr	r3, [pc, #176]	; (8004100 <_Z18SystemClock_Configv+0xe8>)
 800404e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004050:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004054:	607b      	str	r3, [r7, #4]
 8004056:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8004058:	2300      	movs	r3, #0
 800405a:	603b      	str	r3, [r7, #0]
 800405c:	4b29      	ldr	r3, [pc, #164]	; (8004104 <_Z18SystemClock_Configv+0xec>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004064:	4a27      	ldr	r2, [pc, #156]	; (8004104 <_Z18SystemClock_Configv+0xec>)
 8004066:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800406a:	6013      	str	r3, [r2, #0]
 800406c:	4b25      	ldr	r3, [pc, #148]	; (8004104 <_Z18SystemClock_Configv+0xec>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004074:	603b      	str	r3, [r7, #0]
 8004076:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004078:	2302      	movs	r3, #2
 800407a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800407c:	2301      	movs	r3, #1
 800407e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004080:	2310      	movs	r3, #16
 8004082:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004084:	2302      	movs	r3, #2
 8004086:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004088:	2300      	movs	r3, #0
 800408a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800408c:	2310      	movs	r3, #16
 800408e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8004090:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8004094:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8004096:	2304      	movs	r3, #4
 8004098:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800409a:	2302      	movs	r3, #2
 800409c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800409e:	2302      	movs	r3, #2
 80040a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80040a2:	f107 031c 	add.w	r3, r7, #28
 80040a6:	4618      	mov	r0, r3
 80040a8:	f7fd fb4c 	bl	8001744 <HAL_RCC_OscConfig>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	bf14      	ite	ne
 80040b2:	2301      	movne	r3, #1
 80040b4:	2300      	moveq	r3, #0
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d001      	beq.n	80040c0 <_Z18SystemClock_Configv+0xa8>
  {
    Error_Handler();
 80040bc:	f000 f892 	bl	80041e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80040c0:	230f      	movs	r3, #15
 80040c2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80040c4:	2302      	movs	r3, #2
 80040c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80040c8:	2300      	movs	r3, #0
 80040ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80040cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80040d2:	2300      	movs	r3, #0
 80040d4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80040d6:	f107 0308 	add.w	r3, r7, #8
 80040da:	2102      	movs	r1, #2
 80040dc:	4618      	mov	r0, r3
 80040de:	f7fd f877 	bl	80011d0 <HAL_RCC_ClockConfig>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	bf14      	ite	ne
 80040e8:	2301      	movne	r3, #1
 80040ea:	2300      	moveq	r3, #0
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d001      	beq.n	80040f6 <_Z18SystemClock_Configv+0xde>
  {
    Error_Handler();
 80040f2:	f000 f877 	bl	80041e4 <Error_Handler>
  }
}
 80040f6:	bf00      	nop
 80040f8:	3750      	adds	r7, #80	; 0x50
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	40023800 	.word	0x40023800
 8004104:	40007000 	.word	0x40007000

08004108 <_Z12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b08a      	sub	sp, #40	; 0x28
 800410c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800410e:	f107 0314 	add.w	r3, r7, #20
 8004112:	2200      	movs	r2, #0
 8004114:	601a      	str	r2, [r3, #0]
 8004116:	605a      	str	r2, [r3, #4]
 8004118:	609a      	str	r2, [r3, #8]
 800411a:	60da      	str	r2, [r3, #12]
 800411c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800411e:	2300      	movs	r3, #0
 8004120:	613b      	str	r3, [r7, #16]
 8004122:	4b2d      	ldr	r3, [pc, #180]	; (80041d8 <_Z12MX_GPIO_Initv+0xd0>)
 8004124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004126:	4a2c      	ldr	r2, [pc, #176]	; (80041d8 <_Z12MX_GPIO_Initv+0xd0>)
 8004128:	f043 0304 	orr.w	r3, r3, #4
 800412c:	6313      	str	r3, [r2, #48]	; 0x30
 800412e:	4b2a      	ldr	r3, [pc, #168]	; (80041d8 <_Z12MX_GPIO_Initv+0xd0>)
 8004130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004132:	f003 0304 	and.w	r3, r3, #4
 8004136:	613b      	str	r3, [r7, #16]
 8004138:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800413a:	2300      	movs	r3, #0
 800413c:	60fb      	str	r3, [r7, #12]
 800413e:	4b26      	ldr	r3, [pc, #152]	; (80041d8 <_Z12MX_GPIO_Initv+0xd0>)
 8004140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004142:	4a25      	ldr	r2, [pc, #148]	; (80041d8 <_Z12MX_GPIO_Initv+0xd0>)
 8004144:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004148:	6313      	str	r3, [r2, #48]	; 0x30
 800414a:	4b23      	ldr	r3, [pc, #140]	; (80041d8 <_Z12MX_GPIO_Initv+0xd0>)
 800414c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800414e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004152:	60fb      	str	r3, [r7, #12]
 8004154:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004156:	2300      	movs	r3, #0
 8004158:	60bb      	str	r3, [r7, #8]
 800415a:	4b1f      	ldr	r3, [pc, #124]	; (80041d8 <_Z12MX_GPIO_Initv+0xd0>)
 800415c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800415e:	4a1e      	ldr	r2, [pc, #120]	; (80041d8 <_Z12MX_GPIO_Initv+0xd0>)
 8004160:	f043 0301 	orr.w	r3, r3, #1
 8004164:	6313      	str	r3, [r2, #48]	; 0x30
 8004166:	4b1c      	ldr	r3, [pc, #112]	; (80041d8 <_Z12MX_GPIO_Initv+0xd0>)
 8004168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800416a:	f003 0301 	and.w	r3, r3, #1
 800416e:	60bb      	str	r3, [r7, #8]
 8004170:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004172:	2300      	movs	r3, #0
 8004174:	607b      	str	r3, [r7, #4]
 8004176:	4b18      	ldr	r3, [pc, #96]	; (80041d8 <_Z12MX_GPIO_Initv+0xd0>)
 8004178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800417a:	4a17      	ldr	r2, [pc, #92]	; (80041d8 <_Z12MX_GPIO_Initv+0xd0>)
 800417c:	f043 0302 	orr.w	r3, r3, #2
 8004180:	6313      	str	r3, [r2, #48]	; 0x30
 8004182:	4b15      	ldr	r3, [pc, #84]	; (80041d8 <_Z12MX_GPIO_Initv+0xd0>)
 8004184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004186:	f003 0302 	and.w	r3, r3, #2
 800418a:	607b      	str	r3, [r7, #4]
 800418c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800418e:	2200      	movs	r2, #0
 8004190:	2120      	movs	r1, #32
 8004192:	4812      	ldr	r0, [pc, #72]	; (80041dc <_Z12MX_GPIO_Initv+0xd4>)
 8004194:	f7fd f802 	bl	800119c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004198:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800419c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800419e:	2300      	movs	r3, #0
 80041a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041a2:	2300      	movs	r3, #0
 80041a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041a6:	f107 0314 	add.w	r3, r7, #20
 80041aa:	4619      	mov	r1, r3
 80041ac:	480c      	ldr	r0, [pc, #48]	; (80041e0 <_Z12MX_GPIO_Initv+0xd8>)
 80041ae:	f7fc fe63 	bl	8000e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80041b2:	2320      	movs	r3, #32
 80041b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041b6:	2301      	movs	r3, #1
 80041b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ba:	2300      	movs	r3, #0
 80041bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041be:	2300      	movs	r3, #0
 80041c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041c2:	f107 0314 	add.w	r3, r7, #20
 80041c6:	4619      	mov	r1, r3
 80041c8:	4804      	ldr	r0, [pc, #16]	; (80041dc <_Z12MX_GPIO_Initv+0xd4>)
 80041ca:	f7fc fe55 	bl	8000e78 <HAL_GPIO_Init>

}
 80041ce:	bf00      	nop
 80041d0:	3728      	adds	r7, #40	; 0x28
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	40023800 	.word	0x40023800
 80041dc:	40020000 	.word	0x40020000
 80041e0:	40020800 	.word	0x40020800

080041e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80041e4:	b480      	push	{r7}
 80041e6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	while(1);
 80041e8:	e7fe      	b.n	80041e8 <Error_Handler+0x4>
	...

080041ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041f2:	2300      	movs	r3, #0
 80041f4:	607b      	str	r3, [r7, #4]
 80041f6:	4b10      	ldr	r3, [pc, #64]	; (8004238 <HAL_MspInit+0x4c>)
 80041f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041fa:	4a0f      	ldr	r2, [pc, #60]	; (8004238 <HAL_MspInit+0x4c>)
 80041fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004200:	6453      	str	r3, [r2, #68]	; 0x44
 8004202:	4b0d      	ldr	r3, [pc, #52]	; (8004238 <HAL_MspInit+0x4c>)
 8004204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004206:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800420a:	607b      	str	r3, [r7, #4]
 800420c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800420e:	2300      	movs	r3, #0
 8004210:	603b      	str	r3, [r7, #0]
 8004212:	4b09      	ldr	r3, [pc, #36]	; (8004238 <HAL_MspInit+0x4c>)
 8004214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004216:	4a08      	ldr	r2, [pc, #32]	; (8004238 <HAL_MspInit+0x4c>)
 8004218:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800421c:	6413      	str	r3, [r2, #64]	; 0x40
 800421e:	4b06      	ldr	r3, [pc, #24]	; (8004238 <HAL_MspInit+0x4c>)
 8004220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004226:	603b      	str	r3, [r7, #0]
 8004228:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800422a:	bf00      	nop
 800422c:	370c      	adds	r7, #12
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr
 8004236:	bf00      	nop
 8004238:	40023800 	.word	0x40023800

0800423c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800423c:	b480      	push	{r7}
 800423e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004240:	bf00      	nop
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr

0800424a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800424a:	b480      	push	{r7}
 800424c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800424e:	e7fe      	b.n	800424e <HardFault_Handler+0x4>

08004250 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004250:	b480      	push	{r7}
 8004252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004254:	e7fe      	b.n	8004254 <MemManage_Handler+0x4>

08004256 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004256:	b480      	push	{r7}
 8004258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800425a:	e7fe      	b.n	800425a <BusFault_Handler+0x4>

0800425c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800425c:	b480      	push	{r7}
 800425e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004260:	e7fe      	b.n	8004260 <UsageFault_Handler+0x4>

08004262 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004262:	b480      	push	{r7}
 8004264:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004266:	bf00      	nop
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr

08004270 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004270:	b480      	push	{r7}
 8004272:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004274:	bf00      	nop
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr

0800427e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800427e:	b480      	push	{r7}
 8004280:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004282:	bf00      	nop
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004290:	f7fc f994 	bl	80005bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004294:	bf00      	nop
 8004296:	bd80      	pop	{r7, pc}

08004298 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800429c:	4802      	ldr	r0, [pc, #8]	; (80042a8 <DMA1_Stream5_IRQHandler+0x10>)
 800429e:	f7fc fbb1 	bl	8000a04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80042a2:	bf00      	nop
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	200006b0 	.word	0x200006b0

080042ac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80042b0:	4802      	ldr	r0, [pc, #8]	; (80042bc <USART2_IRQHandler+0x10>)
 80042b2:	f7fe fc19 	bl	8002ae8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80042b6:	bf00      	nop
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	2000062c 	.word	0x2000062c

080042c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80042c0:	b480      	push	{r7}
 80042c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80042c4:	4b08      	ldr	r3, [pc, #32]	; (80042e8 <SystemInit+0x28>)
 80042c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ca:	4a07      	ldr	r2, [pc, #28]	; (80042e8 <SystemInit+0x28>)
 80042cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80042d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80042d4:	4b04      	ldr	r3, [pc, #16]	; (80042e8 <SystemInit+0x28>)
 80042d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80042da:	609a      	str	r2, [r3, #8]
#endif
}
 80042dc:	bf00      	nop
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr
 80042e6:	bf00      	nop
 80042e8:	e000ed00 	.word	0xe000ed00

080042ec <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80042f0:	4b11      	ldr	r3, [pc, #68]	; (8004338 <MX_USART2_UART_Init+0x4c>)
 80042f2:	4a12      	ldr	r2, [pc, #72]	; (800433c <MX_USART2_UART_Init+0x50>)
 80042f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80042f6:	4b10      	ldr	r3, [pc, #64]	; (8004338 <MX_USART2_UART_Init+0x4c>)
 80042f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80042fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80042fe:	4b0e      	ldr	r3, [pc, #56]	; (8004338 <MX_USART2_UART_Init+0x4c>)
 8004300:	2200      	movs	r2, #0
 8004302:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004304:	4b0c      	ldr	r3, [pc, #48]	; (8004338 <MX_USART2_UART_Init+0x4c>)
 8004306:	2200      	movs	r2, #0
 8004308:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800430a:	4b0b      	ldr	r3, [pc, #44]	; (8004338 <MX_USART2_UART_Init+0x4c>)
 800430c:	2200      	movs	r2, #0
 800430e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004310:	4b09      	ldr	r3, [pc, #36]	; (8004338 <MX_USART2_UART_Init+0x4c>)
 8004312:	220c      	movs	r2, #12
 8004314:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004316:	4b08      	ldr	r3, [pc, #32]	; (8004338 <MX_USART2_UART_Init+0x4c>)
 8004318:	2200      	movs	r2, #0
 800431a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800431c:	4b06      	ldr	r3, [pc, #24]	; (8004338 <MX_USART2_UART_Init+0x4c>)
 800431e:	2200      	movs	r2, #0
 8004320:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004322:	4805      	ldr	r0, [pc, #20]	; (8004338 <MX_USART2_UART_Init+0x4c>)
 8004324:	f7fe fa54 	bl	80027d0 <HAL_UART_Init>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d001      	beq.n	8004332 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800432e:	f7ff ff59 	bl	80041e4 <Error_Handler>
  }

}
 8004332:	bf00      	nop
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	2000062c 	.word	0x2000062c
 800433c:	40004400 	.word	0x40004400

08004340 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b08a      	sub	sp, #40	; 0x28
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004348:	f107 0314 	add.w	r3, r7, #20
 800434c:	2200      	movs	r2, #0
 800434e:	601a      	str	r2, [r3, #0]
 8004350:	605a      	str	r2, [r3, #4]
 8004352:	609a      	str	r2, [r3, #8]
 8004354:	60da      	str	r2, [r3, #12]
 8004356:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a34      	ldr	r2, [pc, #208]	; (8004430 <HAL_UART_MspInit+0xf0>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d161      	bne.n	8004426 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004362:	2300      	movs	r3, #0
 8004364:	613b      	str	r3, [r7, #16]
 8004366:	4b33      	ldr	r3, [pc, #204]	; (8004434 <HAL_UART_MspInit+0xf4>)
 8004368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436a:	4a32      	ldr	r2, [pc, #200]	; (8004434 <HAL_UART_MspInit+0xf4>)
 800436c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004370:	6413      	str	r3, [r2, #64]	; 0x40
 8004372:	4b30      	ldr	r3, [pc, #192]	; (8004434 <HAL_UART_MspInit+0xf4>)
 8004374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800437a:	613b      	str	r3, [r7, #16]
 800437c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800437e:	2300      	movs	r3, #0
 8004380:	60fb      	str	r3, [r7, #12]
 8004382:	4b2c      	ldr	r3, [pc, #176]	; (8004434 <HAL_UART_MspInit+0xf4>)
 8004384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004386:	4a2b      	ldr	r2, [pc, #172]	; (8004434 <HAL_UART_MspInit+0xf4>)
 8004388:	f043 0301 	orr.w	r3, r3, #1
 800438c:	6313      	str	r3, [r2, #48]	; 0x30
 800438e:	4b29      	ldr	r3, [pc, #164]	; (8004434 <HAL_UART_MspInit+0xf4>)
 8004390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004392:	f003 0301 	and.w	r3, r3, #1
 8004396:	60fb      	str	r3, [r7, #12]
 8004398:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800439a:	230c      	movs	r3, #12
 800439c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800439e:	2302      	movs	r3, #2
 80043a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80043a2:	2301      	movs	r3, #1
 80043a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043a6:	2303      	movs	r3, #3
 80043a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80043aa:	2307      	movs	r3, #7
 80043ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043ae:	f107 0314 	add.w	r3, r7, #20
 80043b2:	4619      	mov	r1, r3
 80043b4:	4820      	ldr	r0, [pc, #128]	; (8004438 <HAL_UART_MspInit+0xf8>)
 80043b6:	f7fc fd5f 	bl	8000e78 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80043ba:	4b20      	ldr	r3, [pc, #128]	; (800443c <HAL_UART_MspInit+0xfc>)
 80043bc:	4a20      	ldr	r2, [pc, #128]	; (8004440 <HAL_UART_MspInit+0x100>)
 80043be:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80043c0:	4b1e      	ldr	r3, [pc, #120]	; (800443c <HAL_UART_MspInit+0xfc>)
 80043c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80043c6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80043c8:	4b1c      	ldr	r3, [pc, #112]	; (800443c <HAL_UART_MspInit+0xfc>)
 80043ca:	2200      	movs	r2, #0
 80043cc:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80043ce:	4b1b      	ldr	r3, [pc, #108]	; (800443c <HAL_UART_MspInit+0xfc>)
 80043d0:	2200      	movs	r2, #0
 80043d2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80043d4:	4b19      	ldr	r3, [pc, #100]	; (800443c <HAL_UART_MspInit+0xfc>)
 80043d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80043da:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80043dc:	4b17      	ldr	r3, [pc, #92]	; (800443c <HAL_UART_MspInit+0xfc>)
 80043de:	2200      	movs	r2, #0
 80043e0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80043e2:	4b16      	ldr	r3, [pc, #88]	; (800443c <HAL_UART_MspInit+0xfc>)
 80043e4:	2200      	movs	r2, #0
 80043e6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80043e8:	4b14      	ldr	r3, [pc, #80]	; (800443c <HAL_UART_MspInit+0xfc>)
 80043ea:	2200      	movs	r2, #0
 80043ec:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80043ee:	4b13      	ldr	r3, [pc, #76]	; (800443c <HAL_UART_MspInit+0xfc>)
 80043f0:	2200      	movs	r2, #0
 80043f2:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80043f4:	4b11      	ldr	r3, [pc, #68]	; (800443c <HAL_UART_MspInit+0xfc>)
 80043f6:	2200      	movs	r2, #0
 80043f8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80043fa:	4810      	ldr	r0, [pc, #64]	; (800443c <HAL_UART_MspInit+0xfc>)
 80043fc:	f7fc fa32 	bl	8000864 <HAL_DMA_Init>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d001      	beq.n	800440a <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8004406:	f7ff feed 	bl	80041e4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4a0b      	ldr	r2, [pc, #44]	; (800443c <HAL_UART_MspInit+0xfc>)
 800440e:	635a      	str	r2, [r3, #52]	; 0x34
 8004410:	4a0a      	ldr	r2, [pc, #40]	; (800443c <HAL_UART_MspInit+0xfc>)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004416:	2200      	movs	r2, #0
 8004418:	2100      	movs	r1, #0
 800441a:	2026      	movs	r0, #38	; 0x26
 800441c:	f7fc f9eb 	bl	80007f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004420:	2026      	movs	r0, #38	; 0x26
 8004422:	f7fc fa04 	bl	800082e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004426:	bf00      	nop
 8004428:	3728      	adds	r7, #40	; 0x28
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	40004400 	.word	0x40004400
 8004434:	40023800 	.word	0x40023800
 8004438:	40020000 	.word	0x40020000
 800443c:	200006b0 	.word	0x200006b0
 8004440:	40026088 	.word	0x40026088

08004444 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004444:	f8df d034 	ldr.w	sp, [pc, #52]	; 800447c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004448:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800444a:	e003      	b.n	8004454 <LoopCopyDataInit>

0800444c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800444c:	4b0c      	ldr	r3, [pc, #48]	; (8004480 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800444e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004450:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004452:	3104      	adds	r1, #4

08004454 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004454:	480b      	ldr	r0, [pc, #44]	; (8004484 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004456:	4b0c      	ldr	r3, [pc, #48]	; (8004488 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004458:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800445a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800445c:	d3f6      	bcc.n	800444c <CopyDataInit>
  ldr  r2, =_sbss
 800445e:	4a0b      	ldr	r2, [pc, #44]	; (800448c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004460:	e002      	b.n	8004468 <LoopFillZerobss>

08004462 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004462:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004464:	f842 3b04 	str.w	r3, [r2], #4

08004468 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004468:	4b09      	ldr	r3, [pc, #36]	; (8004490 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800446a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800446c:	d3f9      	bcc.n	8004462 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800446e:	f7ff ff27 	bl	80042c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004472:	f000 f815 	bl	80044a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004476:	f7ff fd35 	bl	8003ee4 <main>
  bx  lr    
 800447a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800447c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004480:	08004928 	.word	0x08004928
  ldr  r0, =_sdata
 8004484:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004488:	200005a8 	.word	0x200005a8
  ldr  r2, =_sbss
 800448c:	200005a8 	.word	0x200005a8
  ldr  r3, = _ebss
 8004490:	2000071c 	.word	0x2000071c

08004494 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004494:	e7fe      	b.n	8004494 <ADC_IRQHandler>

08004496 <atoi>:
 8004496:	220a      	movs	r2, #10
 8004498:	2100      	movs	r1, #0
 800449a:	f000 b8a9 	b.w	80045f0 <strtol>
	...

080044a0 <__libc_init_array>:
 80044a0:	b570      	push	{r4, r5, r6, lr}
 80044a2:	4e0d      	ldr	r6, [pc, #52]	; (80044d8 <__libc_init_array+0x38>)
 80044a4:	4c0d      	ldr	r4, [pc, #52]	; (80044dc <__libc_init_array+0x3c>)
 80044a6:	1ba4      	subs	r4, r4, r6
 80044a8:	10a4      	asrs	r4, r4, #2
 80044aa:	2500      	movs	r5, #0
 80044ac:	42a5      	cmp	r5, r4
 80044ae:	d109      	bne.n	80044c4 <__libc_init_array+0x24>
 80044b0:	4e0b      	ldr	r6, [pc, #44]	; (80044e0 <__libc_init_array+0x40>)
 80044b2:	4c0c      	ldr	r4, [pc, #48]	; (80044e4 <__libc_init_array+0x44>)
 80044b4:	f000 f950 	bl	8004758 <_init>
 80044b8:	1ba4      	subs	r4, r4, r6
 80044ba:	10a4      	asrs	r4, r4, #2
 80044bc:	2500      	movs	r5, #0
 80044be:	42a5      	cmp	r5, r4
 80044c0:	d105      	bne.n	80044ce <__libc_init_array+0x2e>
 80044c2:	bd70      	pop	{r4, r5, r6, pc}
 80044c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80044c8:	4798      	blx	r3
 80044ca:	3501      	adds	r5, #1
 80044cc:	e7ee      	b.n	80044ac <__libc_init_array+0xc>
 80044ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80044d2:	4798      	blx	r3
 80044d4:	3501      	adds	r5, #1
 80044d6:	e7f2      	b.n	80044be <__libc_init_array+0x1e>
 80044d8:	08004918 	.word	0x08004918
 80044dc:	08004918 	.word	0x08004918
 80044e0:	08004918 	.word	0x08004918
 80044e4:	08004924 	.word	0x08004924

080044e8 <memset>:
 80044e8:	4402      	add	r2, r0
 80044ea:	4603      	mov	r3, r0
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d100      	bne.n	80044f2 <memset+0xa>
 80044f0:	4770      	bx	lr
 80044f2:	f803 1b01 	strb.w	r1, [r3], #1
 80044f6:	e7f9      	b.n	80044ec <memset+0x4>

080044f8 <_strtol_l.isra.0>:
 80044f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044fc:	4680      	mov	r8, r0
 80044fe:	4689      	mov	r9, r1
 8004500:	4692      	mov	sl, r2
 8004502:	461e      	mov	r6, r3
 8004504:	460f      	mov	r7, r1
 8004506:	463d      	mov	r5, r7
 8004508:	9808      	ldr	r0, [sp, #32]
 800450a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800450e:	f000 f8a9 	bl	8004664 <__locale_ctype_ptr_l>
 8004512:	4420      	add	r0, r4
 8004514:	7843      	ldrb	r3, [r0, #1]
 8004516:	f013 0308 	ands.w	r3, r3, #8
 800451a:	d132      	bne.n	8004582 <_strtol_l.isra.0+0x8a>
 800451c:	2c2d      	cmp	r4, #45	; 0x2d
 800451e:	d132      	bne.n	8004586 <_strtol_l.isra.0+0x8e>
 8004520:	787c      	ldrb	r4, [r7, #1]
 8004522:	1cbd      	adds	r5, r7, #2
 8004524:	2201      	movs	r2, #1
 8004526:	2e00      	cmp	r6, #0
 8004528:	d05d      	beq.n	80045e6 <_strtol_l.isra.0+0xee>
 800452a:	2e10      	cmp	r6, #16
 800452c:	d109      	bne.n	8004542 <_strtol_l.isra.0+0x4a>
 800452e:	2c30      	cmp	r4, #48	; 0x30
 8004530:	d107      	bne.n	8004542 <_strtol_l.isra.0+0x4a>
 8004532:	782b      	ldrb	r3, [r5, #0]
 8004534:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004538:	2b58      	cmp	r3, #88	; 0x58
 800453a:	d14f      	bne.n	80045dc <_strtol_l.isra.0+0xe4>
 800453c:	786c      	ldrb	r4, [r5, #1]
 800453e:	2610      	movs	r6, #16
 8004540:	3502      	adds	r5, #2
 8004542:	2a00      	cmp	r2, #0
 8004544:	bf14      	ite	ne
 8004546:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800454a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800454e:	2700      	movs	r7, #0
 8004550:	fbb1 fcf6 	udiv	ip, r1, r6
 8004554:	4638      	mov	r0, r7
 8004556:	fb06 1e1c 	mls	lr, r6, ip, r1
 800455a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800455e:	2b09      	cmp	r3, #9
 8004560:	d817      	bhi.n	8004592 <_strtol_l.isra.0+0x9a>
 8004562:	461c      	mov	r4, r3
 8004564:	42a6      	cmp	r6, r4
 8004566:	dd23      	ble.n	80045b0 <_strtol_l.isra.0+0xb8>
 8004568:	1c7b      	adds	r3, r7, #1
 800456a:	d007      	beq.n	800457c <_strtol_l.isra.0+0x84>
 800456c:	4584      	cmp	ip, r0
 800456e:	d31c      	bcc.n	80045aa <_strtol_l.isra.0+0xb2>
 8004570:	d101      	bne.n	8004576 <_strtol_l.isra.0+0x7e>
 8004572:	45a6      	cmp	lr, r4
 8004574:	db19      	blt.n	80045aa <_strtol_l.isra.0+0xb2>
 8004576:	fb00 4006 	mla	r0, r0, r6, r4
 800457a:	2701      	movs	r7, #1
 800457c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004580:	e7eb      	b.n	800455a <_strtol_l.isra.0+0x62>
 8004582:	462f      	mov	r7, r5
 8004584:	e7bf      	b.n	8004506 <_strtol_l.isra.0+0xe>
 8004586:	2c2b      	cmp	r4, #43	; 0x2b
 8004588:	bf04      	itt	eq
 800458a:	1cbd      	addeq	r5, r7, #2
 800458c:	787c      	ldrbeq	r4, [r7, #1]
 800458e:	461a      	mov	r2, r3
 8004590:	e7c9      	b.n	8004526 <_strtol_l.isra.0+0x2e>
 8004592:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8004596:	2b19      	cmp	r3, #25
 8004598:	d801      	bhi.n	800459e <_strtol_l.isra.0+0xa6>
 800459a:	3c37      	subs	r4, #55	; 0x37
 800459c:	e7e2      	b.n	8004564 <_strtol_l.isra.0+0x6c>
 800459e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80045a2:	2b19      	cmp	r3, #25
 80045a4:	d804      	bhi.n	80045b0 <_strtol_l.isra.0+0xb8>
 80045a6:	3c57      	subs	r4, #87	; 0x57
 80045a8:	e7dc      	b.n	8004564 <_strtol_l.isra.0+0x6c>
 80045aa:	f04f 37ff 	mov.w	r7, #4294967295
 80045ae:	e7e5      	b.n	800457c <_strtol_l.isra.0+0x84>
 80045b0:	1c7b      	adds	r3, r7, #1
 80045b2:	d108      	bne.n	80045c6 <_strtol_l.isra.0+0xce>
 80045b4:	2322      	movs	r3, #34	; 0x22
 80045b6:	f8c8 3000 	str.w	r3, [r8]
 80045ba:	4608      	mov	r0, r1
 80045bc:	f1ba 0f00 	cmp.w	sl, #0
 80045c0:	d107      	bne.n	80045d2 <_strtol_l.isra.0+0xda>
 80045c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045c6:	b102      	cbz	r2, 80045ca <_strtol_l.isra.0+0xd2>
 80045c8:	4240      	negs	r0, r0
 80045ca:	f1ba 0f00 	cmp.w	sl, #0
 80045ce:	d0f8      	beq.n	80045c2 <_strtol_l.isra.0+0xca>
 80045d0:	b10f      	cbz	r7, 80045d6 <_strtol_l.isra.0+0xde>
 80045d2:	f105 39ff 	add.w	r9, r5, #4294967295
 80045d6:	f8ca 9000 	str.w	r9, [sl]
 80045da:	e7f2      	b.n	80045c2 <_strtol_l.isra.0+0xca>
 80045dc:	2430      	movs	r4, #48	; 0x30
 80045de:	2e00      	cmp	r6, #0
 80045e0:	d1af      	bne.n	8004542 <_strtol_l.isra.0+0x4a>
 80045e2:	2608      	movs	r6, #8
 80045e4:	e7ad      	b.n	8004542 <_strtol_l.isra.0+0x4a>
 80045e6:	2c30      	cmp	r4, #48	; 0x30
 80045e8:	d0a3      	beq.n	8004532 <_strtol_l.isra.0+0x3a>
 80045ea:	260a      	movs	r6, #10
 80045ec:	e7a9      	b.n	8004542 <_strtol_l.isra.0+0x4a>
	...

080045f0 <strtol>:
 80045f0:	4b08      	ldr	r3, [pc, #32]	; (8004614 <strtol+0x24>)
 80045f2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80045f4:	681c      	ldr	r4, [r3, #0]
 80045f6:	4d08      	ldr	r5, [pc, #32]	; (8004618 <strtol+0x28>)
 80045f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	bf08      	it	eq
 80045fe:	462b      	moveq	r3, r5
 8004600:	9300      	str	r3, [sp, #0]
 8004602:	4613      	mov	r3, r2
 8004604:	460a      	mov	r2, r1
 8004606:	4601      	mov	r1, r0
 8004608:	4620      	mov	r0, r4
 800460a:	f7ff ff75 	bl	80044f8 <_strtol_l.isra.0>
 800460e:	b003      	add	sp, #12
 8004610:	bd30      	pop	{r4, r5, pc}
 8004612:	bf00      	nop
 8004614:	2000000c 	.word	0x2000000c
 8004618:	2000043c 	.word	0x2000043c

0800461c <register_fini>:
 800461c:	4b02      	ldr	r3, [pc, #8]	; (8004628 <register_fini+0xc>)
 800461e:	b113      	cbz	r3, 8004626 <register_fini+0xa>
 8004620:	4802      	ldr	r0, [pc, #8]	; (800462c <register_fini+0x10>)
 8004622:	f000 b805 	b.w	8004630 <atexit>
 8004626:	4770      	bx	lr
 8004628:	00000000 	.word	0x00000000
 800462c:	0800463d 	.word	0x0800463d

08004630 <atexit>:
 8004630:	2300      	movs	r3, #0
 8004632:	4601      	mov	r1, r0
 8004634:	461a      	mov	r2, r3
 8004636:	4618      	mov	r0, r3
 8004638:	f000 b838 	b.w	80046ac <__register_exitproc>

0800463c <__libc_fini_array>:
 800463c:	b538      	push	{r3, r4, r5, lr}
 800463e:	4d07      	ldr	r5, [pc, #28]	; (800465c <__libc_fini_array+0x20>)
 8004640:	4c07      	ldr	r4, [pc, #28]	; (8004660 <__libc_fini_array+0x24>)
 8004642:	1b64      	subs	r4, r4, r5
 8004644:	10a4      	asrs	r4, r4, #2
 8004646:	b91c      	cbnz	r4, 8004650 <__libc_fini_array+0x14>
 8004648:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800464c:	f000 b88a 	b.w	8004764 <_fini>
 8004650:	3c01      	subs	r4, #1
 8004652:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8004656:	4798      	blx	r3
 8004658:	e7f5      	b.n	8004646 <__libc_fini_array+0xa>
 800465a:	bf00      	nop
 800465c:	08004924 	.word	0x08004924
 8004660:	08004928 	.word	0x08004928

08004664 <__locale_ctype_ptr_l>:
 8004664:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8004668:	4770      	bx	lr

0800466a <__retarget_lock_acquire_recursive>:
 800466a:	4770      	bx	lr

0800466c <__retarget_lock_release_recursive>:
 800466c:	4770      	bx	lr

0800466e <__ascii_mbtowc>:
 800466e:	b082      	sub	sp, #8
 8004670:	b901      	cbnz	r1, 8004674 <__ascii_mbtowc+0x6>
 8004672:	a901      	add	r1, sp, #4
 8004674:	b142      	cbz	r2, 8004688 <__ascii_mbtowc+0x1a>
 8004676:	b14b      	cbz	r3, 800468c <__ascii_mbtowc+0x1e>
 8004678:	7813      	ldrb	r3, [r2, #0]
 800467a:	600b      	str	r3, [r1, #0]
 800467c:	7812      	ldrb	r2, [r2, #0]
 800467e:	1c10      	adds	r0, r2, #0
 8004680:	bf18      	it	ne
 8004682:	2001      	movne	r0, #1
 8004684:	b002      	add	sp, #8
 8004686:	4770      	bx	lr
 8004688:	4610      	mov	r0, r2
 800468a:	e7fb      	b.n	8004684 <__ascii_mbtowc+0x16>
 800468c:	f06f 0001 	mvn.w	r0, #1
 8004690:	e7f8      	b.n	8004684 <__ascii_mbtowc+0x16>

08004692 <__ascii_wctomb>:
 8004692:	b149      	cbz	r1, 80046a8 <__ascii_wctomb+0x16>
 8004694:	2aff      	cmp	r2, #255	; 0xff
 8004696:	bf85      	ittet	hi
 8004698:	238a      	movhi	r3, #138	; 0x8a
 800469a:	6003      	strhi	r3, [r0, #0]
 800469c:	700a      	strbls	r2, [r1, #0]
 800469e:	f04f 30ff 	movhi.w	r0, #4294967295
 80046a2:	bf98      	it	ls
 80046a4:	2001      	movls	r0, #1
 80046a6:	4770      	bx	lr
 80046a8:	4608      	mov	r0, r1
 80046aa:	4770      	bx	lr

080046ac <__register_exitproc>:
 80046ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046b0:	4c26      	ldr	r4, [pc, #152]	; (800474c <__register_exitproc+0xa0>)
 80046b2:	4606      	mov	r6, r0
 80046b4:	6820      	ldr	r0, [r4, #0]
 80046b6:	4698      	mov	r8, r3
 80046b8:	460f      	mov	r7, r1
 80046ba:	4691      	mov	r9, r2
 80046bc:	f7ff ffd5 	bl	800466a <__retarget_lock_acquire_recursive>
 80046c0:	4b23      	ldr	r3, [pc, #140]	; (8004750 <__register_exitproc+0xa4>)
 80046c2:	681d      	ldr	r5, [r3, #0]
 80046c4:	f8d5 0148 	ldr.w	r0, [r5, #328]	; 0x148
 80046c8:	b918      	cbnz	r0, 80046d2 <__register_exitproc+0x26>
 80046ca:	f505 70a6 	add.w	r0, r5, #332	; 0x14c
 80046ce:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 80046d2:	6843      	ldr	r3, [r0, #4]
 80046d4:	2b1f      	cmp	r3, #31
 80046d6:	dd19      	ble.n	800470c <__register_exitproc+0x60>
 80046d8:	4b1e      	ldr	r3, [pc, #120]	; (8004754 <__register_exitproc+0xa8>)
 80046da:	b933      	cbnz	r3, 80046ea <__register_exitproc+0x3e>
 80046dc:	6820      	ldr	r0, [r4, #0]
 80046de:	f7ff ffc5 	bl	800466c <__retarget_lock_release_recursive>
 80046e2:	f04f 30ff 	mov.w	r0, #4294967295
 80046e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046ea:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80046ee:	f3af 8000 	nop.w
 80046f2:	2800      	cmp	r0, #0
 80046f4:	d0f2      	beq.n	80046dc <__register_exitproc+0x30>
 80046f6:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 80046fa:	6003      	str	r3, [r0, #0]
 80046fc:	2200      	movs	r2, #0
 80046fe:	6042      	str	r2, [r0, #4]
 8004700:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 8004704:	f8c0 2188 	str.w	r2, [r0, #392]	; 0x188
 8004708:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
 800470c:	6843      	ldr	r3, [r0, #4]
 800470e:	b19e      	cbz	r6, 8004738 <__register_exitproc+0x8c>
 8004710:	eb00 0583 	add.w	r5, r0, r3, lsl #2
 8004714:	2201      	movs	r2, #1
 8004716:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
 800471a:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
 800471e:	409a      	lsls	r2, r3
 8004720:	4311      	orrs	r1, r2
 8004722:	2e02      	cmp	r6, #2
 8004724:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
 8004728:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
 800472c:	bf02      	ittt	eq
 800472e:	f8d0 118c 	ldreq.w	r1, [r0, #396]	; 0x18c
 8004732:	430a      	orreq	r2, r1
 8004734:	f8c0 218c 	streq.w	r2, [r0, #396]	; 0x18c
 8004738:	1c5a      	adds	r2, r3, #1
 800473a:	3302      	adds	r3, #2
 800473c:	6042      	str	r2, [r0, #4]
 800473e:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
 8004742:	6820      	ldr	r0, [r4, #0]
 8004744:	f7ff ff92 	bl	800466c <__retarget_lock_release_recursive>
 8004748:	2000      	movs	r0, #0
 800474a:	e7cc      	b.n	80046e6 <__register_exitproc+0x3a>
 800474c:	20000438 	.word	0x20000438
 8004750:	08004800 	.word	0x08004800
 8004754:	00000000 	.word	0x00000000

08004758 <_init>:
 8004758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800475a:	bf00      	nop
 800475c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800475e:	bc08      	pop	{r3}
 8004760:	469e      	mov	lr, r3
 8004762:	4770      	bx	lr

08004764 <_fini>:
 8004764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004766:	bf00      	nop
 8004768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800476a:	bc08      	pop	{r3}
 800476c:	469e      	mov	lr, r3
 800476e:	4770      	bx	lr
