
ClassUart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004068  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  0800422c  0800422c  0001422c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004260  08004260  0002043c  2**0
                  CONTENTS
  4 .ARM          00000008  08004260  08004260  00014260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004268  08004268  0002043c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08004268  08004268  00014268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004270  08004270  00014270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000043c  20000000  08004274  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  2000043c  080046b0  0002043c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000054c  080046b0  0002054c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002043c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000104e3  00000000  00000000  0002046c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002703  00000000  00000000  0003094f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ca0  00000000  00000000  00033058  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b88  00000000  00000000  00033cf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024cb6  00000000  00000000  00034880  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ae88  00000000  00000000  00059536  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cff98  00000000  00000000  000643be  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00134356  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003584  00000000  00000000  001343d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000043c 	.word	0x2000043c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004214 	.word	0x08004214

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000440 	.word	0x20000440
 8000200:	08004214 	.word	0x08004214

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000508:	4b0e      	ldr	r3, [pc, #56]	; (8000544 <HAL_Init+0x40>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a0d      	ldr	r2, [pc, #52]	; (8000544 <HAL_Init+0x40>)
 800050e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000512:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000514:	4b0b      	ldr	r3, [pc, #44]	; (8000544 <HAL_Init+0x40>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a0a      	ldr	r2, [pc, #40]	; (8000544 <HAL_Init+0x40>)
 800051a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800051e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000520:	4b08      	ldr	r3, [pc, #32]	; (8000544 <HAL_Init+0x40>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a07      	ldr	r2, [pc, #28]	; (8000544 <HAL_Init+0x40>)
 8000526:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800052a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800052c:	2003      	movs	r0, #3
 800052e:	f000 f94d 	bl	80007cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000532:	2000      	movs	r0, #0
 8000534:	f000 f808 	bl	8000548 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000538:	f003 fc6e 	bl	8003e18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800053c:	2300      	movs	r3, #0
}
 800053e:	4618      	mov	r0, r3
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	40023c00 	.word	0x40023c00

08000548 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000550:	4b12      	ldr	r3, [pc, #72]	; (800059c <HAL_InitTick+0x54>)
 8000552:	681a      	ldr	r2, [r3, #0]
 8000554:	4b12      	ldr	r3, [pc, #72]	; (80005a0 <HAL_InitTick+0x58>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	4619      	mov	r1, r3
 800055a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800055e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000562:	fbb2 f3f3 	udiv	r3, r2, r3
 8000566:	4618      	mov	r0, r3
 8000568:	f000 f965 	bl	8000836 <HAL_SYSTICK_Config>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000572:	2301      	movs	r3, #1
 8000574:	e00e      	b.n	8000594 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	2b0f      	cmp	r3, #15
 800057a:	d80a      	bhi.n	8000592 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800057c:	2200      	movs	r2, #0
 800057e:	6879      	ldr	r1, [r7, #4]
 8000580:	f04f 30ff 	mov.w	r0, #4294967295
 8000584:	f000 f92d 	bl	80007e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000588:	4a06      	ldr	r2, [pc, #24]	; (80005a4 <HAL_InitTick+0x5c>)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800058e:	2300      	movs	r3, #0
 8000590:	e000      	b.n	8000594 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000592:	2301      	movs	r3, #1
}
 8000594:	4618      	mov	r0, r3
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	20000008 	.word	0x20000008
 80005a0:	20000004 	.word	0x20000004
 80005a4:	20000000 	.word	0x20000000

080005a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005ac:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <HAL_IncTick+0x20>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	461a      	mov	r2, r3
 80005b2:	4b06      	ldr	r3, [pc, #24]	; (80005cc <HAL_IncTick+0x24>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4413      	add	r3, r2
 80005b8:	4a04      	ldr	r2, [pc, #16]	; (80005cc <HAL_IncTick+0x24>)
 80005ba:	6013      	str	r3, [r2, #0]
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	20000004 	.word	0x20000004
 80005cc:	200004dc 	.word	0x200004dc

080005d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  return uwTick;
 80005d4:	4b03      	ldr	r3, [pc, #12]	; (80005e4 <HAL_GetTick+0x14>)
 80005d6:	681b      	ldr	r3, [r3, #0]
}
 80005d8:	4618      	mov	r0, r3
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	200004dc 	.word	0x200004dc

080005e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005f0:	f7ff ffee 	bl	80005d0 <HAL_GetTick>
 80005f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000600:	d005      	beq.n	800060e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000602:	4b09      	ldr	r3, [pc, #36]	; (8000628 <HAL_Delay+0x40>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	461a      	mov	r2, r3
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	4413      	add	r3, r2
 800060c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800060e:	bf00      	nop
 8000610:	f7ff ffde 	bl	80005d0 <HAL_GetTick>
 8000614:	4602      	mov	r2, r0
 8000616:	68bb      	ldr	r3, [r7, #8]
 8000618:	1ad3      	subs	r3, r2, r3
 800061a:	68fa      	ldr	r2, [r7, #12]
 800061c:	429a      	cmp	r2, r3
 800061e:	d8f7      	bhi.n	8000610 <HAL_Delay+0x28>
  {
  }
}
 8000620:	bf00      	nop
 8000622:	3710      	adds	r7, #16
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20000004 	.word	0x20000004

0800062c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800062c:	b480      	push	{r7}
 800062e:	b085      	sub	sp, #20
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	f003 0307 	and.w	r3, r3, #7
 800063a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800063c:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <__NVIC_SetPriorityGrouping+0x44>)
 800063e:	68db      	ldr	r3, [r3, #12]
 8000640:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000642:	68ba      	ldr	r2, [r7, #8]
 8000644:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000648:	4013      	ands	r3, r2
 800064a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000654:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000658:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800065c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800065e:	4a04      	ldr	r2, [pc, #16]	; (8000670 <__NVIC_SetPriorityGrouping+0x44>)
 8000660:	68bb      	ldr	r3, [r7, #8]
 8000662:	60d3      	str	r3, [r2, #12]
}
 8000664:	bf00      	nop
 8000666:	3714      	adds	r7, #20
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr
 8000670:	e000ed00 	.word	0xe000ed00

08000674 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000678:	4b04      	ldr	r3, [pc, #16]	; (800068c <__NVIC_GetPriorityGrouping+0x18>)
 800067a:	68db      	ldr	r3, [r3, #12]
 800067c:	0a1b      	lsrs	r3, r3, #8
 800067e:	f003 0307 	and.w	r3, r3, #7
}
 8000682:	4618      	mov	r0, r3
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr
 800068c:	e000ed00 	.word	0xe000ed00

08000690 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800069a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	db0b      	blt.n	80006ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	f003 021f 	and.w	r2, r3, #31
 80006a8:	4907      	ldr	r1, [pc, #28]	; (80006c8 <__NVIC_EnableIRQ+0x38>)
 80006aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ae:	095b      	lsrs	r3, r3, #5
 80006b0:	2001      	movs	r0, #1
 80006b2:	fa00 f202 	lsl.w	r2, r0, r2
 80006b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006ba:	bf00      	nop
 80006bc:	370c      	adds	r7, #12
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	e000e100 	.word	0xe000e100

080006cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	6039      	str	r1, [r7, #0]
 80006d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	db0a      	blt.n	80006f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	b2da      	uxtb	r2, r3
 80006e4:	490c      	ldr	r1, [pc, #48]	; (8000718 <__NVIC_SetPriority+0x4c>)
 80006e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ea:	0112      	lsls	r2, r2, #4
 80006ec:	b2d2      	uxtb	r2, r2
 80006ee:	440b      	add	r3, r1
 80006f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006f4:	e00a      	b.n	800070c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	b2da      	uxtb	r2, r3
 80006fa:	4908      	ldr	r1, [pc, #32]	; (800071c <__NVIC_SetPriority+0x50>)
 80006fc:	79fb      	ldrb	r3, [r7, #7]
 80006fe:	f003 030f 	and.w	r3, r3, #15
 8000702:	3b04      	subs	r3, #4
 8000704:	0112      	lsls	r2, r2, #4
 8000706:	b2d2      	uxtb	r2, r2
 8000708:	440b      	add	r3, r1
 800070a:	761a      	strb	r2, [r3, #24]
}
 800070c:	bf00      	nop
 800070e:	370c      	adds	r7, #12
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr
 8000718:	e000e100 	.word	0xe000e100
 800071c:	e000ed00 	.word	0xe000ed00

08000720 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000720:	b480      	push	{r7}
 8000722:	b089      	sub	sp, #36	; 0x24
 8000724:	af00      	add	r7, sp, #0
 8000726:	60f8      	str	r0, [r7, #12]
 8000728:	60b9      	str	r1, [r7, #8]
 800072a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	f003 0307 	and.w	r3, r3, #7
 8000732:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000734:	69fb      	ldr	r3, [r7, #28]
 8000736:	f1c3 0307 	rsb	r3, r3, #7
 800073a:	2b04      	cmp	r3, #4
 800073c:	bf28      	it	cs
 800073e:	2304      	movcs	r3, #4
 8000740:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000742:	69fb      	ldr	r3, [r7, #28]
 8000744:	3304      	adds	r3, #4
 8000746:	2b06      	cmp	r3, #6
 8000748:	d902      	bls.n	8000750 <NVIC_EncodePriority+0x30>
 800074a:	69fb      	ldr	r3, [r7, #28]
 800074c:	3b03      	subs	r3, #3
 800074e:	e000      	b.n	8000752 <NVIC_EncodePriority+0x32>
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000754:	f04f 32ff 	mov.w	r2, #4294967295
 8000758:	69bb      	ldr	r3, [r7, #24]
 800075a:	fa02 f303 	lsl.w	r3, r2, r3
 800075e:	43da      	mvns	r2, r3
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	401a      	ands	r2, r3
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000768:	f04f 31ff 	mov.w	r1, #4294967295
 800076c:	697b      	ldr	r3, [r7, #20]
 800076e:	fa01 f303 	lsl.w	r3, r1, r3
 8000772:	43d9      	mvns	r1, r3
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000778:	4313      	orrs	r3, r2
         );
}
 800077a:	4618      	mov	r0, r3
 800077c:	3724      	adds	r7, #36	; 0x24
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
	...

08000788 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	3b01      	subs	r3, #1
 8000794:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000798:	d301      	bcc.n	800079e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800079a:	2301      	movs	r3, #1
 800079c:	e00f      	b.n	80007be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800079e:	4a0a      	ldr	r2, [pc, #40]	; (80007c8 <SysTick_Config+0x40>)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	3b01      	subs	r3, #1
 80007a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007a6:	210f      	movs	r1, #15
 80007a8:	f04f 30ff 	mov.w	r0, #4294967295
 80007ac:	f7ff ff8e 	bl	80006cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007b0:	4b05      	ldr	r3, [pc, #20]	; (80007c8 <SysTick_Config+0x40>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007b6:	4b04      	ldr	r3, [pc, #16]	; (80007c8 <SysTick_Config+0x40>)
 80007b8:	2207      	movs	r2, #7
 80007ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007bc:	2300      	movs	r3, #0
}
 80007be:	4618      	mov	r0, r3
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	e000e010 	.word	0xe000e010

080007cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007d4:	6878      	ldr	r0, [r7, #4]
 80007d6:	f7ff ff29 	bl	800062c <__NVIC_SetPriorityGrouping>
}
 80007da:	bf00      	nop
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}

080007e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007e2:	b580      	push	{r7, lr}
 80007e4:	b086      	sub	sp, #24
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	4603      	mov	r3, r0
 80007ea:	60b9      	str	r1, [r7, #8]
 80007ec:	607a      	str	r2, [r7, #4]
 80007ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007f0:	2300      	movs	r3, #0
 80007f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007f4:	f7ff ff3e 	bl	8000674 <__NVIC_GetPriorityGrouping>
 80007f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007fa:	687a      	ldr	r2, [r7, #4]
 80007fc:	68b9      	ldr	r1, [r7, #8]
 80007fe:	6978      	ldr	r0, [r7, #20]
 8000800:	f7ff ff8e 	bl	8000720 <NVIC_EncodePriority>
 8000804:	4602      	mov	r2, r0
 8000806:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800080a:	4611      	mov	r1, r2
 800080c:	4618      	mov	r0, r3
 800080e:	f7ff ff5d 	bl	80006cc <__NVIC_SetPriority>
}
 8000812:	bf00      	nop
 8000814:	3718      	adds	r7, #24
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}

0800081a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800081a:	b580      	push	{r7, lr}
 800081c:	b082      	sub	sp, #8
 800081e:	af00      	add	r7, sp, #0
 8000820:	4603      	mov	r3, r0
 8000822:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000828:	4618      	mov	r0, r3
 800082a:	f7ff ff31 	bl	8000690 <__NVIC_EnableIRQ>
}
 800082e:	bf00      	nop
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}

08000836 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000836:	b580      	push	{r7, lr}
 8000838:	b082      	sub	sp, #8
 800083a:	af00      	add	r7, sp, #0
 800083c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800083e:	6878      	ldr	r0, [r7, #4]
 8000840:	f7ff ffa2 	bl	8000788 <SysTick_Config>
 8000844:	4603      	mov	r3, r0
}
 8000846:	4618      	mov	r0, r3
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
	...

08000850 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b086      	sub	sp, #24
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000858:	2300      	movs	r3, #0
 800085a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800085c:	f7ff feb8 	bl	80005d0 <HAL_GetTick>
 8000860:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d101      	bne.n	800086c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000868:	2301      	movs	r3, #1
 800086a:	e099      	b.n	80009a0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	2200      	movs	r2, #0
 8000870:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	2202      	movs	r2, #2
 8000878:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	681a      	ldr	r2, [r3, #0]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	f022 0201 	bic.w	r2, r2, #1
 800088a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800088c:	e00f      	b.n	80008ae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800088e:	f7ff fe9f 	bl	80005d0 <HAL_GetTick>
 8000892:	4602      	mov	r2, r0
 8000894:	693b      	ldr	r3, [r7, #16]
 8000896:	1ad3      	subs	r3, r2, r3
 8000898:	2b05      	cmp	r3, #5
 800089a:	d908      	bls.n	80008ae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	2220      	movs	r2, #32
 80008a0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	2203      	movs	r2, #3
 80008a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80008aa:	2303      	movs	r3, #3
 80008ac:	e078      	b.n	80009a0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	f003 0301 	and.w	r3, r3, #1
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d1e8      	bne.n	800088e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80008c4:	697a      	ldr	r2, [r7, #20]
 80008c6:	4b38      	ldr	r3, [pc, #224]	; (80009a8 <HAL_DMA_Init+0x158>)
 80008c8:	4013      	ands	r3, r2
 80008ca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	685a      	ldr	r2, [r3, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	689b      	ldr	r3, [r3, #8]
 80008d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	691b      	ldr	r3, [r3, #16]
 80008e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	699b      	ldr	r3, [r3, #24]
 80008ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	6a1b      	ldr	r3, [r3, #32]
 80008f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008fa:	697a      	ldr	r2, [r7, #20]
 80008fc:	4313      	orrs	r3, r2
 80008fe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000904:	2b04      	cmp	r3, #4
 8000906:	d107      	bne.n	8000918 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000910:	4313      	orrs	r3, r2
 8000912:	697a      	ldr	r2, [r7, #20]
 8000914:	4313      	orrs	r3, r2
 8000916:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	697a      	ldr	r2, [r7, #20]
 800091e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	695b      	ldr	r3, [r3, #20]
 8000926:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	f023 0307 	bic.w	r3, r3, #7
 800092e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000934:	697a      	ldr	r2, [r7, #20]
 8000936:	4313      	orrs	r3, r2
 8000938:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800093e:	2b04      	cmp	r3, #4
 8000940:	d117      	bne.n	8000972 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000946:	697a      	ldr	r2, [r7, #20]
 8000948:	4313      	orrs	r3, r2
 800094a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000950:	2b00      	cmp	r3, #0
 8000952:	d00e      	beq.n	8000972 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000954:	6878      	ldr	r0, [r7, #4]
 8000956:	f000 fa0b 	bl	8000d70 <DMA_CheckFifoParam>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d008      	beq.n	8000972 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	2240      	movs	r2, #64	; 0x40
 8000964:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	2201      	movs	r2, #1
 800096a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800096e:	2301      	movs	r3, #1
 8000970:	e016      	b.n	80009a0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	697a      	ldr	r2, [r7, #20]
 8000978:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800097a:	6878      	ldr	r0, [r7, #4]
 800097c:	f000 f9c2 	bl	8000d04 <DMA_CalcBaseAndBitshift>
 8000980:	4603      	mov	r3, r0
 8000982:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000988:	223f      	movs	r2, #63	; 0x3f
 800098a:	409a      	lsls	r2, r3
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	2200      	movs	r2, #0
 8000994:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	2201      	movs	r2, #1
 800099a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800099e:	2300      	movs	r3, #0
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	3718      	adds	r7, #24
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	f010803f 	.word	0xf010803f

080009ac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	2b02      	cmp	r3, #2
 80009be:	d004      	beq.n	80009ca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	2280      	movs	r2, #128	; 0x80
 80009c4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80009c6:	2301      	movs	r3, #1
 80009c8:	e00c      	b.n	80009e4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	2205      	movs	r2, #5
 80009ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	681a      	ldr	r2, [r3, #0]
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f022 0201 	bic.w	r2, r2, #1
 80009e0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80009e2:	2300      	movs	r3, #0
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	370c      	adds	r7, #12
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr

080009f0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b086      	sub	sp, #24
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80009f8:	2300      	movs	r3, #0
 80009fa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80009fc:	4b92      	ldr	r3, [pc, #584]	; (8000c48 <HAL_DMA_IRQHandler+0x258>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a92      	ldr	r2, [pc, #584]	; (8000c4c <HAL_DMA_IRQHandler+0x25c>)
 8000a02:	fba2 2303 	umull	r2, r3, r2, r3
 8000a06:	0a9b      	lsrs	r3, r3, #10
 8000a08:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a0e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000a10:	693b      	ldr	r3, [r7, #16]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a1a:	2208      	movs	r2, #8
 8000a1c:	409a      	lsls	r2, r3
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	4013      	ands	r3, r2
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d01a      	beq.n	8000a5c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f003 0304 	and.w	r3, r3, #4
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d013      	beq.n	8000a5c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	681a      	ldr	r2, [r3, #0]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	f022 0204 	bic.w	r2, r2, #4
 8000a42:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a48:	2208      	movs	r2, #8
 8000a4a:	409a      	lsls	r2, r3
 8000a4c:	693b      	ldr	r3, [r7, #16]
 8000a4e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a54:	f043 0201 	orr.w	r2, r3, #1
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a60:	2201      	movs	r2, #1
 8000a62:	409a      	lsls	r2, r3
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	4013      	ands	r3, r2
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d012      	beq.n	8000a92 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	695b      	ldr	r3, [r3, #20]
 8000a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d00b      	beq.n	8000a92 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a7e:	2201      	movs	r2, #1
 8000a80:	409a      	lsls	r2, r3
 8000a82:	693b      	ldr	r3, [r7, #16]
 8000a84:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a8a:	f043 0202 	orr.w	r2, r3, #2
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a96:	2204      	movs	r2, #4
 8000a98:	409a      	lsls	r2, r3
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d012      	beq.n	8000ac8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f003 0302 	and.w	r3, r3, #2
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d00b      	beq.n	8000ac8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ab4:	2204      	movs	r2, #4
 8000ab6:	409a      	lsls	r2, r3
 8000ab8:	693b      	ldr	r3, [r7, #16]
 8000aba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ac0:	f043 0204 	orr.w	r2, r3, #4
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000acc:	2210      	movs	r2, #16
 8000ace:	409a      	lsls	r2, r3
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d043      	beq.n	8000b60 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	f003 0308 	and.w	r3, r3, #8
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d03c      	beq.n	8000b60 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000aea:	2210      	movs	r2, #16
 8000aec:	409a      	lsls	r2, r3
 8000aee:	693b      	ldr	r3, [r7, #16]
 8000af0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d018      	beq.n	8000b32 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d108      	bne.n	8000b20 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d024      	beq.n	8000b60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1a:	6878      	ldr	r0, [r7, #4]
 8000b1c:	4798      	blx	r3
 8000b1e:	e01f      	b.n	8000b60 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d01b      	beq.n	8000b60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b2c:	6878      	ldr	r0, [r7, #4]
 8000b2e:	4798      	blx	r3
 8000b30:	e016      	b.n	8000b60 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d107      	bne.n	8000b50 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	f022 0208 	bic.w	r2, r2, #8
 8000b4e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d003      	beq.n	8000b60 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5c:	6878      	ldr	r0, [r7, #4]
 8000b5e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b64:	2220      	movs	r2, #32
 8000b66:	409a      	lsls	r2, r3
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	4013      	ands	r3, r2
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	f000 808e 	beq.w	8000c8e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f003 0310 	and.w	r3, r3, #16
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	f000 8086 	beq.w	8000c8e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b86:	2220      	movs	r2, #32
 8000b88:	409a      	lsls	r2, r3
 8000b8a:	693b      	ldr	r3, [r7, #16]
 8000b8c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	2b05      	cmp	r3, #5
 8000b98:	d136      	bne.n	8000c08 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f022 0216 	bic.w	r2, r2, #22
 8000ba8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	695a      	ldr	r2, [r3, #20]
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000bb8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d103      	bne.n	8000bca <HAL_DMA_IRQHandler+0x1da>
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d007      	beq.n	8000bda <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f022 0208 	bic.w	r2, r2, #8
 8000bd8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bde:	223f      	movs	r2, #63	; 0x3f
 8000be0:	409a      	lsls	r2, r3
 8000be2:	693b      	ldr	r3, [r7, #16]
 8000be4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2200      	movs	r2, #0
 8000bea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d07d      	beq.n	8000cfa <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	4798      	blx	r3
        }
        return;
 8000c06:	e078      	b.n	8000cfa <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d01c      	beq.n	8000c50 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d108      	bne.n	8000c36 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d030      	beq.n	8000c8e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c30:	6878      	ldr	r0, [r7, #4]
 8000c32:	4798      	blx	r3
 8000c34:	e02b      	b.n	8000c8e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d027      	beq.n	8000c8e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c42:	6878      	ldr	r0, [r7, #4]
 8000c44:	4798      	blx	r3
 8000c46:	e022      	b.n	8000c8e <HAL_DMA_IRQHandler+0x29e>
 8000c48:	20000008 	.word	0x20000008
 8000c4c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d10f      	bne.n	8000c7e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f022 0210 	bic.w	r2, r2, #16
 8000c6c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2200      	movs	r2, #0
 8000c72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2201      	movs	r2, #1
 8000c7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d003      	beq.n	8000c8e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d032      	beq.n	8000cfc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d022      	beq.n	8000ce8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2205      	movs	r2, #5
 8000ca6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f022 0201 	bic.w	r2, r2, #1
 8000cb8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	60bb      	str	r3, [r7, #8]
 8000cc0:	697a      	ldr	r2, [r7, #20]
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d307      	bcc.n	8000cd6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f003 0301 	and.w	r3, r3, #1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d1f2      	bne.n	8000cba <HAL_DMA_IRQHandler+0x2ca>
 8000cd4:	e000      	b.n	8000cd8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8000cd6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2200      	movs	r2, #0
 8000cdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d005      	beq.n	8000cfc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf4:	6878      	ldr	r0, [r7, #4]
 8000cf6:	4798      	blx	r3
 8000cf8:	e000      	b.n	8000cfc <HAL_DMA_IRQHandler+0x30c>
        return;
 8000cfa:	bf00      	nop
    }
  }
}
 8000cfc:	3718      	adds	r7, #24
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop

08000d04 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	3b10      	subs	r3, #16
 8000d14:	4a14      	ldr	r2, [pc, #80]	; (8000d68 <DMA_CalcBaseAndBitshift+0x64>)
 8000d16:	fba2 2303 	umull	r2, r3, r2, r3
 8000d1a:	091b      	lsrs	r3, r3, #4
 8000d1c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000d1e:	4a13      	ldr	r2, [pc, #76]	; (8000d6c <DMA_CalcBaseAndBitshift+0x68>)
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	4413      	add	r3, r2
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	461a      	mov	r2, r3
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	2b03      	cmp	r3, #3
 8000d30:	d909      	bls.n	8000d46 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000d3a:	f023 0303 	bic.w	r3, r3, #3
 8000d3e:	1d1a      	adds	r2, r3, #4
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	659a      	str	r2, [r3, #88]	; 0x58
 8000d44:	e007      	b.n	8000d56 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000d4e:	f023 0303 	bic.w	r3, r3, #3
 8000d52:	687a      	ldr	r2, [r7, #4]
 8000d54:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3714      	adds	r7, #20
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	aaaaaaab 	.word	0xaaaaaaab
 8000d6c:	0800423c 	.word	0x0800423c

08000d70 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d80:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	699b      	ldr	r3, [r3, #24]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d11f      	bne.n	8000dca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8000d8a:	68bb      	ldr	r3, [r7, #8]
 8000d8c:	2b03      	cmp	r3, #3
 8000d8e:	d855      	bhi.n	8000e3c <DMA_CheckFifoParam+0xcc>
 8000d90:	a201      	add	r2, pc, #4	; (adr r2, 8000d98 <DMA_CheckFifoParam+0x28>)
 8000d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d96:	bf00      	nop
 8000d98:	08000da9 	.word	0x08000da9
 8000d9c:	08000dbb 	.word	0x08000dbb
 8000da0:	08000da9 	.word	0x08000da9
 8000da4:	08000e3d 	.word	0x08000e3d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d045      	beq.n	8000e40 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8000db4:	2301      	movs	r3, #1
 8000db6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000db8:	e042      	b.n	8000e40 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dbe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000dc2:	d13f      	bne.n	8000e44 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000dc8:	e03c      	b.n	8000e44 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	699b      	ldr	r3, [r3, #24]
 8000dce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000dd2:	d121      	bne.n	8000e18 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	2b03      	cmp	r3, #3
 8000dd8:	d836      	bhi.n	8000e48 <DMA_CheckFifoParam+0xd8>
 8000dda:	a201      	add	r2, pc, #4	; (adr r2, 8000de0 <DMA_CheckFifoParam+0x70>)
 8000ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000de0:	08000df1 	.word	0x08000df1
 8000de4:	08000df7 	.word	0x08000df7
 8000de8:	08000df1 	.word	0x08000df1
 8000dec:	08000e09 	.word	0x08000e09
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8000df0:	2301      	movs	r3, #1
 8000df2:	73fb      	strb	r3, [r7, #15]
      break;
 8000df4:	e02f      	b.n	8000e56 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dfa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d024      	beq.n	8000e4c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
 8000e04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000e06:	e021      	b.n	8000e4c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e0c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000e10:	d11e      	bne.n	8000e50 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8000e12:	2301      	movs	r3, #1
 8000e14:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8000e16:	e01b      	b.n	8000e50 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	2b02      	cmp	r3, #2
 8000e1c:	d902      	bls.n	8000e24 <DMA_CheckFifoParam+0xb4>
 8000e1e:	2b03      	cmp	r3, #3
 8000e20:	d003      	beq.n	8000e2a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8000e22:	e018      	b.n	8000e56 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8000e24:	2301      	movs	r3, #1
 8000e26:	73fb      	strb	r3, [r7, #15]
      break;
 8000e28:	e015      	b.n	8000e56 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d00e      	beq.n	8000e54 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	73fb      	strb	r3, [r7, #15]
      break;
 8000e3a:	e00b      	b.n	8000e54 <DMA_CheckFifoParam+0xe4>
      break;
 8000e3c:	bf00      	nop
 8000e3e:	e00a      	b.n	8000e56 <DMA_CheckFifoParam+0xe6>
      break;
 8000e40:	bf00      	nop
 8000e42:	e008      	b.n	8000e56 <DMA_CheckFifoParam+0xe6>
      break;
 8000e44:	bf00      	nop
 8000e46:	e006      	b.n	8000e56 <DMA_CheckFifoParam+0xe6>
      break;
 8000e48:	bf00      	nop
 8000e4a:	e004      	b.n	8000e56 <DMA_CheckFifoParam+0xe6>
      break;
 8000e4c:	bf00      	nop
 8000e4e:	e002      	b.n	8000e56 <DMA_CheckFifoParam+0xe6>
      break;   
 8000e50:	bf00      	nop
 8000e52:	e000      	b.n	8000e56 <DMA_CheckFifoParam+0xe6>
      break;
 8000e54:	bf00      	nop
    }
  } 
  
  return status; 
 8000e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3714      	adds	r7, #20
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr

08000e64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b089      	sub	sp, #36	; 0x24
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e72:	2300      	movs	r3, #0
 8000e74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e76:	2300      	movs	r3, #0
 8000e78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61fb      	str	r3, [r7, #28]
 8000e7e:	e165      	b.n	800114c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e80:	2201      	movs	r2, #1
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	697a      	ldr	r2, [r7, #20]
 8000e90:	4013      	ands	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	f040 8154 	bne.w	8001146 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d00b      	beq.n	8000ebe <HAL_GPIO_Init+0x5a>
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	2b02      	cmp	r3, #2
 8000eac:	d007      	beq.n	8000ebe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000eb2:	2b11      	cmp	r3, #17
 8000eb4:	d003      	beq.n	8000ebe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	2b12      	cmp	r3, #18
 8000ebc:	d130      	bne.n	8000f20 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	689b      	ldr	r3, [r3, #8]
 8000ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	2203      	movs	r2, #3
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	68da      	ldr	r2, [r3, #12]
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	69ba      	ldr	r2, [r7, #24]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	69ba      	ldr	r2, [r7, #24]
 8000eec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	43db      	mvns	r3, r3
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	4013      	ands	r3, r2
 8000f02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	091b      	lsrs	r3, r3, #4
 8000f0a:	f003 0201 	and.w	r2, r3, #1
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	2203      	movs	r2, #3
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	43db      	mvns	r3, r3
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	4013      	ands	r3, r2
 8000f36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	689a      	ldr	r2, [r3, #8]
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	2b02      	cmp	r3, #2
 8000f56:	d003      	beq.n	8000f60 <HAL_GPIO_Init+0xfc>
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	2b12      	cmp	r3, #18
 8000f5e:	d123      	bne.n	8000fa8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	08da      	lsrs	r2, r3, #3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	3208      	adds	r2, #8
 8000f68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	f003 0307 	and.w	r3, r3, #7
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	220f      	movs	r2, #15
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	4013      	ands	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	691a      	ldr	r2, [r3, #16]
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	f003 0307 	and.w	r3, r3, #7
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	08da      	lsrs	r2, r3, #3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	3208      	adds	r2, #8
 8000fa2:	69b9      	ldr	r1, [r7, #24]
 8000fa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	2203      	movs	r2, #3
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f003 0203 	and.w	r2, r3, #3
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	f000 80ae 	beq.w	8001146 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	60fb      	str	r3, [r7, #12]
 8000fee:	4b5c      	ldr	r3, [pc, #368]	; (8001160 <HAL_GPIO_Init+0x2fc>)
 8000ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff2:	4a5b      	ldr	r2, [pc, #364]	; (8001160 <HAL_GPIO_Init+0x2fc>)
 8000ff4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ff8:	6453      	str	r3, [r2, #68]	; 0x44
 8000ffa:	4b59      	ldr	r3, [pc, #356]	; (8001160 <HAL_GPIO_Init+0x2fc>)
 8000ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001006:	4a57      	ldr	r2, [pc, #348]	; (8001164 <HAL_GPIO_Init+0x300>)
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	089b      	lsrs	r3, r3, #2
 800100c:	3302      	adds	r3, #2
 800100e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001012:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	f003 0303 	and.w	r3, r3, #3
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	220f      	movs	r2, #15
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	43db      	mvns	r3, r3
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	4013      	ands	r3, r2
 8001028:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a4e      	ldr	r2, [pc, #312]	; (8001168 <HAL_GPIO_Init+0x304>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d025      	beq.n	800107e <HAL_GPIO_Init+0x21a>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a4d      	ldr	r2, [pc, #308]	; (800116c <HAL_GPIO_Init+0x308>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d01f      	beq.n	800107a <HAL_GPIO_Init+0x216>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a4c      	ldr	r2, [pc, #304]	; (8001170 <HAL_GPIO_Init+0x30c>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d019      	beq.n	8001076 <HAL_GPIO_Init+0x212>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a4b      	ldr	r2, [pc, #300]	; (8001174 <HAL_GPIO_Init+0x310>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d013      	beq.n	8001072 <HAL_GPIO_Init+0x20e>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a4a      	ldr	r2, [pc, #296]	; (8001178 <HAL_GPIO_Init+0x314>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d00d      	beq.n	800106e <HAL_GPIO_Init+0x20a>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a49      	ldr	r2, [pc, #292]	; (800117c <HAL_GPIO_Init+0x318>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d007      	beq.n	800106a <HAL_GPIO_Init+0x206>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a48      	ldr	r2, [pc, #288]	; (8001180 <HAL_GPIO_Init+0x31c>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d101      	bne.n	8001066 <HAL_GPIO_Init+0x202>
 8001062:	2306      	movs	r3, #6
 8001064:	e00c      	b.n	8001080 <HAL_GPIO_Init+0x21c>
 8001066:	2307      	movs	r3, #7
 8001068:	e00a      	b.n	8001080 <HAL_GPIO_Init+0x21c>
 800106a:	2305      	movs	r3, #5
 800106c:	e008      	b.n	8001080 <HAL_GPIO_Init+0x21c>
 800106e:	2304      	movs	r3, #4
 8001070:	e006      	b.n	8001080 <HAL_GPIO_Init+0x21c>
 8001072:	2303      	movs	r3, #3
 8001074:	e004      	b.n	8001080 <HAL_GPIO_Init+0x21c>
 8001076:	2302      	movs	r3, #2
 8001078:	e002      	b.n	8001080 <HAL_GPIO_Init+0x21c>
 800107a:	2301      	movs	r3, #1
 800107c:	e000      	b.n	8001080 <HAL_GPIO_Init+0x21c>
 800107e:	2300      	movs	r3, #0
 8001080:	69fa      	ldr	r2, [r7, #28]
 8001082:	f002 0203 	and.w	r2, r2, #3
 8001086:	0092      	lsls	r2, r2, #2
 8001088:	4093      	lsls	r3, r2
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	4313      	orrs	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001090:	4934      	ldr	r1, [pc, #208]	; (8001164 <HAL_GPIO_Init+0x300>)
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	089b      	lsrs	r3, r3, #2
 8001096:	3302      	adds	r3, #2
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800109e:	4b39      	ldr	r3, [pc, #228]	; (8001184 <HAL_GPIO_Init+0x320>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	43db      	mvns	r3, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4013      	ands	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d003      	beq.n	80010c2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	4313      	orrs	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010c2:	4a30      	ldr	r2, [pc, #192]	; (8001184 <HAL_GPIO_Init+0x320>)
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010c8:	4b2e      	ldr	r3, [pc, #184]	; (8001184 <HAL_GPIO_Init+0x320>)
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	43db      	mvns	r3, r3
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	4013      	ands	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d003      	beq.n	80010ec <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010ec:	4a25      	ldr	r2, [pc, #148]	; (8001184 <HAL_GPIO_Init+0x320>)
 80010ee:	69bb      	ldr	r3, [r7, #24]
 80010f0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010f2:	4b24      	ldr	r3, [pc, #144]	; (8001184 <HAL_GPIO_Init+0x320>)
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	43db      	mvns	r3, r3
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	4013      	ands	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800110a:	2b00      	cmp	r3, #0
 800110c:	d003      	beq.n	8001116 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	4313      	orrs	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001116:	4a1b      	ldr	r2, [pc, #108]	; (8001184 <HAL_GPIO_Init+0x320>)
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800111c:	4b19      	ldr	r3, [pc, #100]	; (8001184 <HAL_GPIO_Init+0x320>)
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	43db      	mvns	r3, r3
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	4013      	ands	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001134:	2b00      	cmp	r3, #0
 8001136:	d003      	beq.n	8001140 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	4313      	orrs	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001140:	4a10      	ldr	r2, [pc, #64]	; (8001184 <HAL_GPIO_Init+0x320>)
 8001142:	69bb      	ldr	r3, [r7, #24]
 8001144:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	3301      	adds	r3, #1
 800114a:	61fb      	str	r3, [r7, #28]
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	2b0f      	cmp	r3, #15
 8001150:	f67f ae96 	bls.w	8000e80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001154:	bf00      	nop
 8001156:	3724      	adds	r7, #36	; 0x24
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	40023800 	.word	0x40023800
 8001164:	40013800 	.word	0x40013800
 8001168:	40020000 	.word	0x40020000
 800116c:	40020400 	.word	0x40020400
 8001170:	40020800 	.word	0x40020800
 8001174:	40020c00 	.word	0x40020c00
 8001178:	40021000 	.word	0x40021000
 800117c:	40021400 	.word	0x40021400
 8001180:	40021800 	.word	0x40021800
 8001184:	40013c00 	.word	0x40013c00

08001188 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	460b      	mov	r3, r1
 8001192:	807b      	strh	r3, [r7, #2]
 8001194:	4613      	mov	r3, r2
 8001196:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001198:	787b      	ldrb	r3, [r7, #1]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d003      	beq.n	80011a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800119e:	887a      	ldrh	r2, [r7, #2]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011a4:	e003      	b.n	80011ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011a6:	887b      	ldrh	r3, [r7, #2]
 80011a8:	041a      	lsls	r2, r3, #16
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	619a      	str	r2, [r3, #24]
}
 80011ae:	bf00      	nop
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
	...

080011bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d101      	bne.n	80011d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011cc:	2301      	movs	r3, #1
 80011ce:	e0cc      	b.n	800136a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80011d0:	4b68      	ldr	r3, [pc, #416]	; (8001374 <HAL_RCC_ClockConfig+0x1b8>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f003 030f 	and.w	r3, r3, #15
 80011d8:	683a      	ldr	r2, [r7, #0]
 80011da:	429a      	cmp	r2, r3
 80011dc:	d90c      	bls.n	80011f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011de:	4b65      	ldr	r3, [pc, #404]	; (8001374 <HAL_RCC_ClockConfig+0x1b8>)
 80011e0:	683a      	ldr	r2, [r7, #0]
 80011e2:	b2d2      	uxtb	r2, r2
 80011e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011e6:	4b63      	ldr	r3, [pc, #396]	; (8001374 <HAL_RCC_ClockConfig+0x1b8>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 030f 	and.w	r3, r3, #15
 80011ee:	683a      	ldr	r2, [r7, #0]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d001      	beq.n	80011f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80011f4:	2301      	movs	r3, #1
 80011f6:	e0b8      	b.n	800136a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 0302 	and.w	r3, r3, #2
 8001200:	2b00      	cmp	r3, #0
 8001202:	d020      	beq.n	8001246 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f003 0304 	and.w	r3, r3, #4
 800120c:	2b00      	cmp	r3, #0
 800120e:	d005      	beq.n	800121c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001210:	4b59      	ldr	r3, [pc, #356]	; (8001378 <HAL_RCC_ClockConfig+0x1bc>)
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	4a58      	ldr	r2, [pc, #352]	; (8001378 <HAL_RCC_ClockConfig+0x1bc>)
 8001216:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800121a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f003 0308 	and.w	r3, r3, #8
 8001224:	2b00      	cmp	r3, #0
 8001226:	d005      	beq.n	8001234 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001228:	4b53      	ldr	r3, [pc, #332]	; (8001378 <HAL_RCC_ClockConfig+0x1bc>)
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	4a52      	ldr	r2, [pc, #328]	; (8001378 <HAL_RCC_ClockConfig+0x1bc>)
 800122e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001232:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001234:	4b50      	ldr	r3, [pc, #320]	; (8001378 <HAL_RCC_ClockConfig+0x1bc>)
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	494d      	ldr	r1, [pc, #308]	; (8001378 <HAL_RCC_ClockConfig+0x1bc>)
 8001242:	4313      	orrs	r3, r2
 8001244:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	2b00      	cmp	r3, #0
 8001250:	d044      	beq.n	80012dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	2b01      	cmp	r3, #1
 8001258:	d107      	bne.n	800126a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800125a:	4b47      	ldr	r3, [pc, #284]	; (8001378 <HAL_RCC_ClockConfig+0x1bc>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d119      	bne.n	800129a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e07f      	b.n	800136a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	2b02      	cmp	r3, #2
 8001270:	d003      	beq.n	800127a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001276:	2b03      	cmp	r3, #3
 8001278:	d107      	bne.n	800128a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800127a:	4b3f      	ldr	r3, [pc, #252]	; (8001378 <HAL_RCC_ClockConfig+0x1bc>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d109      	bne.n	800129a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e06f      	b.n	800136a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800128a:	4b3b      	ldr	r3, [pc, #236]	; (8001378 <HAL_RCC_ClockConfig+0x1bc>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	2b00      	cmp	r3, #0
 8001294:	d101      	bne.n	800129a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e067      	b.n	800136a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800129a:	4b37      	ldr	r3, [pc, #220]	; (8001378 <HAL_RCC_ClockConfig+0x1bc>)
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	f023 0203 	bic.w	r2, r3, #3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	4934      	ldr	r1, [pc, #208]	; (8001378 <HAL_RCC_ClockConfig+0x1bc>)
 80012a8:	4313      	orrs	r3, r2
 80012aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012ac:	f7ff f990 	bl	80005d0 <HAL_GetTick>
 80012b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012b2:	e00a      	b.n	80012ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012b4:	f7ff f98c 	bl	80005d0 <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	f241 3288 	movw	r2, #5000	; 0x1388
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d901      	bls.n	80012ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012c6:	2303      	movs	r3, #3
 80012c8:	e04f      	b.n	800136a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012ca:	4b2b      	ldr	r3, [pc, #172]	; (8001378 <HAL_RCC_ClockConfig+0x1bc>)
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	f003 020c 	and.w	r2, r3, #12
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	429a      	cmp	r2, r3
 80012da:	d1eb      	bne.n	80012b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80012dc:	4b25      	ldr	r3, [pc, #148]	; (8001374 <HAL_RCC_ClockConfig+0x1b8>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 030f 	and.w	r3, r3, #15
 80012e4:	683a      	ldr	r2, [r7, #0]
 80012e6:	429a      	cmp	r2, r3
 80012e8:	d20c      	bcs.n	8001304 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012ea:	4b22      	ldr	r3, [pc, #136]	; (8001374 <HAL_RCC_ClockConfig+0x1b8>)
 80012ec:	683a      	ldr	r2, [r7, #0]
 80012ee:	b2d2      	uxtb	r2, r2
 80012f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012f2:	4b20      	ldr	r3, [pc, #128]	; (8001374 <HAL_RCC_ClockConfig+0x1b8>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 030f 	and.w	r3, r3, #15
 80012fa:	683a      	ldr	r2, [r7, #0]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d001      	beq.n	8001304 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001300:	2301      	movs	r3, #1
 8001302:	e032      	b.n	800136a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 0304 	and.w	r3, r3, #4
 800130c:	2b00      	cmp	r3, #0
 800130e:	d008      	beq.n	8001322 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001310:	4b19      	ldr	r3, [pc, #100]	; (8001378 <HAL_RCC_ClockConfig+0x1bc>)
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	4916      	ldr	r1, [pc, #88]	; (8001378 <HAL_RCC_ClockConfig+0x1bc>)
 800131e:	4313      	orrs	r3, r2
 8001320:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 0308 	and.w	r3, r3, #8
 800132a:	2b00      	cmp	r3, #0
 800132c:	d009      	beq.n	8001342 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800132e:	4b12      	ldr	r3, [pc, #72]	; (8001378 <HAL_RCC_ClockConfig+0x1bc>)
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	691b      	ldr	r3, [r3, #16]
 800133a:	00db      	lsls	r3, r3, #3
 800133c:	490e      	ldr	r1, [pc, #56]	; (8001378 <HAL_RCC_ClockConfig+0x1bc>)
 800133e:	4313      	orrs	r3, r2
 8001340:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001342:	f000 f855 	bl	80013f0 <HAL_RCC_GetSysClockFreq>
 8001346:	4601      	mov	r1, r0
 8001348:	4b0b      	ldr	r3, [pc, #44]	; (8001378 <HAL_RCC_ClockConfig+0x1bc>)
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	091b      	lsrs	r3, r3, #4
 800134e:	f003 030f 	and.w	r3, r3, #15
 8001352:	4a0a      	ldr	r2, [pc, #40]	; (800137c <HAL_RCC_ClockConfig+0x1c0>)
 8001354:	5cd3      	ldrb	r3, [r2, r3]
 8001356:	fa21 f303 	lsr.w	r3, r1, r3
 800135a:	4a09      	ldr	r2, [pc, #36]	; (8001380 <HAL_RCC_ClockConfig+0x1c4>)
 800135c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800135e:	4b09      	ldr	r3, [pc, #36]	; (8001384 <HAL_RCC_ClockConfig+0x1c8>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff f8f0 	bl	8000548 <HAL_InitTick>

  return HAL_OK;
 8001368:	2300      	movs	r3, #0
}
 800136a:	4618      	mov	r0, r3
 800136c:	3710      	adds	r7, #16
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40023c00 	.word	0x40023c00
 8001378:	40023800 	.word	0x40023800
 800137c:	08004244 	.word	0x08004244
 8001380:	20000008 	.word	0x20000008
 8001384:	20000000 	.word	0x20000000

08001388 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800138c:	4b03      	ldr	r3, [pc, #12]	; (800139c <HAL_RCC_GetHCLKFreq+0x14>)
 800138e:	681b      	ldr	r3, [r3, #0]
}
 8001390:	4618      	mov	r0, r3
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	20000008 	.word	0x20000008

080013a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80013a4:	f7ff fff0 	bl	8001388 <HAL_RCC_GetHCLKFreq>
 80013a8:	4601      	mov	r1, r0
 80013aa:	4b05      	ldr	r3, [pc, #20]	; (80013c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	0a9b      	lsrs	r3, r3, #10
 80013b0:	f003 0307 	and.w	r3, r3, #7
 80013b4:	4a03      	ldr	r2, [pc, #12]	; (80013c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80013b6:	5cd3      	ldrb	r3, [r2, r3]
 80013b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80013bc:	4618      	mov	r0, r3
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	40023800 	.word	0x40023800
 80013c4:	08004254 	.word	0x08004254

080013c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80013cc:	f7ff ffdc 	bl	8001388 <HAL_RCC_GetHCLKFreq>
 80013d0:	4601      	mov	r1, r0
 80013d2:	4b05      	ldr	r3, [pc, #20]	; (80013e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	0b5b      	lsrs	r3, r3, #13
 80013d8:	f003 0307 	and.w	r3, r3, #7
 80013dc:	4a03      	ldr	r2, [pc, #12]	; (80013ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80013de:	5cd3      	ldrb	r3, [r2, r3]
 80013e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40023800 	.word	0x40023800
 80013ec:	08004254 	.word	0x08004254

080013f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013f2:	b087      	sub	sp, #28
 80013f4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80013f6:	2300      	movs	r3, #0
 80013f8:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 80013fa:	2300      	movs	r3, #0
 80013fc:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 80013fe:	2300      	movs	r3, #0
 8001400:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8001402:	2300      	movs	r3, #0
 8001404:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001406:	2300      	movs	r3, #0
 8001408:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800140a:	4bc6      	ldr	r3, [pc, #792]	; (8001724 <HAL_RCC_GetSysClockFreq+0x334>)
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	f003 030c 	and.w	r3, r3, #12
 8001412:	2b0c      	cmp	r3, #12
 8001414:	f200 817e 	bhi.w	8001714 <HAL_RCC_GetSysClockFreq+0x324>
 8001418:	a201      	add	r2, pc, #4	; (adr r2, 8001420 <HAL_RCC_GetSysClockFreq+0x30>)
 800141a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800141e:	bf00      	nop
 8001420:	08001455 	.word	0x08001455
 8001424:	08001715 	.word	0x08001715
 8001428:	08001715 	.word	0x08001715
 800142c:	08001715 	.word	0x08001715
 8001430:	0800145b 	.word	0x0800145b
 8001434:	08001715 	.word	0x08001715
 8001438:	08001715 	.word	0x08001715
 800143c:	08001715 	.word	0x08001715
 8001440:	08001461 	.word	0x08001461
 8001444:	08001715 	.word	0x08001715
 8001448:	08001715 	.word	0x08001715
 800144c:	08001715 	.word	0x08001715
 8001450:	080015bd 	.word	0x080015bd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001454:	4bb4      	ldr	r3, [pc, #720]	; (8001728 <HAL_RCC_GetSysClockFreq+0x338>)
 8001456:	613b      	str	r3, [r7, #16]
       break;
 8001458:	e15f      	b.n	800171a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800145a:	4bb4      	ldr	r3, [pc, #720]	; (800172c <HAL_RCC_GetSysClockFreq+0x33c>)
 800145c:	613b      	str	r3, [r7, #16]
      break;
 800145e:	e15c      	b.n	800171a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001460:	4bb0      	ldr	r3, [pc, #704]	; (8001724 <HAL_RCC_GetSysClockFreq+0x334>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001468:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800146a:	4bae      	ldr	r3, [pc, #696]	; (8001724 <HAL_RCC_GetSysClockFreq+0x334>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d04a      	beq.n	800150c <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001476:	4bab      	ldr	r3, [pc, #684]	; (8001724 <HAL_RCC_GetSysClockFreq+0x334>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	099b      	lsrs	r3, r3, #6
 800147c:	f04f 0400 	mov.w	r4, #0
 8001480:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001484:	f04f 0200 	mov.w	r2, #0
 8001488:	ea03 0501 	and.w	r5, r3, r1
 800148c:	ea04 0602 	and.w	r6, r4, r2
 8001490:	4629      	mov	r1, r5
 8001492:	4632      	mov	r2, r6
 8001494:	f04f 0300 	mov.w	r3, #0
 8001498:	f04f 0400 	mov.w	r4, #0
 800149c:	0154      	lsls	r4, r2, #5
 800149e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80014a2:	014b      	lsls	r3, r1, #5
 80014a4:	4619      	mov	r1, r3
 80014a6:	4622      	mov	r2, r4
 80014a8:	1b49      	subs	r1, r1, r5
 80014aa:	eb62 0206 	sbc.w	r2, r2, r6
 80014ae:	f04f 0300 	mov.w	r3, #0
 80014b2:	f04f 0400 	mov.w	r4, #0
 80014b6:	0194      	lsls	r4, r2, #6
 80014b8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80014bc:	018b      	lsls	r3, r1, #6
 80014be:	1a5b      	subs	r3, r3, r1
 80014c0:	eb64 0402 	sbc.w	r4, r4, r2
 80014c4:	f04f 0100 	mov.w	r1, #0
 80014c8:	f04f 0200 	mov.w	r2, #0
 80014cc:	00e2      	lsls	r2, r4, #3
 80014ce:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80014d2:	00d9      	lsls	r1, r3, #3
 80014d4:	460b      	mov	r3, r1
 80014d6:	4614      	mov	r4, r2
 80014d8:	195b      	adds	r3, r3, r5
 80014da:	eb44 0406 	adc.w	r4, r4, r6
 80014de:	f04f 0100 	mov.w	r1, #0
 80014e2:	f04f 0200 	mov.w	r2, #0
 80014e6:	0262      	lsls	r2, r4, #9
 80014e8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80014ec:	0259      	lsls	r1, r3, #9
 80014ee:	460b      	mov	r3, r1
 80014f0:	4614      	mov	r4, r2
 80014f2:	4618      	mov	r0, r3
 80014f4:	4621      	mov	r1, r4
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	f04f 0400 	mov.w	r4, #0
 80014fc:	461a      	mov	r2, r3
 80014fe:	4623      	mov	r3, r4
 8001500:	f7fe fe80 	bl	8000204 <__aeabi_uldivmod>
 8001504:	4603      	mov	r3, r0
 8001506:	460c      	mov	r4, r1
 8001508:	617b      	str	r3, [r7, #20]
 800150a:	e049      	b.n	80015a0 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800150c:	4b85      	ldr	r3, [pc, #532]	; (8001724 <HAL_RCC_GetSysClockFreq+0x334>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	099b      	lsrs	r3, r3, #6
 8001512:	f04f 0400 	mov.w	r4, #0
 8001516:	f240 11ff 	movw	r1, #511	; 0x1ff
 800151a:	f04f 0200 	mov.w	r2, #0
 800151e:	ea03 0501 	and.w	r5, r3, r1
 8001522:	ea04 0602 	and.w	r6, r4, r2
 8001526:	4629      	mov	r1, r5
 8001528:	4632      	mov	r2, r6
 800152a:	f04f 0300 	mov.w	r3, #0
 800152e:	f04f 0400 	mov.w	r4, #0
 8001532:	0154      	lsls	r4, r2, #5
 8001534:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001538:	014b      	lsls	r3, r1, #5
 800153a:	4619      	mov	r1, r3
 800153c:	4622      	mov	r2, r4
 800153e:	1b49      	subs	r1, r1, r5
 8001540:	eb62 0206 	sbc.w	r2, r2, r6
 8001544:	f04f 0300 	mov.w	r3, #0
 8001548:	f04f 0400 	mov.w	r4, #0
 800154c:	0194      	lsls	r4, r2, #6
 800154e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001552:	018b      	lsls	r3, r1, #6
 8001554:	1a5b      	subs	r3, r3, r1
 8001556:	eb64 0402 	sbc.w	r4, r4, r2
 800155a:	f04f 0100 	mov.w	r1, #0
 800155e:	f04f 0200 	mov.w	r2, #0
 8001562:	00e2      	lsls	r2, r4, #3
 8001564:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001568:	00d9      	lsls	r1, r3, #3
 800156a:	460b      	mov	r3, r1
 800156c:	4614      	mov	r4, r2
 800156e:	195b      	adds	r3, r3, r5
 8001570:	eb44 0406 	adc.w	r4, r4, r6
 8001574:	f04f 0100 	mov.w	r1, #0
 8001578:	f04f 0200 	mov.w	r2, #0
 800157c:	02a2      	lsls	r2, r4, #10
 800157e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001582:	0299      	lsls	r1, r3, #10
 8001584:	460b      	mov	r3, r1
 8001586:	4614      	mov	r4, r2
 8001588:	4618      	mov	r0, r3
 800158a:	4621      	mov	r1, r4
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	f04f 0400 	mov.w	r4, #0
 8001592:	461a      	mov	r2, r3
 8001594:	4623      	mov	r3, r4
 8001596:	f7fe fe35 	bl	8000204 <__aeabi_uldivmod>
 800159a:	4603      	mov	r3, r0
 800159c:	460c      	mov	r4, r1
 800159e:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80015a0:	4b60      	ldr	r3, [pc, #384]	; (8001724 <HAL_RCC_GetSysClockFreq+0x334>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	0c1b      	lsrs	r3, r3, #16
 80015a6:	f003 0303 	and.w	r3, r3, #3
 80015aa:	3301      	adds	r3, #1
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80015b0:	697a      	ldr	r2, [r7, #20]
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80015b8:	613b      	str	r3, [r7, #16]
      break;
 80015ba:	e0ae      	b.n	800171a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015bc:	4b59      	ldr	r3, [pc, #356]	; (8001724 <HAL_RCC_GetSysClockFreq+0x334>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015c4:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015c6:	4b57      	ldr	r3, [pc, #348]	; (8001724 <HAL_RCC_GetSysClockFreq+0x334>)
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d04a      	beq.n	8001668 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015d2:	4b54      	ldr	r3, [pc, #336]	; (8001724 <HAL_RCC_GetSysClockFreq+0x334>)
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	099b      	lsrs	r3, r3, #6
 80015d8:	f04f 0400 	mov.w	r4, #0
 80015dc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80015e0:	f04f 0200 	mov.w	r2, #0
 80015e4:	ea03 0501 	and.w	r5, r3, r1
 80015e8:	ea04 0602 	and.w	r6, r4, r2
 80015ec:	4629      	mov	r1, r5
 80015ee:	4632      	mov	r2, r6
 80015f0:	f04f 0300 	mov.w	r3, #0
 80015f4:	f04f 0400 	mov.w	r4, #0
 80015f8:	0154      	lsls	r4, r2, #5
 80015fa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80015fe:	014b      	lsls	r3, r1, #5
 8001600:	4619      	mov	r1, r3
 8001602:	4622      	mov	r2, r4
 8001604:	1b49      	subs	r1, r1, r5
 8001606:	eb62 0206 	sbc.w	r2, r2, r6
 800160a:	f04f 0300 	mov.w	r3, #0
 800160e:	f04f 0400 	mov.w	r4, #0
 8001612:	0194      	lsls	r4, r2, #6
 8001614:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001618:	018b      	lsls	r3, r1, #6
 800161a:	1a5b      	subs	r3, r3, r1
 800161c:	eb64 0402 	sbc.w	r4, r4, r2
 8001620:	f04f 0100 	mov.w	r1, #0
 8001624:	f04f 0200 	mov.w	r2, #0
 8001628:	00e2      	lsls	r2, r4, #3
 800162a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800162e:	00d9      	lsls	r1, r3, #3
 8001630:	460b      	mov	r3, r1
 8001632:	4614      	mov	r4, r2
 8001634:	195b      	adds	r3, r3, r5
 8001636:	eb44 0406 	adc.w	r4, r4, r6
 800163a:	f04f 0100 	mov.w	r1, #0
 800163e:	f04f 0200 	mov.w	r2, #0
 8001642:	0262      	lsls	r2, r4, #9
 8001644:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001648:	0259      	lsls	r1, r3, #9
 800164a:	460b      	mov	r3, r1
 800164c:	4614      	mov	r4, r2
 800164e:	4618      	mov	r0, r3
 8001650:	4621      	mov	r1, r4
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	f04f 0400 	mov.w	r4, #0
 8001658:	461a      	mov	r2, r3
 800165a:	4623      	mov	r3, r4
 800165c:	f7fe fdd2 	bl	8000204 <__aeabi_uldivmod>
 8001660:	4603      	mov	r3, r0
 8001662:	460c      	mov	r4, r1
 8001664:	617b      	str	r3, [r7, #20]
 8001666:	e049      	b.n	80016fc <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001668:	4b2e      	ldr	r3, [pc, #184]	; (8001724 <HAL_RCC_GetSysClockFreq+0x334>)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	099b      	lsrs	r3, r3, #6
 800166e:	f04f 0400 	mov.w	r4, #0
 8001672:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001676:	f04f 0200 	mov.w	r2, #0
 800167a:	ea03 0501 	and.w	r5, r3, r1
 800167e:	ea04 0602 	and.w	r6, r4, r2
 8001682:	4629      	mov	r1, r5
 8001684:	4632      	mov	r2, r6
 8001686:	f04f 0300 	mov.w	r3, #0
 800168a:	f04f 0400 	mov.w	r4, #0
 800168e:	0154      	lsls	r4, r2, #5
 8001690:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001694:	014b      	lsls	r3, r1, #5
 8001696:	4619      	mov	r1, r3
 8001698:	4622      	mov	r2, r4
 800169a:	1b49      	subs	r1, r1, r5
 800169c:	eb62 0206 	sbc.w	r2, r2, r6
 80016a0:	f04f 0300 	mov.w	r3, #0
 80016a4:	f04f 0400 	mov.w	r4, #0
 80016a8:	0194      	lsls	r4, r2, #6
 80016aa:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80016ae:	018b      	lsls	r3, r1, #6
 80016b0:	1a5b      	subs	r3, r3, r1
 80016b2:	eb64 0402 	sbc.w	r4, r4, r2
 80016b6:	f04f 0100 	mov.w	r1, #0
 80016ba:	f04f 0200 	mov.w	r2, #0
 80016be:	00e2      	lsls	r2, r4, #3
 80016c0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80016c4:	00d9      	lsls	r1, r3, #3
 80016c6:	460b      	mov	r3, r1
 80016c8:	4614      	mov	r4, r2
 80016ca:	195b      	adds	r3, r3, r5
 80016cc:	eb44 0406 	adc.w	r4, r4, r6
 80016d0:	f04f 0100 	mov.w	r1, #0
 80016d4:	f04f 0200 	mov.w	r2, #0
 80016d8:	02a2      	lsls	r2, r4, #10
 80016da:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80016de:	0299      	lsls	r1, r3, #10
 80016e0:	460b      	mov	r3, r1
 80016e2:	4614      	mov	r4, r2
 80016e4:	4618      	mov	r0, r3
 80016e6:	4621      	mov	r1, r4
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	f04f 0400 	mov.w	r4, #0
 80016ee:	461a      	mov	r2, r3
 80016f0:	4623      	mov	r3, r4
 80016f2:	f7fe fd87 	bl	8000204 <__aeabi_uldivmod>
 80016f6:	4603      	mov	r3, r0
 80016f8:	460c      	mov	r4, r1
 80016fa:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80016fc:	4b09      	ldr	r3, [pc, #36]	; (8001724 <HAL_RCC_GetSysClockFreq+0x334>)
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	0f1b      	lsrs	r3, r3, #28
 8001702:	f003 0307 	and.w	r3, r3, #7
 8001706:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8001708:	697a      	ldr	r2, [r7, #20]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001710:	613b      	str	r3, [r7, #16]
      break;
 8001712:	e002      	b.n	800171a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001714:	4b04      	ldr	r3, [pc, #16]	; (8001728 <HAL_RCC_GetSysClockFreq+0x338>)
 8001716:	613b      	str	r3, [r7, #16]
      break;
 8001718:	bf00      	nop
    }
  }
  return sysclockfreq;
 800171a:	693b      	ldr	r3, [r7, #16]
}
 800171c:	4618      	mov	r0, r3
 800171e:	371c      	adds	r7, #28
 8001720:	46bd      	mov	sp, r7
 8001722:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001724:	40023800 	.word	0x40023800
 8001728:	00f42400 	.word	0x00f42400
 800172c:	007a1200 	.word	0x007a1200

08001730 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b086      	sub	sp, #24
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001738:	2300      	movs	r3, #0
 800173a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0301 	and.w	r3, r3, #1
 8001744:	2b00      	cmp	r3, #0
 8001746:	f000 8083 	beq.w	8001850 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800174a:	4b95      	ldr	r3, [pc, #596]	; (80019a0 <HAL_RCC_OscConfig+0x270>)
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	f003 030c 	and.w	r3, r3, #12
 8001752:	2b04      	cmp	r3, #4
 8001754:	d019      	beq.n	800178a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001756:	4b92      	ldr	r3, [pc, #584]	; (80019a0 <HAL_RCC_OscConfig+0x270>)
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800175e:	2b08      	cmp	r3, #8
 8001760:	d106      	bne.n	8001770 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001762:	4b8f      	ldr	r3, [pc, #572]	; (80019a0 <HAL_RCC_OscConfig+0x270>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800176a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800176e:	d00c      	beq.n	800178a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001770:	4b8b      	ldr	r3, [pc, #556]	; (80019a0 <HAL_RCC_OscConfig+0x270>)
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001778:	2b0c      	cmp	r3, #12
 800177a:	d112      	bne.n	80017a2 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800177c:	4b88      	ldr	r3, [pc, #544]	; (80019a0 <HAL_RCC_OscConfig+0x270>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001784:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001788:	d10b      	bne.n	80017a2 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800178a:	4b85      	ldr	r3, [pc, #532]	; (80019a0 <HAL_RCC_OscConfig+0x270>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d05b      	beq.n	800184e <HAL_RCC_OscConfig+0x11e>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d157      	bne.n	800184e <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e216      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017aa:	d106      	bne.n	80017ba <HAL_RCC_OscConfig+0x8a>
 80017ac:	4b7c      	ldr	r3, [pc, #496]	; (80019a0 <HAL_RCC_OscConfig+0x270>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a7b      	ldr	r2, [pc, #492]	; (80019a0 <HAL_RCC_OscConfig+0x270>)
 80017b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017b6:	6013      	str	r3, [r2, #0]
 80017b8:	e01d      	b.n	80017f6 <HAL_RCC_OscConfig+0xc6>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017c2:	d10c      	bne.n	80017de <HAL_RCC_OscConfig+0xae>
 80017c4:	4b76      	ldr	r3, [pc, #472]	; (80019a0 <HAL_RCC_OscConfig+0x270>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a75      	ldr	r2, [pc, #468]	; (80019a0 <HAL_RCC_OscConfig+0x270>)
 80017ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017ce:	6013      	str	r3, [r2, #0]
 80017d0:	4b73      	ldr	r3, [pc, #460]	; (80019a0 <HAL_RCC_OscConfig+0x270>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a72      	ldr	r2, [pc, #456]	; (80019a0 <HAL_RCC_OscConfig+0x270>)
 80017d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017da:	6013      	str	r3, [r2, #0]
 80017dc:	e00b      	b.n	80017f6 <HAL_RCC_OscConfig+0xc6>
 80017de:	4b70      	ldr	r3, [pc, #448]	; (80019a0 <HAL_RCC_OscConfig+0x270>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a6f      	ldr	r2, [pc, #444]	; (80019a0 <HAL_RCC_OscConfig+0x270>)
 80017e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017e8:	6013      	str	r3, [r2, #0]
 80017ea:	4b6d      	ldr	r3, [pc, #436]	; (80019a0 <HAL_RCC_OscConfig+0x270>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a6c      	ldr	r2, [pc, #432]	; (80019a0 <HAL_RCC_OscConfig+0x270>)
 80017f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017f4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d013      	beq.n	8001826 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017fe:	f7fe fee7 	bl	80005d0 <HAL_GetTick>
 8001802:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001804:	e008      	b.n	8001818 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001806:	f7fe fee3 	bl	80005d0 <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	2b64      	cmp	r3, #100	; 0x64
 8001812:	d901      	bls.n	8001818 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001814:	2303      	movs	r3, #3
 8001816:	e1db      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001818:	4b61      	ldr	r3, [pc, #388]	; (80019a0 <HAL_RCC_OscConfig+0x270>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d0f0      	beq.n	8001806 <HAL_RCC_OscConfig+0xd6>
 8001824:	e014      	b.n	8001850 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001826:	f7fe fed3 	bl	80005d0 <HAL_GetTick>
 800182a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800182c:	e008      	b.n	8001840 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800182e:	f7fe fecf 	bl	80005d0 <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	2b64      	cmp	r3, #100	; 0x64
 800183a:	d901      	bls.n	8001840 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e1c7      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001840:	4b57      	ldr	r3, [pc, #348]	; (80019a0 <HAL_RCC_OscConfig+0x270>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d1f0      	bne.n	800182e <HAL_RCC_OscConfig+0xfe>
 800184c:	e000      	b.n	8001850 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800184e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0302 	and.w	r3, r3, #2
 8001858:	2b00      	cmp	r3, #0
 800185a:	d06f      	beq.n	800193c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800185c:	4b50      	ldr	r3, [pc, #320]	; (80019a0 <HAL_RCC_OscConfig+0x270>)
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	f003 030c 	and.w	r3, r3, #12
 8001864:	2b00      	cmp	r3, #0
 8001866:	d017      	beq.n	8001898 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001868:	4b4d      	ldr	r3, [pc, #308]	; (80019a0 <HAL_RCC_OscConfig+0x270>)
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001870:	2b08      	cmp	r3, #8
 8001872:	d105      	bne.n	8001880 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001874:	4b4a      	ldr	r3, [pc, #296]	; (80019a0 <HAL_RCC_OscConfig+0x270>)
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d00b      	beq.n	8001898 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001880:	4b47      	ldr	r3, [pc, #284]	; (80019a0 <HAL_RCC_OscConfig+0x270>)
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001888:	2b0c      	cmp	r3, #12
 800188a:	d11c      	bne.n	80018c6 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800188c:	4b44      	ldr	r3, [pc, #272]	; (80019a0 <HAL_RCC_OscConfig+0x270>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d116      	bne.n	80018c6 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001898:	4b41      	ldr	r3, [pc, #260]	; (80019a0 <HAL_RCC_OscConfig+0x270>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0302 	and.w	r3, r3, #2
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d005      	beq.n	80018b0 <HAL_RCC_OscConfig+0x180>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d001      	beq.n	80018b0 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e18f      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018b0:	4b3b      	ldr	r3, [pc, #236]	; (80019a0 <HAL_RCC_OscConfig+0x270>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	691b      	ldr	r3, [r3, #16]
 80018bc:	00db      	lsls	r3, r3, #3
 80018be:	4938      	ldr	r1, [pc, #224]	; (80019a0 <HAL_RCC_OscConfig+0x270>)
 80018c0:	4313      	orrs	r3, r2
 80018c2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018c4:	e03a      	b.n	800193c <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d020      	beq.n	8001910 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018ce:	4b35      	ldr	r3, [pc, #212]	; (80019a4 <HAL_RCC_OscConfig+0x274>)
 80018d0:	2201      	movs	r2, #1
 80018d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d4:	f7fe fe7c 	bl	80005d0 <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018da:	e008      	b.n	80018ee <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018dc:	f7fe fe78 	bl	80005d0 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e170      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ee:	4b2c      	ldr	r3, [pc, #176]	; (80019a0 <HAL_RCC_OscConfig+0x270>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d0f0      	beq.n	80018dc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018fa:	4b29      	ldr	r3, [pc, #164]	; (80019a0 <HAL_RCC_OscConfig+0x270>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	691b      	ldr	r3, [r3, #16]
 8001906:	00db      	lsls	r3, r3, #3
 8001908:	4925      	ldr	r1, [pc, #148]	; (80019a0 <HAL_RCC_OscConfig+0x270>)
 800190a:	4313      	orrs	r3, r2
 800190c:	600b      	str	r3, [r1, #0]
 800190e:	e015      	b.n	800193c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001910:	4b24      	ldr	r3, [pc, #144]	; (80019a4 <HAL_RCC_OscConfig+0x274>)
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001916:	f7fe fe5b 	bl	80005d0 <HAL_GetTick>
 800191a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800191c:	e008      	b.n	8001930 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800191e:	f7fe fe57 	bl	80005d0 <HAL_GetTick>
 8001922:	4602      	mov	r2, r0
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	2b02      	cmp	r3, #2
 800192a:	d901      	bls.n	8001930 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800192c:	2303      	movs	r3, #3
 800192e:	e14f      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001930:	4b1b      	ldr	r3, [pc, #108]	; (80019a0 <HAL_RCC_OscConfig+0x270>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0302 	and.w	r3, r3, #2
 8001938:	2b00      	cmp	r3, #0
 800193a:	d1f0      	bne.n	800191e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0308 	and.w	r3, r3, #8
 8001944:	2b00      	cmp	r3, #0
 8001946:	d037      	beq.n	80019b8 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	695b      	ldr	r3, [r3, #20]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d016      	beq.n	800197e <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001950:	4b15      	ldr	r3, [pc, #84]	; (80019a8 <HAL_RCC_OscConfig+0x278>)
 8001952:	2201      	movs	r2, #1
 8001954:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001956:	f7fe fe3b 	bl	80005d0 <HAL_GetTick>
 800195a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800195c:	e008      	b.n	8001970 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800195e:	f7fe fe37 	bl	80005d0 <HAL_GetTick>
 8001962:	4602      	mov	r2, r0
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	2b02      	cmp	r3, #2
 800196a:	d901      	bls.n	8001970 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e12f      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001970:	4b0b      	ldr	r3, [pc, #44]	; (80019a0 <HAL_RCC_OscConfig+0x270>)
 8001972:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001974:	f003 0302 	and.w	r3, r3, #2
 8001978:	2b00      	cmp	r3, #0
 800197a:	d0f0      	beq.n	800195e <HAL_RCC_OscConfig+0x22e>
 800197c:	e01c      	b.n	80019b8 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800197e:	4b0a      	ldr	r3, [pc, #40]	; (80019a8 <HAL_RCC_OscConfig+0x278>)
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001984:	f7fe fe24 	bl	80005d0 <HAL_GetTick>
 8001988:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800198a:	e00f      	b.n	80019ac <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800198c:	f7fe fe20 	bl	80005d0 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b02      	cmp	r3, #2
 8001998:	d908      	bls.n	80019ac <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e118      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4a0>
 800199e:	bf00      	nop
 80019a0:	40023800 	.word	0x40023800
 80019a4:	42470000 	.word	0x42470000
 80019a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019ac:	4b8a      	ldr	r3, [pc, #552]	; (8001bd8 <HAL_RCC_OscConfig+0x4a8>)
 80019ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019b0:	f003 0302 	and.w	r3, r3, #2
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d1e9      	bne.n	800198c <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0304 	and.w	r3, r3, #4
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	f000 8097 	beq.w	8001af4 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019c6:	2300      	movs	r3, #0
 80019c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019ca:	4b83      	ldr	r3, [pc, #524]	; (8001bd8 <HAL_RCC_OscConfig+0x4a8>)
 80019cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d10f      	bne.n	80019f6 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	60fb      	str	r3, [r7, #12]
 80019da:	4b7f      	ldr	r3, [pc, #508]	; (8001bd8 <HAL_RCC_OscConfig+0x4a8>)
 80019dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019de:	4a7e      	ldr	r2, [pc, #504]	; (8001bd8 <HAL_RCC_OscConfig+0x4a8>)
 80019e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019e4:	6413      	str	r3, [r2, #64]	; 0x40
 80019e6:	4b7c      	ldr	r3, [pc, #496]	; (8001bd8 <HAL_RCC_OscConfig+0x4a8>)
 80019e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80019f2:	2301      	movs	r3, #1
 80019f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019f6:	4b79      	ldr	r3, [pc, #484]	; (8001bdc <HAL_RCC_OscConfig+0x4ac>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d118      	bne.n	8001a34 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a02:	4b76      	ldr	r3, [pc, #472]	; (8001bdc <HAL_RCC_OscConfig+0x4ac>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a75      	ldr	r2, [pc, #468]	; (8001bdc <HAL_RCC_OscConfig+0x4ac>)
 8001a08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a0e:	f7fe fddf 	bl	80005d0 <HAL_GetTick>
 8001a12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a14:	e008      	b.n	8001a28 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a16:	f7fe fddb 	bl	80005d0 <HAL_GetTick>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d901      	bls.n	8001a28 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001a24:	2303      	movs	r3, #3
 8001a26:	e0d3      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a28:	4b6c      	ldr	r3, [pc, #432]	; (8001bdc <HAL_RCC_OscConfig+0x4ac>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d0f0      	beq.n	8001a16 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d106      	bne.n	8001a4a <HAL_RCC_OscConfig+0x31a>
 8001a3c:	4b66      	ldr	r3, [pc, #408]	; (8001bd8 <HAL_RCC_OscConfig+0x4a8>)
 8001a3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a40:	4a65      	ldr	r2, [pc, #404]	; (8001bd8 <HAL_RCC_OscConfig+0x4a8>)
 8001a42:	f043 0301 	orr.w	r3, r3, #1
 8001a46:	6713      	str	r3, [r2, #112]	; 0x70
 8001a48:	e01c      	b.n	8001a84 <HAL_RCC_OscConfig+0x354>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	2b05      	cmp	r3, #5
 8001a50:	d10c      	bne.n	8001a6c <HAL_RCC_OscConfig+0x33c>
 8001a52:	4b61      	ldr	r3, [pc, #388]	; (8001bd8 <HAL_RCC_OscConfig+0x4a8>)
 8001a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a56:	4a60      	ldr	r2, [pc, #384]	; (8001bd8 <HAL_RCC_OscConfig+0x4a8>)
 8001a58:	f043 0304 	orr.w	r3, r3, #4
 8001a5c:	6713      	str	r3, [r2, #112]	; 0x70
 8001a5e:	4b5e      	ldr	r3, [pc, #376]	; (8001bd8 <HAL_RCC_OscConfig+0x4a8>)
 8001a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a62:	4a5d      	ldr	r2, [pc, #372]	; (8001bd8 <HAL_RCC_OscConfig+0x4a8>)
 8001a64:	f043 0301 	orr.w	r3, r3, #1
 8001a68:	6713      	str	r3, [r2, #112]	; 0x70
 8001a6a:	e00b      	b.n	8001a84 <HAL_RCC_OscConfig+0x354>
 8001a6c:	4b5a      	ldr	r3, [pc, #360]	; (8001bd8 <HAL_RCC_OscConfig+0x4a8>)
 8001a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a70:	4a59      	ldr	r2, [pc, #356]	; (8001bd8 <HAL_RCC_OscConfig+0x4a8>)
 8001a72:	f023 0301 	bic.w	r3, r3, #1
 8001a76:	6713      	str	r3, [r2, #112]	; 0x70
 8001a78:	4b57      	ldr	r3, [pc, #348]	; (8001bd8 <HAL_RCC_OscConfig+0x4a8>)
 8001a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a7c:	4a56      	ldr	r2, [pc, #344]	; (8001bd8 <HAL_RCC_OscConfig+0x4a8>)
 8001a7e:	f023 0304 	bic.w	r3, r3, #4
 8001a82:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d015      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a8c:	f7fe fda0 	bl	80005d0 <HAL_GetTick>
 8001a90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a92:	e00a      	b.n	8001aaa <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a94:	f7fe fd9c 	bl	80005d0 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e092      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aaa:	4b4b      	ldr	r3, [pc, #300]	; (8001bd8 <HAL_RCC_OscConfig+0x4a8>)
 8001aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d0ee      	beq.n	8001a94 <HAL_RCC_OscConfig+0x364>
 8001ab6:	e014      	b.n	8001ae2 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ab8:	f7fe fd8a 	bl	80005d0 <HAL_GetTick>
 8001abc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001abe:	e00a      	b.n	8001ad6 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ac0:	f7fe fd86 	bl	80005d0 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e07c      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ad6:	4b40      	ldr	r3, [pc, #256]	; (8001bd8 <HAL_RCC_OscConfig+0x4a8>)
 8001ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d1ee      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ae2:	7dfb      	ldrb	r3, [r7, #23]
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d105      	bne.n	8001af4 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ae8:	4b3b      	ldr	r3, [pc, #236]	; (8001bd8 <HAL_RCC_OscConfig+0x4a8>)
 8001aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aec:	4a3a      	ldr	r2, [pc, #232]	; (8001bd8 <HAL_RCC_OscConfig+0x4a8>)
 8001aee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001af2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d068      	beq.n	8001bce <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001afc:	4b36      	ldr	r3, [pc, #216]	; (8001bd8 <HAL_RCC_OscConfig+0x4a8>)
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f003 030c 	and.w	r3, r3, #12
 8001b04:	2b08      	cmp	r3, #8
 8001b06:	d060      	beq.n	8001bca <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d145      	bne.n	8001b9c <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b10:	4b33      	ldr	r3, [pc, #204]	; (8001be0 <HAL_RCC_OscConfig+0x4b0>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b16:	f7fe fd5b 	bl	80005d0 <HAL_GetTick>
 8001b1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b1c:	e008      	b.n	8001b30 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b1e:	f7fe fd57 	bl	80005d0 <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d901      	bls.n	8001b30 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e04f      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b30:	4b29      	ldr	r3, [pc, #164]	; (8001bd8 <HAL_RCC_OscConfig+0x4a8>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d1f0      	bne.n	8001b1e <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	69da      	ldr	r2, [r3, #28]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a1b      	ldr	r3, [r3, #32]
 8001b44:	431a      	orrs	r2, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4a:	019b      	lsls	r3, r3, #6
 8001b4c:	431a      	orrs	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b52:	085b      	lsrs	r3, r3, #1
 8001b54:	3b01      	subs	r3, #1
 8001b56:	041b      	lsls	r3, r3, #16
 8001b58:	431a      	orrs	r2, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b5e:	061b      	lsls	r3, r3, #24
 8001b60:	431a      	orrs	r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b66:	071b      	lsls	r3, r3, #28
 8001b68:	491b      	ldr	r1, [pc, #108]	; (8001bd8 <HAL_RCC_OscConfig+0x4a8>)
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b6e:	4b1c      	ldr	r3, [pc, #112]	; (8001be0 <HAL_RCC_OscConfig+0x4b0>)
 8001b70:	2201      	movs	r2, #1
 8001b72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b74:	f7fe fd2c 	bl	80005d0 <HAL_GetTick>
 8001b78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b7a:	e008      	b.n	8001b8e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b7c:	f7fe fd28 	bl	80005d0 <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e020      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b8e:	4b12      	ldr	r3, [pc, #72]	; (8001bd8 <HAL_RCC_OscConfig+0x4a8>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d0f0      	beq.n	8001b7c <HAL_RCC_OscConfig+0x44c>
 8001b9a:	e018      	b.n	8001bce <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b9c:	4b10      	ldr	r3, [pc, #64]	; (8001be0 <HAL_RCC_OscConfig+0x4b0>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba2:	f7fe fd15 	bl	80005d0 <HAL_GetTick>
 8001ba6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ba8:	e008      	b.n	8001bbc <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001baa:	f7fe fd11 	bl	80005d0 <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d901      	bls.n	8001bbc <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e009      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bbc:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <HAL_RCC_OscConfig+0x4a8>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d1f0      	bne.n	8001baa <HAL_RCC_OscConfig+0x47a>
 8001bc8:	e001      	b.n	8001bce <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e000      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3718      	adds	r7, #24
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	40023800 	.word	0x40023800
 8001bdc:	40007000 	.word	0x40007000
 8001be0:	42470060 	.word	0x42470060

08001be4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d101      	bne.n	8001bf6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e01d      	b.n	8001c32 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d106      	bne.n	8001c10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f000 f845 	bl	8001c9a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2202      	movs	r2, #2
 8001c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	3304      	adds	r3, #4
 8001c20:	4619      	mov	r1, r3
 8001c22:	4610      	mov	r0, r2
 8001c24:	f000 fa3e 	bl	80020a4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b082      	sub	sp, #8
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2202      	movs	r2, #2
 8001c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	6a1a      	ldr	r2, [r3, #32]
 8001c50:	f241 1311 	movw	r3, #4369	; 0x1111
 8001c54:	4013      	ands	r3, r2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d10f      	bne.n	8001c7a <HAL_TIM_Base_DeInit+0x40>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	6a1a      	ldr	r2, [r3, #32]
 8001c60:	f240 4344 	movw	r3, #1092	; 0x444
 8001c64:	4013      	ands	r3, r2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d107      	bne.n	8001c7a <HAL_TIM_Base_DeInit+0x40>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f022 0201 	bic.w	r2, r2, #1
 8001c78:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f000 f817 	bl	8001cae <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	b083      	sub	sp, #12
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001ca2:	bf00      	nop
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr

08001cae <HAL_TIM_Base_MspDeInit>:
  * @brief  DeInitializes TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef *htim)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	b083      	sub	sp, #12
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspDeInit could be implemented in the user file
   */
}
 8001cb6:	bf00      	nop
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr

08001cc2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b082      	sub	sp, #8
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d101      	bne.n	8001cd4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e01d      	b.n	8001d10 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d106      	bne.n	8001cee <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f000 f815 	bl	8001d18 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2202      	movs	r2, #2
 8001cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	3304      	adds	r3, #4
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4610      	mov	r0, r2
 8001d02:	f000 f9cf 	bl	80020a4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2201      	movs	r2, #1
 8001d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d0e:	2300      	movs	r3, #0
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3708      	adds	r7, #8
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001d20:	bf00      	nop
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	6839      	ldr	r1, [r7, #0]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f000 fc9a 	bl	8002678 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a15      	ldr	r2, [pc, #84]	; (8001da0 <HAL_TIM_PWM_Start+0x74>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d004      	beq.n	8001d58 <HAL_TIM_PWM_Start+0x2c>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a14      	ldr	r2, [pc, #80]	; (8001da4 <HAL_TIM_PWM_Start+0x78>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d101      	bne.n	8001d5c <HAL_TIM_PWM_Start+0x30>
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e000      	b.n	8001d5e <HAL_TIM_PWM_Start+0x32>
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d007      	beq.n	8001d72 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d70:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	f003 0307 	and.w	r3, r3, #7
 8001d7c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2b06      	cmp	r3, #6
 8001d82:	d007      	beq.n	8001d94 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f042 0201 	orr.w	r2, r2, #1
 8001d92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3710      	adds	r7, #16
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	40010000 	.word	0x40010000
 8001da4:	40010400 	.word	0x40010400

08001da8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	60b9      	str	r1, [r7, #8]
 8001db2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d101      	bne.n	8001dc2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	e0b4      	b.n	8001f2c <HAL_TIM_PWM_ConfigChannel+0x184>
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2202      	movs	r2, #2
 8001dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2b0c      	cmp	r3, #12
 8001dd6:	f200 809f 	bhi.w	8001f18 <HAL_TIM_PWM_ConfigChannel+0x170>
 8001dda:	a201      	add	r2, pc, #4	; (adr r2, 8001de0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8001ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001de0:	08001e15 	.word	0x08001e15
 8001de4:	08001f19 	.word	0x08001f19
 8001de8:	08001f19 	.word	0x08001f19
 8001dec:	08001f19 	.word	0x08001f19
 8001df0:	08001e55 	.word	0x08001e55
 8001df4:	08001f19 	.word	0x08001f19
 8001df8:	08001f19 	.word	0x08001f19
 8001dfc:	08001f19 	.word	0x08001f19
 8001e00:	08001e97 	.word	0x08001e97
 8001e04:	08001f19 	.word	0x08001f19
 8001e08:	08001f19 	.word	0x08001f19
 8001e0c:	08001f19 	.word	0x08001f19
 8001e10:	08001ed7 	.word	0x08001ed7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	68b9      	ldr	r1, [r7, #8]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f000 f9e2 	bl	80021e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	699a      	ldr	r2, [r3, #24]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f042 0208 	orr.w	r2, r2, #8
 8001e2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	699a      	ldr	r2, [r3, #24]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f022 0204 	bic.w	r2, r2, #4
 8001e3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	6999      	ldr	r1, [r3, #24]
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	691a      	ldr	r2, [r3, #16]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	430a      	orrs	r2, r1
 8001e50:	619a      	str	r2, [r3, #24]
      break;
 8001e52:	e062      	b.n	8001f1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	68b9      	ldr	r1, [r7, #8]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f000 fa32 	bl	80022c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	699a      	ldr	r2, [r3, #24]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	699a      	ldr	r2, [r3, #24]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	6999      	ldr	r1, [r3, #24]
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	021a      	lsls	r2, r3, #8
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	430a      	orrs	r2, r1
 8001e92:	619a      	str	r2, [r3, #24]
      break;
 8001e94:	e041      	b.n	8001f1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	68b9      	ldr	r1, [r7, #8]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f000 fa87 	bl	80023b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	69da      	ldr	r2, [r3, #28]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f042 0208 	orr.w	r2, r2, #8
 8001eb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	69da      	ldr	r2, [r3, #28]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f022 0204 	bic.w	r2, r2, #4
 8001ec0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	69d9      	ldr	r1, [r3, #28]
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	691a      	ldr	r2, [r3, #16]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	61da      	str	r2, [r3, #28]
      break;
 8001ed4:	e021      	b.n	8001f1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	68b9      	ldr	r1, [r7, #8]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f000 fadb 	bl	8002498 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	69da      	ldr	r2, [r3, #28]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ef0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	69da      	ldr	r2, [r3, #28]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	69d9      	ldr	r1, [r3, #28]
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	691b      	ldr	r3, [r3, #16]
 8001f0c:	021a      	lsls	r2, r3, #8
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	430a      	orrs	r2, r1
 8001f14:	61da      	str	r2, [r3, #28]
      break;
 8001f16:	e000      	b.n	8001f1a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8001f18:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001f2a:	2300      	movs	r3, #0
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3710      	adds	r7, #16
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d101      	bne.n	8001f4c <HAL_TIM_ConfigClockSource+0x18>
 8001f48:	2302      	movs	r3, #2
 8001f4a:	e0a6      	b.n	800209a <HAL_TIM_ConfigClockSource+0x166>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2202      	movs	r2, #2
 8001f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001f6a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001f72:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	68fa      	ldr	r2, [r7, #12]
 8001f7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2b40      	cmp	r3, #64	; 0x40
 8001f82:	d067      	beq.n	8002054 <HAL_TIM_ConfigClockSource+0x120>
 8001f84:	2b40      	cmp	r3, #64	; 0x40
 8001f86:	d80b      	bhi.n	8001fa0 <HAL_TIM_ConfigClockSource+0x6c>
 8001f88:	2b10      	cmp	r3, #16
 8001f8a:	d073      	beq.n	8002074 <HAL_TIM_ConfigClockSource+0x140>
 8001f8c:	2b10      	cmp	r3, #16
 8001f8e:	d802      	bhi.n	8001f96 <HAL_TIM_ConfigClockSource+0x62>
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d06f      	beq.n	8002074 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8001f94:	e078      	b.n	8002088 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001f96:	2b20      	cmp	r3, #32
 8001f98:	d06c      	beq.n	8002074 <HAL_TIM_ConfigClockSource+0x140>
 8001f9a:	2b30      	cmp	r3, #48	; 0x30
 8001f9c:	d06a      	beq.n	8002074 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8001f9e:	e073      	b.n	8002088 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001fa0:	2b70      	cmp	r3, #112	; 0x70
 8001fa2:	d00d      	beq.n	8001fc0 <HAL_TIM_ConfigClockSource+0x8c>
 8001fa4:	2b70      	cmp	r3, #112	; 0x70
 8001fa6:	d804      	bhi.n	8001fb2 <HAL_TIM_ConfigClockSource+0x7e>
 8001fa8:	2b50      	cmp	r3, #80	; 0x50
 8001faa:	d033      	beq.n	8002014 <HAL_TIM_ConfigClockSource+0xe0>
 8001fac:	2b60      	cmp	r3, #96	; 0x60
 8001fae:	d041      	beq.n	8002034 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8001fb0:	e06a      	b.n	8002088 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001fb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fb6:	d066      	beq.n	8002086 <HAL_TIM_ConfigClockSource+0x152>
 8001fb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fbc:	d017      	beq.n	8001fee <HAL_TIM_ConfigClockSource+0xba>
      break;
 8001fbe:	e063      	b.n	8002088 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6818      	ldr	r0, [r3, #0]
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	6899      	ldr	r1, [r3, #8]
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685a      	ldr	r2, [r3, #4]
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	f000 fb32 	bl	8002638 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001fe2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	68fa      	ldr	r2, [r7, #12]
 8001fea:	609a      	str	r2, [r3, #8]
      break;
 8001fec:	e04c      	b.n	8002088 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6818      	ldr	r0, [r3, #0]
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	6899      	ldr	r1, [r3, #8]
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685a      	ldr	r2, [r3, #4]
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	f000 fb1b 	bl	8002638 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	689a      	ldr	r2, [r3, #8]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002010:	609a      	str	r2, [r3, #8]
      break;
 8002012:	e039      	b.n	8002088 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6818      	ldr	r0, [r3, #0]
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	6859      	ldr	r1, [r3, #4]
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	461a      	mov	r2, r3
 8002022:	f000 fa8f 	bl	8002544 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2150      	movs	r1, #80	; 0x50
 800202c:	4618      	mov	r0, r3
 800202e:	f000 fae8 	bl	8002602 <TIM_ITRx_SetConfig>
      break;
 8002032:	e029      	b.n	8002088 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6818      	ldr	r0, [r3, #0]
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	6859      	ldr	r1, [r3, #4]
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	461a      	mov	r2, r3
 8002042:	f000 faae 	bl	80025a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2160      	movs	r1, #96	; 0x60
 800204c:	4618      	mov	r0, r3
 800204e:	f000 fad8 	bl	8002602 <TIM_ITRx_SetConfig>
      break;
 8002052:	e019      	b.n	8002088 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6818      	ldr	r0, [r3, #0]
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	6859      	ldr	r1, [r3, #4]
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	461a      	mov	r2, r3
 8002062:	f000 fa6f 	bl	8002544 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2140      	movs	r1, #64	; 0x40
 800206c:	4618      	mov	r0, r3
 800206e:	f000 fac8 	bl	8002602 <TIM_ITRx_SetConfig>
      break;
 8002072:	e009      	b.n	8002088 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4619      	mov	r1, r3
 800207e:	4610      	mov	r0, r2
 8002080:	f000 fabf 	bl	8002602 <TIM_ITRx_SetConfig>
      break;
 8002084:	e000      	b.n	8002088 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002086:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
	...

080020a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4a40      	ldr	r2, [pc, #256]	; (80021b8 <TIM_Base_SetConfig+0x114>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d013      	beq.n	80020e4 <TIM_Base_SetConfig+0x40>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020c2:	d00f      	beq.n	80020e4 <TIM_Base_SetConfig+0x40>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4a3d      	ldr	r2, [pc, #244]	; (80021bc <TIM_Base_SetConfig+0x118>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d00b      	beq.n	80020e4 <TIM_Base_SetConfig+0x40>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4a3c      	ldr	r2, [pc, #240]	; (80021c0 <TIM_Base_SetConfig+0x11c>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d007      	beq.n	80020e4 <TIM_Base_SetConfig+0x40>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4a3b      	ldr	r2, [pc, #236]	; (80021c4 <TIM_Base_SetConfig+0x120>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d003      	beq.n	80020e4 <TIM_Base_SetConfig+0x40>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4a3a      	ldr	r2, [pc, #232]	; (80021c8 <TIM_Base_SetConfig+0x124>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d108      	bne.n	80020f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	68fa      	ldr	r2, [r7, #12]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a2f      	ldr	r2, [pc, #188]	; (80021b8 <TIM_Base_SetConfig+0x114>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d02b      	beq.n	8002156 <TIM_Base_SetConfig+0xb2>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002104:	d027      	beq.n	8002156 <TIM_Base_SetConfig+0xb2>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a2c      	ldr	r2, [pc, #176]	; (80021bc <TIM_Base_SetConfig+0x118>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d023      	beq.n	8002156 <TIM_Base_SetConfig+0xb2>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a2b      	ldr	r2, [pc, #172]	; (80021c0 <TIM_Base_SetConfig+0x11c>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d01f      	beq.n	8002156 <TIM_Base_SetConfig+0xb2>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a2a      	ldr	r2, [pc, #168]	; (80021c4 <TIM_Base_SetConfig+0x120>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d01b      	beq.n	8002156 <TIM_Base_SetConfig+0xb2>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a29      	ldr	r2, [pc, #164]	; (80021c8 <TIM_Base_SetConfig+0x124>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d017      	beq.n	8002156 <TIM_Base_SetConfig+0xb2>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a28      	ldr	r2, [pc, #160]	; (80021cc <TIM_Base_SetConfig+0x128>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d013      	beq.n	8002156 <TIM_Base_SetConfig+0xb2>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a27      	ldr	r2, [pc, #156]	; (80021d0 <TIM_Base_SetConfig+0x12c>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d00f      	beq.n	8002156 <TIM_Base_SetConfig+0xb2>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a26      	ldr	r2, [pc, #152]	; (80021d4 <TIM_Base_SetConfig+0x130>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d00b      	beq.n	8002156 <TIM_Base_SetConfig+0xb2>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a25      	ldr	r2, [pc, #148]	; (80021d8 <TIM_Base_SetConfig+0x134>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d007      	beq.n	8002156 <TIM_Base_SetConfig+0xb2>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a24      	ldr	r2, [pc, #144]	; (80021dc <TIM_Base_SetConfig+0x138>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d003      	beq.n	8002156 <TIM_Base_SetConfig+0xb2>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a23      	ldr	r2, [pc, #140]	; (80021e0 <TIM_Base_SetConfig+0x13c>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d108      	bne.n	8002168 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800215c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	68fa      	ldr	r2, [r7, #12]
 8002164:	4313      	orrs	r3, r2
 8002166:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	695b      	ldr	r3, [r3, #20]
 8002172:	4313      	orrs	r3, r2
 8002174:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	68fa      	ldr	r2, [r7, #12]
 800217a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	689a      	ldr	r2, [r3, #8]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	4a0a      	ldr	r2, [pc, #40]	; (80021b8 <TIM_Base_SetConfig+0x114>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d003      	beq.n	800219c <TIM_Base_SetConfig+0xf8>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4a0c      	ldr	r2, [pc, #48]	; (80021c8 <TIM_Base_SetConfig+0x124>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d103      	bne.n	80021a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	691a      	ldr	r2, [r3, #16]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	615a      	str	r2, [r3, #20]
}
 80021aa:	bf00      	nop
 80021ac:	3714      	adds	r7, #20
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	40010000 	.word	0x40010000
 80021bc:	40000400 	.word	0x40000400
 80021c0:	40000800 	.word	0x40000800
 80021c4:	40000c00 	.word	0x40000c00
 80021c8:	40010400 	.word	0x40010400
 80021cc:	40014000 	.word	0x40014000
 80021d0:	40014400 	.word	0x40014400
 80021d4:	40014800 	.word	0x40014800
 80021d8:	40001800 	.word	0x40001800
 80021dc:	40001c00 	.word	0x40001c00
 80021e0:	40002000 	.word	0x40002000

080021e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b087      	sub	sp, #28
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a1b      	ldr	r3, [r3, #32]
 80021f2:	f023 0201 	bic.w	r2, r3, #1
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a1b      	ldr	r3, [r3, #32]
 80021fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	699b      	ldr	r3, [r3, #24]
 800220a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002212:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f023 0303 	bic.w	r3, r3, #3
 800221a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68fa      	ldr	r2, [r7, #12]
 8002222:	4313      	orrs	r3, r2
 8002224:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	f023 0302 	bic.w	r3, r3, #2
 800222c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	697a      	ldr	r2, [r7, #20]
 8002234:	4313      	orrs	r3, r2
 8002236:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4a20      	ldr	r2, [pc, #128]	; (80022bc <TIM_OC1_SetConfig+0xd8>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d003      	beq.n	8002248 <TIM_OC1_SetConfig+0x64>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	4a1f      	ldr	r2, [pc, #124]	; (80022c0 <TIM_OC1_SetConfig+0xdc>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d10c      	bne.n	8002262 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	f023 0308 	bic.w	r3, r3, #8
 800224e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	697a      	ldr	r2, [r7, #20]
 8002256:	4313      	orrs	r3, r2
 8002258:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	f023 0304 	bic.w	r3, r3, #4
 8002260:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a15      	ldr	r2, [pc, #84]	; (80022bc <TIM_OC1_SetConfig+0xd8>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d003      	beq.n	8002272 <TIM_OC1_SetConfig+0x8e>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a14      	ldr	r2, [pc, #80]	; (80022c0 <TIM_OC1_SetConfig+0xdc>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d111      	bne.n	8002296 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002278:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002280:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	695b      	ldr	r3, [r3, #20]
 8002286:	693a      	ldr	r2, [r7, #16]
 8002288:	4313      	orrs	r3, r2
 800228a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	693a      	ldr	r2, [r7, #16]
 8002292:	4313      	orrs	r3, r2
 8002294:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685a      	ldr	r2, [r3, #4]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	697a      	ldr	r2, [r7, #20]
 80022ae:	621a      	str	r2, [r3, #32]
}
 80022b0:	bf00      	nop
 80022b2:	371c      	adds	r7, #28
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr
 80022bc:	40010000 	.word	0x40010000
 80022c0:	40010400 	.word	0x40010400

080022c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b087      	sub	sp, #28
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a1b      	ldr	r3, [r3, #32]
 80022d2:	f023 0210 	bic.w	r2, r3, #16
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a1b      	ldr	r3, [r3, #32]
 80022de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	699b      	ldr	r3, [r3, #24]
 80022ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	021b      	lsls	r3, r3, #8
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	4313      	orrs	r3, r2
 8002306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	f023 0320 	bic.w	r3, r3, #32
 800230e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	011b      	lsls	r3, r3, #4
 8002316:	697a      	ldr	r2, [r7, #20]
 8002318:	4313      	orrs	r3, r2
 800231a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4a22      	ldr	r2, [pc, #136]	; (80023a8 <TIM_OC2_SetConfig+0xe4>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d003      	beq.n	800232c <TIM_OC2_SetConfig+0x68>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	4a21      	ldr	r2, [pc, #132]	; (80023ac <TIM_OC2_SetConfig+0xe8>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d10d      	bne.n	8002348 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002332:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	011b      	lsls	r3, r3, #4
 800233a:	697a      	ldr	r2, [r7, #20]
 800233c:	4313      	orrs	r3, r2
 800233e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002346:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4a17      	ldr	r2, [pc, #92]	; (80023a8 <TIM_OC2_SetConfig+0xe4>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d003      	beq.n	8002358 <TIM_OC2_SetConfig+0x94>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a16      	ldr	r2, [pc, #88]	; (80023ac <TIM_OC2_SetConfig+0xe8>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d113      	bne.n	8002380 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800235e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002366:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	695b      	ldr	r3, [r3, #20]
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	4313      	orrs	r3, r2
 8002372:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	4313      	orrs	r3, r2
 800237e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	68fa      	ldr	r2, [r7, #12]
 800238a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685a      	ldr	r2, [r3, #4]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	697a      	ldr	r2, [r7, #20]
 8002398:	621a      	str	r2, [r3, #32]
}
 800239a:	bf00      	nop
 800239c:	371c      	adds	r7, #28
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	40010000 	.word	0x40010000
 80023ac:	40010400 	.word	0x40010400

080023b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b087      	sub	sp, #28
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a1b      	ldr	r3, [r3, #32]
 80023be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a1b      	ldr	r3, [r3, #32]
 80023ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	69db      	ldr	r3, [r3, #28]
 80023d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f023 0303 	bic.w	r3, r3, #3
 80023e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80023f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	021b      	lsls	r3, r3, #8
 8002400:	697a      	ldr	r2, [r7, #20]
 8002402:	4313      	orrs	r3, r2
 8002404:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a21      	ldr	r2, [pc, #132]	; (8002490 <TIM_OC3_SetConfig+0xe0>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d003      	beq.n	8002416 <TIM_OC3_SetConfig+0x66>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a20      	ldr	r2, [pc, #128]	; (8002494 <TIM_OC3_SetConfig+0xe4>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d10d      	bne.n	8002432 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800241c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	021b      	lsls	r3, r3, #8
 8002424:	697a      	ldr	r2, [r7, #20]
 8002426:	4313      	orrs	r3, r2
 8002428:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002430:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a16      	ldr	r2, [pc, #88]	; (8002490 <TIM_OC3_SetConfig+0xe0>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d003      	beq.n	8002442 <TIM_OC3_SetConfig+0x92>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a15      	ldr	r2, [pc, #84]	; (8002494 <TIM_OC3_SetConfig+0xe4>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d113      	bne.n	800246a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002448:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002450:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	695b      	ldr	r3, [r3, #20]
 8002456:	011b      	lsls	r3, r3, #4
 8002458:	693a      	ldr	r2, [r7, #16]
 800245a:	4313      	orrs	r3, r2
 800245c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	699b      	ldr	r3, [r3, #24]
 8002462:	011b      	lsls	r3, r3, #4
 8002464:	693a      	ldr	r2, [r7, #16]
 8002466:	4313      	orrs	r3, r2
 8002468:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	693a      	ldr	r2, [r7, #16]
 800246e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	68fa      	ldr	r2, [r7, #12]
 8002474:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685a      	ldr	r2, [r3, #4]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	697a      	ldr	r2, [r7, #20]
 8002482:	621a      	str	r2, [r3, #32]
}
 8002484:	bf00      	nop
 8002486:	371c      	adds	r7, #28
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr
 8002490:	40010000 	.word	0x40010000
 8002494:	40010400 	.word	0x40010400

08002498 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002498:	b480      	push	{r7}
 800249a:	b087      	sub	sp, #28
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a1b      	ldr	r3, [r3, #32]
 80024a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6a1b      	ldr	r3, [r3, #32]
 80024b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	69db      	ldr	r3, [r3, #28]
 80024be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	021b      	lsls	r3, r3, #8
 80024d6:	68fa      	ldr	r2, [r7, #12]
 80024d8:	4313      	orrs	r3, r2
 80024da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80024e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	031b      	lsls	r3, r3, #12
 80024ea:	693a      	ldr	r2, [r7, #16]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	4a12      	ldr	r2, [pc, #72]	; (800253c <TIM_OC4_SetConfig+0xa4>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d003      	beq.n	8002500 <TIM_OC4_SetConfig+0x68>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4a11      	ldr	r2, [pc, #68]	; (8002540 <TIM_OC4_SetConfig+0xa8>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d109      	bne.n	8002514 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002506:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	695b      	ldr	r3, [r3, #20]
 800250c:	019b      	lsls	r3, r3, #6
 800250e:	697a      	ldr	r2, [r7, #20]
 8002510:	4313      	orrs	r3, r2
 8002512:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	697a      	ldr	r2, [r7, #20]
 8002518:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	68fa      	ldr	r2, [r7, #12]
 800251e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685a      	ldr	r2, [r3, #4]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	621a      	str	r2, [r3, #32]
}
 800252e:	bf00      	nop
 8002530:	371c      	adds	r7, #28
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	40010000 	.word	0x40010000
 8002540:	40010400 	.word	0x40010400

08002544 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002544:	b480      	push	{r7}
 8002546:	b087      	sub	sp, #28
 8002548:	af00      	add	r7, sp, #0
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6a1b      	ldr	r3, [r3, #32]
 8002554:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6a1b      	ldr	r3, [r3, #32]
 800255a:	f023 0201 	bic.w	r2, r3, #1
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800256e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	011b      	lsls	r3, r3, #4
 8002574:	693a      	ldr	r2, [r7, #16]
 8002576:	4313      	orrs	r3, r2
 8002578:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	f023 030a 	bic.w	r3, r3, #10
 8002580:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002582:	697a      	ldr	r2, [r7, #20]
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	4313      	orrs	r3, r2
 8002588:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	693a      	ldr	r2, [r7, #16]
 800258e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	697a      	ldr	r2, [r7, #20]
 8002594:	621a      	str	r2, [r3, #32]
}
 8002596:	bf00      	nop
 8002598:	371c      	adds	r7, #28
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr

080025a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025a2:	b480      	push	{r7}
 80025a4:	b087      	sub	sp, #28
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	60f8      	str	r0, [r7, #12]
 80025aa:	60b9      	str	r1, [r7, #8]
 80025ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6a1b      	ldr	r3, [r3, #32]
 80025b2:	f023 0210 	bic.w	r2, r3, #16
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	699b      	ldr	r3, [r3, #24]
 80025be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6a1b      	ldr	r3, [r3, #32]
 80025c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80025cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	031b      	lsls	r3, r3, #12
 80025d2:	697a      	ldr	r2, [r7, #20]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80025de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	011b      	lsls	r3, r3, #4
 80025e4:	693a      	ldr	r2, [r7, #16]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	697a      	ldr	r2, [r7, #20]
 80025ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	693a      	ldr	r2, [r7, #16]
 80025f4:	621a      	str	r2, [r3, #32]
}
 80025f6:	bf00      	nop
 80025f8:	371c      	adds	r7, #28
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr

08002602 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002602:	b480      	push	{r7}
 8002604:	b085      	sub	sp, #20
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
 800260a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002618:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800261a:	683a      	ldr	r2, [r7, #0]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	4313      	orrs	r3, r2
 8002620:	f043 0307 	orr.w	r3, r3, #7
 8002624:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	68fa      	ldr	r2, [r7, #12]
 800262a:	609a      	str	r2, [r3, #8]
}
 800262c:	bf00      	nop
 800262e:	3714      	adds	r7, #20
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002638:	b480      	push	{r7}
 800263a:	b087      	sub	sp, #28
 800263c:	af00      	add	r7, sp, #0
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	607a      	str	r2, [r7, #4]
 8002644:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002652:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	021a      	lsls	r2, r3, #8
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	431a      	orrs	r2, r3
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	4313      	orrs	r3, r2
 8002660:	697a      	ldr	r2, [r7, #20]
 8002662:	4313      	orrs	r3, r2
 8002664:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	697a      	ldr	r2, [r7, #20]
 800266a:	609a      	str	r2, [r3, #8]
}
 800266c:	bf00      	nop
 800266e:	371c      	adds	r7, #28
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002678:	b480      	push	{r7}
 800267a:	b087      	sub	sp, #28
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	f003 031f 	and.w	r3, r3, #31
 800268a:	2201      	movs	r2, #1
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6a1a      	ldr	r2, [r3, #32]
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	43db      	mvns	r3, r3
 800269a:	401a      	ands	r2, r3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6a1a      	ldr	r2, [r3, #32]
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	f003 031f 	and.w	r3, r3, #31
 80026aa:	6879      	ldr	r1, [r7, #4]
 80026ac:	fa01 f303 	lsl.w	r3, r1, r3
 80026b0:	431a      	orrs	r2, r3
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	621a      	str	r2, [r3, #32]
}
 80026b6:	bf00      	nop
 80026b8:	371c      	adds	r7, #28
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
	...

080026c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b085      	sub	sp, #20
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d101      	bne.n	80026dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80026d8:	2302      	movs	r3, #2
 80026da:	e05a      	b.n	8002792 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2202      	movs	r2, #2
 80026e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002702:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	68fa      	ldr	r2, [r7, #12]
 800270a:	4313      	orrs	r3, r2
 800270c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68fa      	ldr	r2, [r7, #12]
 8002714:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a21      	ldr	r2, [pc, #132]	; (80027a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d022      	beq.n	8002766 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002728:	d01d      	beq.n	8002766 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a1d      	ldr	r2, [pc, #116]	; (80027a4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d018      	beq.n	8002766 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a1b      	ldr	r2, [pc, #108]	; (80027a8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d013      	beq.n	8002766 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a1a      	ldr	r2, [pc, #104]	; (80027ac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d00e      	beq.n	8002766 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a18      	ldr	r2, [pc, #96]	; (80027b0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d009      	beq.n	8002766 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a17      	ldr	r2, [pc, #92]	; (80027b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d004      	beq.n	8002766 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a15      	ldr	r2, [pc, #84]	; (80027b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d10c      	bne.n	8002780 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800276c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	68ba      	ldr	r2, [r7, #8]
 8002774:	4313      	orrs	r3, r2
 8002776:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	68ba      	ldr	r2, [r7, #8]
 800277e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2201      	movs	r2, #1
 8002784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3714      	adds	r7, #20
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	40010000 	.word	0x40010000
 80027a4:	40000400 	.word	0x40000400
 80027a8:	40000800 	.word	0x40000800
 80027ac:	40000c00 	.word	0x40000c00
 80027b0:	40010400 	.word	0x40010400
 80027b4:	40014000 	.word	0x40014000
 80027b8:	40001800 	.word	0x40001800

080027bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d101      	bne.n	80027ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e03f      	b.n	800284e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d106      	bne.n	80027e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f001 fbc2 	bl	8003f6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2224      	movs	r2, #36	; 0x24
 80027ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68da      	ldr	r2, [r3, #12]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f000 fbf1 	bl	8002fe8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	691a      	ldr	r2, [r3, #16]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002814:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	695a      	ldr	r2, [r3, #20]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002824:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68da      	ldr	r2, [r3, #12]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002834:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2220      	movs	r2, #32
 8002840:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2220      	movs	r2, #32
 8002848:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002856:	b580      	push	{r7, lr}
 8002858:	b088      	sub	sp, #32
 800285a:	af02      	add	r7, sp, #8
 800285c:	60f8      	str	r0, [r7, #12]
 800285e:	60b9      	str	r1, [r7, #8]
 8002860:	603b      	str	r3, [r7, #0]
 8002862:	4613      	mov	r3, r2
 8002864:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002866:	2300      	movs	r3, #0
 8002868:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b20      	cmp	r3, #32
 8002874:	f040 8083 	bne.w	800297e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d002      	beq.n	8002884 <HAL_UART_Transmit+0x2e>
 800287e:	88fb      	ldrh	r3, [r7, #6]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d101      	bne.n	8002888 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e07b      	b.n	8002980 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800288e:	2b01      	cmp	r3, #1
 8002890:	d101      	bne.n	8002896 <HAL_UART_Transmit+0x40>
 8002892:	2302      	movs	r3, #2
 8002894:	e074      	b.n	8002980 <HAL_UART_Transmit+0x12a>
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2201      	movs	r2, #1
 800289a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2200      	movs	r2, #0
 80028a2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2221      	movs	r2, #33	; 0x21
 80028a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80028ac:	f7fd fe90 	bl	80005d0 <HAL_GetTick>
 80028b0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	88fa      	ldrh	r2, [r7, #6]
 80028b6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	88fa      	ldrh	r2, [r7, #6]
 80028bc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80028c6:	e042      	b.n	800294e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	3b01      	subs	r3, #1
 80028d0:	b29a      	uxth	r2, r3
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028de:	d122      	bne.n	8002926 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	9300      	str	r3, [sp, #0]
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	2200      	movs	r2, #0
 80028e8:	2180      	movs	r1, #128	; 0x80
 80028ea:	68f8      	ldr	r0, [r7, #12]
 80028ec:	f000 fa10 	bl	8002d10 <UART_WaitOnFlagUntilTimeout>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e042      	b.n	8002980 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	881b      	ldrh	r3, [r3, #0]
 8002902:	461a      	mov	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800290c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d103      	bne.n	800291e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	3302      	adds	r3, #2
 800291a:	60bb      	str	r3, [r7, #8]
 800291c:	e017      	b.n	800294e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	3301      	adds	r3, #1
 8002922:	60bb      	str	r3, [r7, #8]
 8002924:	e013      	b.n	800294e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	9300      	str	r3, [sp, #0]
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	2200      	movs	r2, #0
 800292e:	2180      	movs	r1, #128	; 0x80
 8002930:	68f8      	ldr	r0, [r7, #12]
 8002932:	f000 f9ed 	bl	8002d10 <UART_WaitOnFlagUntilTimeout>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d001      	beq.n	8002940 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e01f      	b.n	8002980 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	1c5a      	adds	r2, r3, #1
 8002944:	60ba      	str	r2, [r7, #8]
 8002946:	781a      	ldrb	r2, [r3, #0]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002952:	b29b      	uxth	r3, r3
 8002954:	2b00      	cmp	r3, #0
 8002956:	d1b7      	bne.n	80028c8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	9300      	str	r3, [sp, #0]
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	2200      	movs	r2, #0
 8002960:	2140      	movs	r1, #64	; 0x40
 8002962:	68f8      	ldr	r0, [r7, #12]
 8002964:	f000 f9d4 	bl	8002d10 <UART_WaitOnFlagUntilTimeout>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e006      	b.n	8002980 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2220      	movs	r2, #32
 8002976:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800297a:	2300      	movs	r3, #0
 800297c:	e000      	b.n	8002980 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800297e:	2302      	movs	r3, #2
  }
}
 8002980:	4618      	mov	r0, r3
 8002982:	3718      	adds	r7, #24
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}

08002988 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b088      	sub	sp, #32
 800298c:	af02      	add	r7, sp, #8
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	603b      	str	r3, [r7, #0]
 8002994:	4613      	mov	r3, r2
 8002996:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002998:	2300      	movs	r3, #0
 800299a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	2b20      	cmp	r3, #32
 80029a6:	f040 8090 	bne.w	8002aca <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d002      	beq.n	80029b6 <HAL_UART_Receive+0x2e>
 80029b0:	88fb      	ldrh	r3, [r7, #6]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e088      	b.n	8002acc <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d101      	bne.n	80029c8 <HAL_UART_Receive+0x40>
 80029c4:	2302      	movs	r3, #2
 80029c6:	e081      	b.n	8002acc <HAL_UART_Receive+0x144>
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2222      	movs	r2, #34	; 0x22
 80029da:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80029de:	f7fd fdf7 	bl	80005d0 <HAL_GetTick>
 80029e2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	88fa      	ldrh	r2, [r7, #6]
 80029e8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	88fa      	ldrh	r2, [r7, #6]
 80029ee:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80029f8:	e05c      	b.n	8002ab4 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	3b01      	subs	r3, #1
 8002a02:	b29a      	uxth	r2, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a10:	d12b      	bne.n	8002a6a <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	9300      	str	r3, [sp, #0]
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	2120      	movs	r1, #32
 8002a1c:	68f8      	ldr	r0, [r7, #12]
 8002a1e:	f000 f977 	bl	8002d10 <UART_WaitOnFlagUntilTimeout>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d001      	beq.n	8002a2c <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e04f      	b.n	8002acc <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	691b      	ldr	r3, [r3, #16]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d10c      	bne.n	8002a52 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a44:	b29a      	uxth	r2, r3
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	3302      	adds	r3, #2
 8002a4e:	60bb      	str	r3, [r7, #8]
 8002a50:	e030      	b.n	8002ab4 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	b29a      	uxth	r2, r3
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	3301      	adds	r3, #1
 8002a66:	60bb      	str	r3, [r7, #8]
 8002a68:	e024      	b.n	8002ab4 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	9300      	str	r3, [sp, #0]
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	2200      	movs	r2, #0
 8002a72:	2120      	movs	r1, #32
 8002a74:	68f8      	ldr	r0, [r7, #12]
 8002a76:	f000 f94b 	bl	8002d10 <UART_WaitOnFlagUntilTimeout>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d001      	beq.n	8002a84 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e023      	b.n	8002acc <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	691b      	ldr	r3, [r3, #16]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d108      	bne.n	8002a9e <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	6859      	ldr	r1, [r3, #4]
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	1c5a      	adds	r2, r3, #1
 8002a96:	60ba      	str	r2, [r7, #8]
 8002a98:	b2ca      	uxtb	r2, r1
 8002a9a:	701a      	strb	r2, [r3, #0]
 8002a9c:	e00a      	b.n	8002ab4 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	b2da      	uxtb	r2, r3
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	1c59      	adds	r1, r3, #1
 8002aaa:	60b9      	str	r1, [r7, #8]
 8002aac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002ab0:	b2d2      	uxtb	r2, r2
 8002ab2:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d19d      	bne.n	80029fa <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2220      	movs	r2, #32
 8002ac2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	e000      	b.n	8002acc <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8002aca:	2302      	movs	r3, #2
  }
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3718      	adds	r7, #24
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b088      	sub	sp, #32
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	695b      	ldr	r3, [r3, #20]
 8002af2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002af4:	2300      	movs	r3, #0
 8002af6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002af8:	2300      	movs	r3, #0
 8002afa:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	f003 030f 	and.w	r3, r3, #15
 8002b02:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d10d      	bne.n	8002b26 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	f003 0320 	and.w	r3, r3, #32
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d008      	beq.n	8002b26 <HAL_UART_IRQHandler+0x52>
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	f003 0320 	and.w	r3, r3, #32
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d003      	beq.n	8002b26 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 f9e0 	bl	8002ee4 <UART_Receive_IT>
      return;
 8002b24:	e0d1      	b.n	8002cca <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	f000 80b0 	beq.w	8002c8e <HAL_UART_IRQHandler+0x1ba>
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	f003 0301 	and.w	r3, r3, #1
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d105      	bne.n	8002b44 <HAL_UART_IRQHandler+0x70>
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	f000 80a5 	beq.w	8002c8e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00a      	beq.n	8002b64 <HAL_UART_IRQHandler+0x90>
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d005      	beq.n	8002b64 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b5c:	f043 0201 	orr.w	r2, r3, #1
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	f003 0304 	and.w	r3, r3, #4
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d00a      	beq.n	8002b84 <HAL_UART_IRQHandler+0xb0>
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	f003 0301 	and.w	r3, r3, #1
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d005      	beq.n	8002b84 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b7c:	f043 0202 	orr.w	r2, r3, #2
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d00a      	beq.n	8002ba4 <HAL_UART_IRQHandler+0xd0>
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	f003 0301 	and.w	r3, r3, #1
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d005      	beq.n	8002ba4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b9c:	f043 0204 	orr.w	r2, r3, #4
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	f003 0308 	and.w	r3, r3, #8
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00f      	beq.n	8002bce <HAL_UART_IRQHandler+0xfa>
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	f003 0320 	and.w	r3, r3, #32
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d104      	bne.n	8002bc2 <HAL_UART_IRQHandler+0xee>
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d005      	beq.n	8002bce <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bc6:	f043 0208 	orr.w	r2, r3, #8
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d078      	beq.n	8002cc8 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	f003 0320 	and.w	r3, r3, #32
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d007      	beq.n	8002bf0 <HAL_UART_IRQHandler+0x11c>
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	f003 0320 	and.w	r3, r3, #32
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d002      	beq.n	8002bf0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 f97a 	bl	8002ee4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	695b      	ldr	r3, [r3, #20]
 8002bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bfa:	2b40      	cmp	r3, #64	; 0x40
 8002bfc:	bf0c      	ite	eq
 8002bfe:	2301      	moveq	r3, #1
 8002c00:	2300      	movne	r3, #0
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c0a:	f003 0308 	and.w	r3, r3, #8
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d102      	bne.n	8002c18 <HAL_UART_IRQHandler+0x144>
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d031      	beq.n	8002c7c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f000 f8c3 	bl	8002da4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	695b      	ldr	r3, [r3, #20]
 8002c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c28:	2b40      	cmp	r3, #64	; 0x40
 8002c2a:	d123      	bne.n	8002c74 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	695a      	ldr	r2, [r3, #20]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c3a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d013      	beq.n	8002c6c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c48:	4a21      	ldr	r2, [pc, #132]	; (8002cd0 <HAL_UART_IRQHandler+0x1fc>)
 8002c4a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7fd feab 	bl	80009ac <HAL_DMA_Abort_IT>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d016      	beq.n	8002c8a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c66:	4610      	mov	r0, r2
 8002c68:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c6a:	e00e      	b.n	8002c8a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f000 f845 	bl	8002cfc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c72:	e00a      	b.n	8002c8a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f000 f841 	bl	8002cfc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c7a:	e006      	b.n	8002c8a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f000 f83d 	bl	8002cfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002c88:	e01e      	b.n	8002cc8 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c8a:	bf00      	nop
    return;
 8002c8c:	e01c      	b.n	8002cc8 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d008      	beq.n	8002caa <HAL_UART_IRQHandler+0x1d6>
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d003      	beq.n	8002caa <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 f8b0 	bl	8002e08 <UART_Transmit_IT>
    return;
 8002ca8:	e00f      	b.n	8002cca <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d00a      	beq.n	8002cca <HAL_UART_IRQHandler+0x1f6>
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d005      	beq.n	8002cca <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f000 f8f8 	bl	8002eb4 <UART_EndTransmit_IT>
    return;
 8002cc4:	bf00      	nop
 8002cc6:	e000      	b.n	8002cca <HAL_UART_IRQHandler+0x1f6>
    return;
 8002cc8:	bf00      	nop
  }
}
 8002cca:	3720      	adds	r7, #32
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	08002de1 	.word	0x08002de1

08002cd4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002cdc:	bf00      	nop
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 // HAL_Delay(500);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002cf0:	bf00      	nop
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002d04:	bf00      	nop
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	603b      	str	r3, [r7, #0]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d20:	e02c      	b.n	8002d7c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d28:	d028      	beq.n	8002d7c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d007      	beq.n	8002d40 <UART_WaitOnFlagUntilTimeout+0x30>
 8002d30:	f7fd fc4e 	bl	80005d0 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	69ba      	ldr	r2, [r7, #24]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d21d      	bcs.n	8002d7c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	68da      	ldr	r2, [r3, #12]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002d4e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	695a      	ldr	r2, [r3, #20]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f022 0201 	bic.w	r2, r2, #1
 8002d5e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2220      	movs	r2, #32
 8002d64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2220      	movs	r2, #32
 8002d6c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e00f      	b.n	8002d9c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	4013      	ands	r3, r2
 8002d86:	68ba      	ldr	r2, [r7, #8]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	bf0c      	ite	eq
 8002d8c:	2301      	moveq	r3, #1
 8002d8e:	2300      	movne	r3, #0
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	461a      	mov	r2, r3
 8002d94:	79fb      	ldrb	r3, [r7, #7]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d0c3      	beq.n	8002d22 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d9a:	2300      	movs	r3, #0
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3710      	adds	r7, #16
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68da      	ldr	r2, [r3, #12]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002dba:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	695a      	ldr	r2, [r3, #20]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f022 0201 	bic.w	r2, r2, #1
 8002dca:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2220      	movs	r2, #32
 8002dd0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002dd4:	bf00      	nop
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2200      	movs	r2, #0
 8002df2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2200      	movs	r2, #0
 8002df8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002dfa:	68f8      	ldr	r0, [r7, #12]
 8002dfc:	f7ff ff7e 	bl	8002cfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e00:	bf00      	nop
 8002e02:	3710      	adds	r7, #16
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b085      	sub	sp, #20
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	2b21      	cmp	r3, #33	; 0x21
 8002e1a:	d144      	bne.n	8002ea6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e24:	d11a      	bne.n	8002e5c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a1b      	ldr	r3, [r3, #32]
 8002e2a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	881b      	ldrh	r3, [r3, #0]
 8002e30:	461a      	mov	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e3a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	691b      	ldr	r3, [r3, #16]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d105      	bne.n	8002e50 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a1b      	ldr	r3, [r3, #32]
 8002e48:	1c9a      	adds	r2, r3, #2
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	621a      	str	r2, [r3, #32]
 8002e4e:	e00e      	b.n	8002e6e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a1b      	ldr	r3, [r3, #32]
 8002e54:	1c5a      	adds	r2, r3, #1
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	621a      	str	r2, [r3, #32]
 8002e5a:	e008      	b.n	8002e6e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a1b      	ldr	r3, [r3, #32]
 8002e60:	1c59      	adds	r1, r3, #1
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	6211      	str	r1, [r2, #32]
 8002e66:	781a      	ldrb	r2, [r3, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	3b01      	subs	r3, #1
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d10f      	bne.n	8002ea2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68da      	ldr	r2, [r3, #12]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e90:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	68da      	ldr	r2, [r3, #12]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ea0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	e000      	b.n	8002ea8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002ea6:	2302      	movs	r3, #2
  }
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3714      	adds	r7, #20
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68da      	ldr	r2, [r3, #12]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002eca:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2220      	movs	r2, #32
 8002ed0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f7ff fefd 	bl	8002cd4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002eda:	2300      	movs	r3, #0
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3708      	adds	r7, #8
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	2b22      	cmp	r3, #34	; 0x22
 8002ef6:	d171      	bne.n	8002fdc <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f00:	d123      	bne.n	8002f4a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f06:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	691b      	ldr	r3, [r3, #16]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d10e      	bne.n	8002f2e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f1c:	b29a      	uxth	r2, r3
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f26:	1c9a      	adds	r2, r3, #2
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	629a      	str	r2, [r3, #40]	; 0x28
 8002f2c:	e029      	b.n	8002f82 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	b29a      	uxth	r2, r3
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f42:	1c5a      	adds	r2, r3, #1
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	629a      	str	r2, [r3, #40]	; 0x28
 8002f48:	e01b      	b.n	8002f82 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d10a      	bne.n	8002f68 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	6858      	ldr	r0, [r3, #4]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f5c:	1c59      	adds	r1, r3, #1
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	6291      	str	r1, [r2, #40]	; 0x28
 8002f62:	b2c2      	uxtb	r2, r0
 8002f64:	701a      	strb	r2, [r3, #0]
 8002f66:	e00c      	b.n	8002f82 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	b2da      	uxtb	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f74:	1c58      	adds	r0, r3, #1
 8002f76:	6879      	ldr	r1, [r7, #4]
 8002f78:	6288      	str	r0, [r1, #40]	; 0x28
 8002f7a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002f7e:	b2d2      	uxtb	r2, r2
 8002f80:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	3b01      	subs	r3, #1
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	4619      	mov	r1, r3
 8002f90:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d120      	bne.n	8002fd8 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	68da      	ldr	r2, [r3, #12]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f022 0220 	bic.w	r2, r2, #32
 8002fa4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68da      	ldr	r2, [r3, #12]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fb4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	695a      	ldr	r2, [r3, #20]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f022 0201 	bic.w	r2, r2, #1
 8002fc4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2220      	movs	r2, #32
 8002fca:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f7ff fe8a 	bl	8002ce8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	e002      	b.n	8002fde <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	e000      	b.n	8002fde <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002fdc:	2302      	movs	r3, #2
  }
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3710      	adds	r7, #16
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
	...

08002fe8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fec:	b085      	sub	sp, #20
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	691b      	ldr	r3, [r3, #16]
 8002ff8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	68da      	ldr	r2, [r3, #12]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	430a      	orrs	r2, r1
 8003006:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	689a      	ldr	r2, [r3, #8]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	691b      	ldr	r3, [r3, #16]
 8003010:	431a      	orrs	r2, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	695b      	ldr	r3, [r3, #20]
 8003016:	431a      	orrs	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	69db      	ldr	r3, [r3, #28]
 800301c:	4313      	orrs	r3, r2
 800301e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800302a:	f023 030c 	bic.w	r3, r3, #12
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	6812      	ldr	r2, [r2, #0]
 8003032:	68f9      	ldr	r1, [r7, #12]
 8003034:	430b      	orrs	r3, r1
 8003036:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	699a      	ldr	r2, [r3, #24]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	430a      	orrs	r2, r1
 800304c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	69db      	ldr	r3, [r3, #28]
 8003052:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003056:	f040 818b 	bne.w	8003370 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4ac1      	ldr	r2, [pc, #772]	; (8003364 <UART_SetConfig+0x37c>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d005      	beq.n	8003070 <UART_SetConfig+0x88>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4abf      	ldr	r2, [pc, #764]	; (8003368 <UART_SetConfig+0x380>)
 800306a:	4293      	cmp	r3, r2
 800306c:	f040 80bd 	bne.w	80031ea <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003070:	f7fe f9aa 	bl	80013c8 <HAL_RCC_GetPCLK2Freq>
 8003074:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	461d      	mov	r5, r3
 800307a:	f04f 0600 	mov.w	r6, #0
 800307e:	46a8      	mov	r8, r5
 8003080:	46b1      	mov	r9, r6
 8003082:	eb18 0308 	adds.w	r3, r8, r8
 8003086:	eb49 0409 	adc.w	r4, r9, r9
 800308a:	4698      	mov	r8, r3
 800308c:	46a1      	mov	r9, r4
 800308e:	eb18 0805 	adds.w	r8, r8, r5
 8003092:	eb49 0906 	adc.w	r9, r9, r6
 8003096:	f04f 0100 	mov.w	r1, #0
 800309a:	f04f 0200 	mov.w	r2, #0
 800309e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80030a2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80030a6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80030aa:	4688      	mov	r8, r1
 80030ac:	4691      	mov	r9, r2
 80030ae:	eb18 0005 	adds.w	r0, r8, r5
 80030b2:	eb49 0106 	adc.w	r1, r9, r6
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	461d      	mov	r5, r3
 80030bc:	f04f 0600 	mov.w	r6, #0
 80030c0:	196b      	adds	r3, r5, r5
 80030c2:	eb46 0406 	adc.w	r4, r6, r6
 80030c6:	461a      	mov	r2, r3
 80030c8:	4623      	mov	r3, r4
 80030ca:	f7fd f89b 	bl	8000204 <__aeabi_uldivmod>
 80030ce:	4603      	mov	r3, r0
 80030d0:	460c      	mov	r4, r1
 80030d2:	461a      	mov	r2, r3
 80030d4:	4ba5      	ldr	r3, [pc, #660]	; (800336c <UART_SetConfig+0x384>)
 80030d6:	fba3 2302 	umull	r2, r3, r3, r2
 80030da:	095b      	lsrs	r3, r3, #5
 80030dc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	461d      	mov	r5, r3
 80030e4:	f04f 0600 	mov.w	r6, #0
 80030e8:	46a9      	mov	r9, r5
 80030ea:	46b2      	mov	sl, r6
 80030ec:	eb19 0309 	adds.w	r3, r9, r9
 80030f0:	eb4a 040a 	adc.w	r4, sl, sl
 80030f4:	4699      	mov	r9, r3
 80030f6:	46a2      	mov	sl, r4
 80030f8:	eb19 0905 	adds.w	r9, r9, r5
 80030fc:	eb4a 0a06 	adc.w	sl, sl, r6
 8003100:	f04f 0100 	mov.w	r1, #0
 8003104:	f04f 0200 	mov.w	r2, #0
 8003108:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800310c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003110:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003114:	4689      	mov	r9, r1
 8003116:	4692      	mov	sl, r2
 8003118:	eb19 0005 	adds.w	r0, r9, r5
 800311c:	eb4a 0106 	adc.w	r1, sl, r6
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	461d      	mov	r5, r3
 8003126:	f04f 0600 	mov.w	r6, #0
 800312a:	196b      	adds	r3, r5, r5
 800312c:	eb46 0406 	adc.w	r4, r6, r6
 8003130:	461a      	mov	r2, r3
 8003132:	4623      	mov	r3, r4
 8003134:	f7fd f866 	bl	8000204 <__aeabi_uldivmod>
 8003138:	4603      	mov	r3, r0
 800313a:	460c      	mov	r4, r1
 800313c:	461a      	mov	r2, r3
 800313e:	4b8b      	ldr	r3, [pc, #556]	; (800336c <UART_SetConfig+0x384>)
 8003140:	fba3 1302 	umull	r1, r3, r3, r2
 8003144:	095b      	lsrs	r3, r3, #5
 8003146:	2164      	movs	r1, #100	; 0x64
 8003148:	fb01 f303 	mul.w	r3, r1, r3
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	00db      	lsls	r3, r3, #3
 8003150:	3332      	adds	r3, #50	; 0x32
 8003152:	4a86      	ldr	r2, [pc, #536]	; (800336c <UART_SetConfig+0x384>)
 8003154:	fba2 2303 	umull	r2, r3, r2, r3
 8003158:	095b      	lsrs	r3, r3, #5
 800315a:	005b      	lsls	r3, r3, #1
 800315c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003160:	4498      	add	r8, r3
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	461d      	mov	r5, r3
 8003166:	f04f 0600 	mov.w	r6, #0
 800316a:	46a9      	mov	r9, r5
 800316c:	46b2      	mov	sl, r6
 800316e:	eb19 0309 	adds.w	r3, r9, r9
 8003172:	eb4a 040a 	adc.w	r4, sl, sl
 8003176:	4699      	mov	r9, r3
 8003178:	46a2      	mov	sl, r4
 800317a:	eb19 0905 	adds.w	r9, r9, r5
 800317e:	eb4a 0a06 	adc.w	sl, sl, r6
 8003182:	f04f 0100 	mov.w	r1, #0
 8003186:	f04f 0200 	mov.w	r2, #0
 800318a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800318e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003192:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003196:	4689      	mov	r9, r1
 8003198:	4692      	mov	sl, r2
 800319a:	eb19 0005 	adds.w	r0, r9, r5
 800319e:	eb4a 0106 	adc.w	r1, sl, r6
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	461d      	mov	r5, r3
 80031a8:	f04f 0600 	mov.w	r6, #0
 80031ac:	196b      	adds	r3, r5, r5
 80031ae:	eb46 0406 	adc.w	r4, r6, r6
 80031b2:	461a      	mov	r2, r3
 80031b4:	4623      	mov	r3, r4
 80031b6:	f7fd f825 	bl	8000204 <__aeabi_uldivmod>
 80031ba:	4603      	mov	r3, r0
 80031bc:	460c      	mov	r4, r1
 80031be:	461a      	mov	r2, r3
 80031c0:	4b6a      	ldr	r3, [pc, #424]	; (800336c <UART_SetConfig+0x384>)
 80031c2:	fba3 1302 	umull	r1, r3, r3, r2
 80031c6:	095b      	lsrs	r3, r3, #5
 80031c8:	2164      	movs	r1, #100	; 0x64
 80031ca:	fb01 f303 	mul.w	r3, r1, r3
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	00db      	lsls	r3, r3, #3
 80031d2:	3332      	adds	r3, #50	; 0x32
 80031d4:	4a65      	ldr	r2, [pc, #404]	; (800336c <UART_SetConfig+0x384>)
 80031d6:	fba2 2303 	umull	r2, r3, r2, r3
 80031da:	095b      	lsrs	r3, r3, #5
 80031dc:	f003 0207 	and.w	r2, r3, #7
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4442      	add	r2, r8
 80031e6:	609a      	str	r2, [r3, #8]
 80031e8:	e26f      	b.n	80036ca <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80031ea:	f7fe f8d9 	bl	80013a0 <HAL_RCC_GetPCLK1Freq>
 80031ee:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	461d      	mov	r5, r3
 80031f4:	f04f 0600 	mov.w	r6, #0
 80031f8:	46a8      	mov	r8, r5
 80031fa:	46b1      	mov	r9, r6
 80031fc:	eb18 0308 	adds.w	r3, r8, r8
 8003200:	eb49 0409 	adc.w	r4, r9, r9
 8003204:	4698      	mov	r8, r3
 8003206:	46a1      	mov	r9, r4
 8003208:	eb18 0805 	adds.w	r8, r8, r5
 800320c:	eb49 0906 	adc.w	r9, r9, r6
 8003210:	f04f 0100 	mov.w	r1, #0
 8003214:	f04f 0200 	mov.w	r2, #0
 8003218:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800321c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003220:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003224:	4688      	mov	r8, r1
 8003226:	4691      	mov	r9, r2
 8003228:	eb18 0005 	adds.w	r0, r8, r5
 800322c:	eb49 0106 	adc.w	r1, r9, r6
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	461d      	mov	r5, r3
 8003236:	f04f 0600 	mov.w	r6, #0
 800323a:	196b      	adds	r3, r5, r5
 800323c:	eb46 0406 	adc.w	r4, r6, r6
 8003240:	461a      	mov	r2, r3
 8003242:	4623      	mov	r3, r4
 8003244:	f7fc ffde 	bl	8000204 <__aeabi_uldivmod>
 8003248:	4603      	mov	r3, r0
 800324a:	460c      	mov	r4, r1
 800324c:	461a      	mov	r2, r3
 800324e:	4b47      	ldr	r3, [pc, #284]	; (800336c <UART_SetConfig+0x384>)
 8003250:	fba3 2302 	umull	r2, r3, r3, r2
 8003254:	095b      	lsrs	r3, r3, #5
 8003256:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	461d      	mov	r5, r3
 800325e:	f04f 0600 	mov.w	r6, #0
 8003262:	46a9      	mov	r9, r5
 8003264:	46b2      	mov	sl, r6
 8003266:	eb19 0309 	adds.w	r3, r9, r9
 800326a:	eb4a 040a 	adc.w	r4, sl, sl
 800326e:	4699      	mov	r9, r3
 8003270:	46a2      	mov	sl, r4
 8003272:	eb19 0905 	adds.w	r9, r9, r5
 8003276:	eb4a 0a06 	adc.w	sl, sl, r6
 800327a:	f04f 0100 	mov.w	r1, #0
 800327e:	f04f 0200 	mov.w	r2, #0
 8003282:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003286:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800328a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800328e:	4689      	mov	r9, r1
 8003290:	4692      	mov	sl, r2
 8003292:	eb19 0005 	adds.w	r0, r9, r5
 8003296:	eb4a 0106 	adc.w	r1, sl, r6
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	461d      	mov	r5, r3
 80032a0:	f04f 0600 	mov.w	r6, #0
 80032a4:	196b      	adds	r3, r5, r5
 80032a6:	eb46 0406 	adc.w	r4, r6, r6
 80032aa:	461a      	mov	r2, r3
 80032ac:	4623      	mov	r3, r4
 80032ae:	f7fc ffa9 	bl	8000204 <__aeabi_uldivmod>
 80032b2:	4603      	mov	r3, r0
 80032b4:	460c      	mov	r4, r1
 80032b6:	461a      	mov	r2, r3
 80032b8:	4b2c      	ldr	r3, [pc, #176]	; (800336c <UART_SetConfig+0x384>)
 80032ba:	fba3 1302 	umull	r1, r3, r3, r2
 80032be:	095b      	lsrs	r3, r3, #5
 80032c0:	2164      	movs	r1, #100	; 0x64
 80032c2:	fb01 f303 	mul.w	r3, r1, r3
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	00db      	lsls	r3, r3, #3
 80032ca:	3332      	adds	r3, #50	; 0x32
 80032cc:	4a27      	ldr	r2, [pc, #156]	; (800336c <UART_SetConfig+0x384>)
 80032ce:	fba2 2303 	umull	r2, r3, r2, r3
 80032d2:	095b      	lsrs	r3, r3, #5
 80032d4:	005b      	lsls	r3, r3, #1
 80032d6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80032da:	4498      	add	r8, r3
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	461d      	mov	r5, r3
 80032e0:	f04f 0600 	mov.w	r6, #0
 80032e4:	46a9      	mov	r9, r5
 80032e6:	46b2      	mov	sl, r6
 80032e8:	eb19 0309 	adds.w	r3, r9, r9
 80032ec:	eb4a 040a 	adc.w	r4, sl, sl
 80032f0:	4699      	mov	r9, r3
 80032f2:	46a2      	mov	sl, r4
 80032f4:	eb19 0905 	adds.w	r9, r9, r5
 80032f8:	eb4a 0a06 	adc.w	sl, sl, r6
 80032fc:	f04f 0100 	mov.w	r1, #0
 8003300:	f04f 0200 	mov.w	r2, #0
 8003304:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003308:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800330c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003310:	4689      	mov	r9, r1
 8003312:	4692      	mov	sl, r2
 8003314:	eb19 0005 	adds.w	r0, r9, r5
 8003318:	eb4a 0106 	adc.w	r1, sl, r6
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	461d      	mov	r5, r3
 8003322:	f04f 0600 	mov.w	r6, #0
 8003326:	196b      	adds	r3, r5, r5
 8003328:	eb46 0406 	adc.w	r4, r6, r6
 800332c:	461a      	mov	r2, r3
 800332e:	4623      	mov	r3, r4
 8003330:	f7fc ff68 	bl	8000204 <__aeabi_uldivmod>
 8003334:	4603      	mov	r3, r0
 8003336:	460c      	mov	r4, r1
 8003338:	461a      	mov	r2, r3
 800333a:	4b0c      	ldr	r3, [pc, #48]	; (800336c <UART_SetConfig+0x384>)
 800333c:	fba3 1302 	umull	r1, r3, r3, r2
 8003340:	095b      	lsrs	r3, r3, #5
 8003342:	2164      	movs	r1, #100	; 0x64
 8003344:	fb01 f303 	mul.w	r3, r1, r3
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	00db      	lsls	r3, r3, #3
 800334c:	3332      	adds	r3, #50	; 0x32
 800334e:	4a07      	ldr	r2, [pc, #28]	; (800336c <UART_SetConfig+0x384>)
 8003350:	fba2 2303 	umull	r2, r3, r2, r3
 8003354:	095b      	lsrs	r3, r3, #5
 8003356:	f003 0207 	and.w	r2, r3, #7
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4442      	add	r2, r8
 8003360:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003362:	e1b2      	b.n	80036ca <UART_SetConfig+0x6e2>
 8003364:	40011000 	.word	0x40011000
 8003368:	40011400 	.word	0x40011400
 800336c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4ad7      	ldr	r2, [pc, #860]	; (80036d4 <UART_SetConfig+0x6ec>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d005      	beq.n	8003386 <UART_SetConfig+0x39e>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4ad6      	ldr	r2, [pc, #856]	; (80036d8 <UART_SetConfig+0x6f0>)
 8003380:	4293      	cmp	r3, r2
 8003382:	f040 80d1 	bne.w	8003528 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003386:	f7fe f81f 	bl	80013c8 <HAL_RCC_GetPCLK2Freq>
 800338a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	469a      	mov	sl, r3
 8003390:	f04f 0b00 	mov.w	fp, #0
 8003394:	46d0      	mov	r8, sl
 8003396:	46d9      	mov	r9, fp
 8003398:	eb18 0308 	adds.w	r3, r8, r8
 800339c:	eb49 0409 	adc.w	r4, r9, r9
 80033a0:	4698      	mov	r8, r3
 80033a2:	46a1      	mov	r9, r4
 80033a4:	eb18 080a 	adds.w	r8, r8, sl
 80033a8:	eb49 090b 	adc.w	r9, r9, fp
 80033ac:	f04f 0100 	mov.w	r1, #0
 80033b0:	f04f 0200 	mov.w	r2, #0
 80033b4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80033b8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80033bc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80033c0:	4688      	mov	r8, r1
 80033c2:	4691      	mov	r9, r2
 80033c4:	eb1a 0508 	adds.w	r5, sl, r8
 80033c8:	eb4b 0609 	adc.w	r6, fp, r9
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	4619      	mov	r1, r3
 80033d2:	f04f 0200 	mov.w	r2, #0
 80033d6:	f04f 0300 	mov.w	r3, #0
 80033da:	f04f 0400 	mov.w	r4, #0
 80033de:	0094      	lsls	r4, r2, #2
 80033e0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80033e4:	008b      	lsls	r3, r1, #2
 80033e6:	461a      	mov	r2, r3
 80033e8:	4623      	mov	r3, r4
 80033ea:	4628      	mov	r0, r5
 80033ec:	4631      	mov	r1, r6
 80033ee:	f7fc ff09 	bl	8000204 <__aeabi_uldivmod>
 80033f2:	4603      	mov	r3, r0
 80033f4:	460c      	mov	r4, r1
 80033f6:	461a      	mov	r2, r3
 80033f8:	4bb8      	ldr	r3, [pc, #736]	; (80036dc <UART_SetConfig+0x6f4>)
 80033fa:	fba3 2302 	umull	r2, r3, r3, r2
 80033fe:	095b      	lsrs	r3, r3, #5
 8003400:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	469b      	mov	fp, r3
 8003408:	f04f 0c00 	mov.w	ip, #0
 800340c:	46d9      	mov	r9, fp
 800340e:	46e2      	mov	sl, ip
 8003410:	eb19 0309 	adds.w	r3, r9, r9
 8003414:	eb4a 040a 	adc.w	r4, sl, sl
 8003418:	4699      	mov	r9, r3
 800341a:	46a2      	mov	sl, r4
 800341c:	eb19 090b 	adds.w	r9, r9, fp
 8003420:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003424:	f04f 0100 	mov.w	r1, #0
 8003428:	f04f 0200 	mov.w	r2, #0
 800342c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003430:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003434:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003438:	4689      	mov	r9, r1
 800343a:	4692      	mov	sl, r2
 800343c:	eb1b 0509 	adds.w	r5, fp, r9
 8003440:	eb4c 060a 	adc.w	r6, ip, sl
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	4619      	mov	r1, r3
 800344a:	f04f 0200 	mov.w	r2, #0
 800344e:	f04f 0300 	mov.w	r3, #0
 8003452:	f04f 0400 	mov.w	r4, #0
 8003456:	0094      	lsls	r4, r2, #2
 8003458:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800345c:	008b      	lsls	r3, r1, #2
 800345e:	461a      	mov	r2, r3
 8003460:	4623      	mov	r3, r4
 8003462:	4628      	mov	r0, r5
 8003464:	4631      	mov	r1, r6
 8003466:	f7fc fecd 	bl	8000204 <__aeabi_uldivmod>
 800346a:	4603      	mov	r3, r0
 800346c:	460c      	mov	r4, r1
 800346e:	461a      	mov	r2, r3
 8003470:	4b9a      	ldr	r3, [pc, #616]	; (80036dc <UART_SetConfig+0x6f4>)
 8003472:	fba3 1302 	umull	r1, r3, r3, r2
 8003476:	095b      	lsrs	r3, r3, #5
 8003478:	2164      	movs	r1, #100	; 0x64
 800347a:	fb01 f303 	mul.w	r3, r1, r3
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	011b      	lsls	r3, r3, #4
 8003482:	3332      	adds	r3, #50	; 0x32
 8003484:	4a95      	ldr	r2, [pc, #596]	; (80036dc <UART_SetConfig+0x6f4>)
 8003486:	fba2 2303 	umull	r2, r3, r2, r3
 800348a:	095b      	lsrs	r3, r3, #5
 800348c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003490:	4498      	add	r8, r3
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	469b      	mov	fp, r3
 8003496:	f04f 0c00 	mov.w	ip, #0
 800349a:	46d9      	mov	r9, fp
 800349c:	46e2      	mov	sl, ip
 800349e:	eb19 0309 	adds.w	r3, r9, r9
 80034a2:	eb4a 040a 	adc.w	r4, sl, sl
 80034a6:	4699      	mov	r9, r3
 80034a8:	46a2      	mov	sl, r4
 80034aa:	eb19 090b 	adds.w	r9, r9, fp
 80034ae:	eb4a 0a0c 	adc.w	sl, sl, ip
 80034b2:	f04f 0100 	mov.w	r1, #0
 80034b6:	f04f 0200 	mov.w	r2, #0
 80034ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034be:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80034c2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80034c6:	4689      	mov	r9, r1
 80034c8:	4692      	mov	sl, r2
 80034ca:	eb1b 0509 	adds.w	r5, fp, r9
 80034ce:	eb4c 060a 	adc.w	r6, ip, sl
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	4619      	mov	r1, r3
 80034d8:	f04f 0200 	mov.w	r2, #0
 80034dc:	f04f 0300 	mov.w	r3, #0
 80034e0:	f04f 0400 	mov.w	r4, #0
 80034e4:	0094      	lsls	r4, r2, #2
 80034e6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80034ea:	008b      	lsls	r3, r1, #2
 80034ec:	461a      	mov	r2, r3
 80034ee:	4623      	mov	r3, r4
 80034f0:	4628      	mov	r0, r5
 80034f2:	4631      	mov	r1, r6
 80034f4:	f7fc fe86 	bl	8000204 <__aeabi_uldivmod>
 80034f8:	4603      	mov	r3, r0
 80034fa:	460c      	mov	r4, r1
 80034fc:	461a      	mov	r2, r3
 80034fe:	4b77      	ldr	r3, [pc, #476]	; (80036dc <UART_SetConfig+0x6f4>)
 8003500:	fba3 1302 	umull	r1, r3, r3, r2
 8003504:	095b      	lsrs	r3, r3, #5
 8003506:	2164      	movs	r1, #100	; 0x64
 8003508:	fb01 f303 	mul.w	r3, r1, r3
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	011b      	lsls	r3, r3, #4
 8003510:	3332      	adds	r3, #50	; 0x32
 8003512:	4a72      	ldr	r2, [pc, #456]	; (80036dc <UART_SetConfig+0x6f4>)
 8003514:	fba2 2303 	umull	r2, r3, r2, r3
 8003518:	095b      	lsrs	r3, r3, #5
 800351a:	f003 020f 	and.w	r2, r3, #15
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4442      	add	r2, r8
 8003524:	609a      	str	r2, [r3, #8]
 8003526:	e0d0      	b.n	80036ca <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003528:	f7fd ff3a 	bl	80013a0 <HAL_RCC_GetPCLK1Freq>
 800352c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	469a      	mov	sl, r3
 8003532:	f04f 0b00 	mov.w	fp, #0
 8003536:	46d0      	mov	r8, sl
 8003538:	46d9      	mov	r9, fp
 800353a:	eb18 0308 	adds.w	r3, r8, r8
 800353e:	eb49 0409 	adc.w	r4, r9, r9
 8003542:	4698      	mov	r8, r3
 8003544:	46a1      	mov	r9, r4
 8003546:	eb18 080a 	adds.w	r8, r8, sl
 800354a:	eb49 090b 	adc.w	r9, r9, fp
 800354e:	f04f 0100 	mov.w	r1, #0
 8003552:	f04f 0200 	mov.w	r2, #0
 8003556:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800355a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800355e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003562:	4688      	mov	r8, r1
 8003564:	4691      	mov	r9, r2
 8003566:	eb1a 0508 	adds.w	r5, sl, r8
 800356a:	eb4b 0609 	adc.w	r6, fp, r9
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	4619      	mov	r1, r3
 8003574:	f04f 0200 	mov.w	r2, #0
 8003578:	f04f 0300 	mov.w	r3, #0
 800357c:	f04f 0400 	mov.w	r4, #0
 8003580:	0094      	lsls	r4, r2, #2
 8003582:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003586:	008b      	lsls	r3, r1, #2
 8003588:	461a      	mov	r2, r3
 800358a:	4623      	mov	r3, r4
 800358c:	4628      	mov	r0, r5
 800358e:	4631      	mov	r1, r6
 8003590:	f7fc fe38 	bl	8000204 <__aeabi_uldivmod>
 8003594:	4603      	mov	r3, r0
 8003596:	460c      	mov	r4, r1
 8003598:	461a      	mov	r2, r3
 800359a:	4b50      	ldr	r3, [pc, #320]	; (80036dc <UART_SetConfig+0x6f4>)
 800359c:	fba3 2302 	umull	r2, r3, r3, r2
 80035a0:	095b      	lsrs	r3, r3, #5
 80035a2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	469b      	mov	fp, r3
 80035aa:	f04f 0c00 	mov.w	ip, #0
 80035ae:	46d9      	mov	r9, fp
 80035b0:	46e2      	mov	sl, ip
 80035b2:	eb19 0309 	adds.w	r3, r9, r9
 80035b6:	eb4a 040a 	adc.w	r4, sl, sl
 80035ba:	4699      	mov	r9, r3
 80035bc:	46a2      	mov	sl, r4
 80035be:	eb19 090b 	adds.w	r9, r9, fp
 80035c2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80035c6:	f04f 0100 	mov.w	r1, #0
 80035ca:	f04f 0200 	mov.w	r2, #0
 80035ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035d2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80035d6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80035da:	4689      	mov	r9, r1
 80035dc:	4692      	mov	sl, r2
 80035de:	eb1b 0509 	adds.w	r5, fp, r9
 80035e2:	eb4c 060a 	adc.w	r6, ip, sl
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	4619      	mov	r1, r3
 80035ec:	f04f 0200 	mov.w	r2, #0
 80035f0:	f04f 0300 	mov.w	r3, #0
 80035f4:	f04f 0400 	mov.w	r4, #0
 80035f8:	0094      	lsls	r4, r2, #2
 80035fa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80035fe:	008b      	lsls	r3, r1, #2
 8003600:	461a      	mov	r2, r3
 8003602:	4623      	mov	r3, r4
 8003604:	4628      	mov	r0, r5
 8003606:	4631      	mov	r1, r6
 8003608:	f7fc fdfc 	bl	8000204 <__aeabi_uldivmod>
 800360c:	4603      	mov	r3, r0
 800360e:	460c      	mov	r4, r1
 8003610:	461a      	mov	r2, r3
 8003612:	4b32      	ldr	r3, [pc, #200]	; (80036dc <UART_SetConfig+0x6f4>)
 8003614:	fba3 1302 	umull	r1, r3, r3, r2
 8003618:	095b      	lsrs	r3, r3, #5
 800361a:	2164      	movs	r1, #100	; 0x64
 800361c:	fb01 f303 	mul.w	r3, r1, r3
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	011b      	lsls	r3, r3, #4
 8003624:	3332      	adds	r3, #50	; 0x32
 8003626:	4a2d      	ldr	r2, [pc, #180]	; (80036dc <UART_SetConfig+0x6f4>)
 8003628:	fba2 2303 	umull	r2, r3, r2, r3
 800362c:	095b      	lsrs	r3, r3, #5
 800362e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003632:	4498      	add	r8, r3
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	469b      	mov	fp, r3
 8003638:	f04f 0c00 	mov.w	ip, #0
 800363c:	46d9      	mov	r9, fp
 800363e:	46e2      	mov	sl, ip
 8003640:	eb19 0309 	adds.w	r3, r9, r9
 8003644:	eb4a 040a 	adc.w	r4, sl, sl
 8003648:	4699      	mov	r9, r3
 800364a:	46a2      	mov	sl, r4
 800364c:	eb19 090b 	adds.w	r9, r9, fp
 8003650:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003654:	f04f 0100 	mov.w	r1, #0
 8003658:	f04f 0200 	mov.w	r2, #0
 800365c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003660:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003664:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003668:	4689      	mov	r9, r1
 800366a:	4692      	mov	sl, r2
 800366c:	eb1b 0509 	adds.w	r5, fp, r9
 8003670:	eb4c 060a 	adc.w	r6, ip, sl
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	4619      	mov	r1, r3
 800367a:	f04f 0200 	mov.w	r2, #0
 800367e:	f04f 0300 	mov.w	r3, #0
 8003682:	f04f 0400 	mov.w	r4, #0
 8003686:	0094      	lsls	r4, r2, #2
 8003688:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800368c:	008b      	lsls	r3, r1, #2
 800368e:	461a      	mov	r2, r3
 8003690:	4623      	mov	r3, r4
 8003692:	4628      	mov	r0, r5
 8003694:	4631      	mov	r1, r6
 8003696:	f7fc fdb5 	bl	8000204 <__aeabi_uldivmod>
 800369a:	4603      	mov	r3, r0
 800369c:	460c      	mov	r4, r1
 800369e:	461a      	mov	r2, r3
 80036a0:	4b0e      	ldr	r3, [pc, #56]	; (80036dc <UART_SetConfig+0x6f4>)
 80036a2:	fba3 1302 	umull	r1, r3, r3, r2
 80036a6:	095b      	lsrs	r3, r3, #5
 80036a8:	2164      	movs	r1, #100	; 0x64
 80036aa:	fb01 f303 	mul.w	r3, r1, r3
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	011b      	lsls	r3, r3, #4
 80036b2:	3332      	adds	r3, #50	; 0x32
 80036b4:	4a09      	ldr	r2, [pc, #36]	; (80036dc <UART_SetConfig+0x6f4>)
 80036b6:	fba2 2303 	umull	r2, r3, r2, r3
 80036ba:	095b      	lsrs	r3, r3, #5
 80036bc:	f003 020f 	and.w	r2, r3, #15
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4442      	add	r2, r8
 80036c6:	609a      	str	r2, [r3, #8]
}
 80036c8:	e7ff      	b.n	80036ca <UART_SetConfig+0x6e2>
 80036ca:	bf00      	nop
 80036cc:	3714      	adds	r7, #20
 80036ce:	46bd      	mov	sp, r7
 80036d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036d4:	40011000 	.word	0x40011000
 80036d8:	40011400 	.word	0x40011400
 80036dc:	51eb851f 	.word	0x51eb851f

080036e0 <_ZN13ClassUartTestC1E20__UART_HandleTypeDef>:
#include "stm32f4xx_hal.h"
#include "stm32f4xx_hal_uart.h"
#include "usart.h"
#include "string.h"
#include "main.h"
ClassUartTest::ClassUartTest(UART_HandleTypeDef h) :
 80036e0:	b084      	sub	sp, #16
 80036e2:	b5b0      	push	{r4, r5, r7, lr}
 80036e4:	b082      	sub	sp, #8
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
 80036ea:	f107 001c 	add.w	r0, r7, #28
 80036ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	huart(h)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	461d      	mov	r5, r3
 80036f6:	f107 041c 	add.w	r4, r7, #28
 80036fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003700:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003702:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003704:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003706:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800370a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
{
	if (HAL_UART_Init(&huart) != HAL_OK)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4618      	mov	r0, r3
 8003712:	f7ff f853 	bl	80027bc <HAL_UART_Init>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	bf14      	ite	ne
 800371c:	2301      	movne	r3, #1
 800371e:	2300      	moveq	r3, #0
 8003720:	b2db      	uxtb	r3, r3
 8003722:	2b00      	cmp	r3, #0
 8003724:	d001      	beq.n	800372a <_ZN13ClassUartTestC1E20__UART_HandleTypeDef+0x4a>
	{
		Error_Handler();
 8003726:	f000 fb73 	bl	8003e10 <Error_Handler>
	}
}
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4618      	mov	r0, r3
 800372e:	3708      	adds	r7, #8
 8003730:	46bd      	mov	sp, r7
 8003732:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8003736:	b004      	add	sp, #16
 8003738:	4770      	bx	lr

0800373a <_ZN13ClassUartTest11sendMessageEPhtm>:

bool ClassUartTest::sendMessage(uint8_t* buffer, uint16_t bufferLength, uint32_t timeout)
{
 800373a:	b580      	push	{r7, lr}
 800373c:	b084      	sub	sp, #16
 800373e:	af00      	add	r7, sp, #0
 8003740:	60f8      	str	r0, [r7, #12]
 8003742:	60b9      	str	r1, [r7, #8]
 8003744:	603b      	str	r3, [r7, #0]
 8003746:	4613      	mov	r3, r2
 8003748:	80fb      	strh	r3, [r7, #6]
	return (HAL_UART_Transmit(&huart, buffer, bufferLength, timeout) == HAL_OK);
 800374a:	68f8      	ldr	r0, [r7, #12]
 800374c:	88fa      	ldrh	r2, [r7, #6]
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	68b9      	ldr	r1, [r7, #8]
 8003752:	f7ff f880 	bl	8002856 <HAL_UART_Transmit>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	bf0c      	ite	eq
 800375c:	2301      	moveq	r3, #1
 800375e:	2300      	movne	r3, #0
 8003760:	b2db      	uxtb	r3, r3
}
 8003762:	4618      	mov	r0, r3
 8003764:	3710      	adds	r7, #16
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}

0800376a <_ZN13ClassUartTest14receiveMessageEPhtm>:

bool ClassUartTest::receiveMessage(uint8_t* buffer, uint16_t bufferLength, uint32_t timeout)
{
 800376a:	b580      	push	{r7, lr}
 800376c:	b084      	sub	sp, #16
 800376e:	af00      	add	r7, sp, #0
 8003770:	60f8      	str	r0, [r7, #12]
 8003772:	60b9      	str	r1, [r7, #8]
 8003774:	603b      	str	r3, [r7, #0]
 8003776:	4613      	mov	r3, r2
 8003778:	80fb      	strh	r3, [r7, #6]
	return (HAL_UART_Receive(&huart, buffer, bufferLength, timeout) == HAL_OK);
 800377a:	68f8      	ldr	r0, [r7, #12]
 800377c:	88fa      	ldrh	r2, [r7, #6]
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	68b9      	ldr	r1, [r7, #8]
 8003782:	f7ff f901 	bl	8002988 <HAL_UART_Receive>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	bf0c      	ite	eq
 800378c:	2301      	moveq	r3, #1
 800378e:	2300      	movne	r3, #0
 8003790:	b2db      	uxtb	r3, r3
}
 8003792:	4618      	mov	r0, r3
 8003794:	3710      	adds	r7, #16
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
	...

0800379c <_ZN3PWMC1E17TIM_HandleTypeDef>:
#include "stm32f4xx_hal.h"
#include "gpio.h"
#include "string.h"
#include "stdint.h"

PWM::PWM(TIM_HandleTypeDef h) :
 800379c:	b084      	sub	sp, #16
 800379e:	b5b0      	push	{r4, r5, r7, lr}
 80037a0:	b096      	sub	sp, #88	; 0x58
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
 80037a6:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 80037aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	htim(h)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	461d      	mov	r5, r3
 80037b2:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 80037b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037c2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80037c6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
{
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037ca:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80037ce:	2200      	movs	r2, #0
 80037d0:	601a      	str	r2, [r3, #0]
 80037d2:	605a      	str	r2, [r3, #4]
 80037d4:	609a      	str	r2, [r3, #8]
 80037d6:	60da      	str	r2, [r3, #12]
 80037d8:	611a      	str	r2, [r3, #16]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80037da:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80037de:	2200      	movs	r2, #0
 80037e0:	601a      	str	r2, [r3, #0]
 80037e2:	605a      	str	r2, [r3, #4]
 80037e4:	609a      	str	r2, [r3, #8]
 80037e6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037ec:	2200      	movs	r2, #0
 80037ee:	601a      	str	r2, [r3, #0]
 80037f0:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80037f2:	f107 0310 	add.w	r3, r7, #16
 80037f6:	2200      	movs	r2, #0
 80037f8:	601a      	str	r2, [r3, #0]
 80037fa:	605a      	str	r2, [r3, #4]
 80037fc:	609a      	str	r2, [r3, #8]
 80037fe:	60da      	str	r2, [r3, #12]
 8003800:	611a      	str	r2, [r3, #16]
 8003802:	615a      	str	r2, [r3, #20]
 8003804:	619a      	str	r2, [r3, #24]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003806:	2300      	movs	r3, #0
 8003808:	60fb      	str	r3, [r7, #12]
 800380a:	4b65      	ldr	r3, [pc, #404]	; (80039a0 <_ZN3PWMC1E17TIM_HandleTypeDef+0x204>)
 800380c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380e:	4a64      	ldr	r2, [pc, #400]	; (80039a0 <_ZN3PWMC1E17TIM_HandleTypeDef+0x204>)
 8003810:	f043 0301 	orr.w	r3, r3, #1
 8003814:	6313      	str	r3, [r2, #48]	; 0x30
 8003816:	4b62      	ldr	r3, [pc, #392]	; (80039a0 <_ZN3PWMC1E17TIM_HandleTypeDef+0x204>)
 8003818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381a:	f003 0301 	and.w	r3, r3, #1
 800381e:	60fb      	str	r3, [r7, #12]
 8003820:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_TIM2_CLK_ENABLE();
 8003822:	2300      	movs	r3, #0
 8003824:	60bb      	str	r3, [r7, #8]
 8003826:	4b5e      	ldr	r3, [pc, #376]	; (80039a0 <_ZN3PWMC1E17TIM_HandleTypeDef+0x204>)
 8003828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382a:	4a5d      	ldr	r2, [pc, #372]	; (80039a0 <_ZN3PWMC1E17TIM_HandleTypeDef+0x204>)
 800382c:	f043 0301 	orr.w	r3, r3, #1
 8003830:	6413      	str	r3, [r2, #64]	; 0x40
 8003832:	4b5b      	ldr	r3, [pc, #364]	; (80039a0 <_ZN3PWMC1E17TIM_HandleTypeDef+0x204>)
 8003834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003836:	f003 0301 	and.w	r3, r3, #1
 800383a:	60bb      	str	r3, [r7, #8]
 800383c:	68bb      	ldr	r3, [r7, #8]

	// PA5 -> TIM2_CH1
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 800383e:	2320      	movs	r3, #32
 8003840:	647b      	str	r3, [r7, #68]	; 0x44
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003842:	2302      	movs	r3, #2
 8003844:	64bb      	str	r3, [r7, #72]	; 0x48
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003846:	2300      	movs	r3, #0
 8003848:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800384a:	2300      	movs	r3, #0
 800384c:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800384e:	2301      	movs	r3, #1
 8003850:	657b      	str	r3, [r7, #84]	; 0x54
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003852:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003856:	4619      	mov	r1, r3
 8003858:	4852      	ldr	r0, [pc, #328]	; (80039a4 <_ZN3PWMC1E17TIM_HandleTypeDef+0x208>)
 800385a:	f7fd fb03 	bl	8000e64 <HAL_GPIO_Init>

	if (HAL_TIM_Base_DeInit(&htim) != HAL_OK)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4618      	mov	r0, r3
 8003862:	f7fe f9ea 	bl	8001c3a <HAL_TIM_Base_DeInit>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	bf14      	ite	ne
 800386c:	2301      	movne	r3, #1
 800386e:	2300      	moveq	r3, #0
 8003870:	b2db      	uxtb	r3, r3
 8003872:	2b00      	cmp	r3, #0
 8003874:	d001      	beq.n	800387a <_ZN3PWMC1E17TIM_HandleTypeDef+0xde>
	{
		Error_Handler();
 8003876:	f000 facb 	bl	8003e10 <Error_Handler>
	}

	htim.Instance = TIM2;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003880:	601a      	str	r2, [r3, #0]
	htim.Init.Prescaler = 84;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2254      	movs	r2, #84	; 0x54
 8003886:	605a      	str	r2, [r3, #4]
	htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	609a      	str	r2, [r3, #8]
	htim.Init.Period = 1000;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003894:	60da      	str	r2, [r3, #12]
	htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	611a      	str	r2, [r3, #16]
	htim.Init.RepetitionCounter = 0;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	615a      	str	r2, [r3, #20]
	htim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim) != HAL_OK)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7fe f99a 	bl	8001be4 <HAL_TIM_Base_Init>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	bf14      	ite	ne
 80038b6:	2301      	movne	r3, #1
 80038b8:	2300      	moveq	r3, #0
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d001      	beq.n	80038c4 <_ZN3PWMC1E17TIM_HandleTypeDef+0x128>
	{
		Error_Handler();
 80038c0:	f000 faa6 	bl	8003e10 <Error_Handler>
	}

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80038c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038c8:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_TIM_ConfigClockSource(&htim, &sClockSourceConfig) != HAL_OK)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80038d0:	4611      	mov	r1, r2
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7fe fb2e 	bl	8001f34 <HAL_TIM_ConfigClockSource>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	bf14      	ite	ne
 80038de:	2301      	movne	r3, #1
 80038e0:	2300      	moveq	r3, #0
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d001      	beq.n	80038ec <_ZN3PWMC1E17TIM_HandleTypeDef+0x150>
	{
		Error_Handler();
 80038e8:	f000 fa92 	bl	8003e10 <Error_Handler>
	}

	if (HAL_TIM_PWM_Init(&htim) != HAL_OK)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7fe f9e7 	bl	8001cc2 <HAL_TIM_PWM_Init>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	bf14      	ite	ne
 80038fa:	2301      	movne	r3, #1
 80038fc:	2300      	moveq	r3, #0
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	2b00      	cmp	r3, #0
 8003902:	d001      	beq.n	8003908 <_ZN3PWMC1E17TIM_HandleTypeDef+0x16c>
	{
		Error_Handler();
 8003904:	f000 fa84 	bl	8003e10 <Error_Handler>
	}

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003908:	2300      	movs	r3, #0
 800390a:	62fb      	str	r3, [r7, #44]	; 0x2c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800390c:	2300      	movs	r3, #0
 800390e:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_TIMEx_MasterConfigSynchronization(&htim, &sMasterConfig) != HAL_OK)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8003916:	4611      	mov	r1, r2
 8003918:	4618      	mov	r0, r3
 800391a:	f7fe fed3 	bl	80026c4 <HAL_TIMEx_MasterConfigSynchronization>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	bf14      	ite	ne
 8003924:	2301      	movne	r3, #1
 8003926:	2300      	moveq	r3, #0
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2b00      	cmp	r3, #0
 800392c:	d001      	beq.n	8003932 <_ZN3PWMC1E17TIM_HandleTypeDef+0x196>
	{
		Error_Handler();
 800392e:	f000 fa6f 	bl	8003e10 <Error_Handler>
	}

	//TODO: Initialize the PWM channel using HAL_TIM_PWM_ConfigChannel function and the variable sConfigOC.
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003932:	2360      	movs	r3, #96	; 0x60
 8003934:	613b      	str	r3, [r7, #16]
	sConfigOC.Pulse = 500;
 8003936:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800393a:	617b      	str	r3, [r7, #20]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800393c:	2300      	movs	r3, #0
 800393e:	61bb      	str	r3, [r7, #24]
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003940:	2300      	movs	r3, #0
 8003942:	61fb      	str	r3, [r7, #28]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003944:	2300      	movs	r3, #0
 8003946:	623b      	str	r3, [r7, #32]
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003948:	2300      	movs	r3, #0
 800394a:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800394c:	2300      	movs	r3, #0
 800394e:	62bb      	str	r3, [r7, #40]	; 0x28
	if(HAL_TIM_PWM_ConfigChannel(&htim, &sConfigOC, TIM_CHANNEL_1)!=HAL_OK)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f107 0110 	add.w	r1, r7, #16
 8003956:	2200      	movs	r2, #0
 8003958:	4618      	mov	r0, r3
 800395a:	f7fe fa25 	bl	8001da8 <HAL_TIM_PWM_ConfigChannel>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	bf14      	ite	ne
 8003964:	2301      	movne	r3, #1
 8003966:	2300      	moveq	r3, #0
 8003968:	b2db      	uxtb	r3, r3
 800396a:	2b00      	cmp	r3, #0
 800396c:	d001      	beq.n	8003972 <_ZN3PWMC1E17TIM_HandleTypeDef+0x1d6>
	{
		Error_Handler();
 800396e:	f000 fa4f 	bl	8003e10 <Error_Handler>
	}

	if (HAL_TIM_PWM_Start(&htim, TIM_CHANNEL_1)!=HAL_OK)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2100      	movs	r1, #0
 8003976:	4618      	mov	r0, r3
 8003978:	f7fe f9d8 	bl	8001d2c <HAL_TIM_PWM_Start>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	bf14      	ite	ne
 8003982:	2301      	movne	r3, #1
 8003984:	2300      	moveq	r3, #0
 8003986:	b2db      	uxtb	r3, r3
 8003988:	2b00      	cmp	r3, #0
 800398a:	d001      	beq.n	8003990 <_ZN3PWMC1E17TIM_HandleTypeDef+0x1f4>
	{
		Error_Handler();
 800398c:	f000 fa40 	bl	8003e10 <Error_Handler>
	}
}
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4618      	mov	r0, r3
 8003994:	3758      	adds	r7, #88	; 0x58
 8003996:	46bd      	mov	sp, r7
 8003998:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800399c:	b004      	add	sp, #16
 800399e:	4770      	bx	lr
 80039a0:	40023800 	.word	0x40023800
 80039a4:	40020000 	.word	0x40020000

080039a8 <_ZN3PWM6setPWMEh>:

bool PWM::setPWM(uint8_t percent)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	460b      	mov	r3, r1
 80039b2:	70fb      	strb	r3, [r7, #3]
	//TODO: Implement this task using a HAL function
	//TIM2->CCR1 = percent;
	if(percent>=0 && percent<=100)	//TODO-AKOS: How can be variable percent negative? I ask it, because of your code "percent>= 0".
 80039b4:	78fb      	ldrb	r3, [r7, #3]
 80039b6:	2b64      	cmp	r3, #100	; 0x64
 80039b8:	d80a      	bhi.n	80039d0 <_ZN3PWM6setPWMEh+0x28>
	{
		__HAL_TIM_SET_COMPARE(&htim,TIM_CHANNEL_1, percent*10);
 80039ba:	78fa      	ldrb	r2, [r7, #3]
 80039bc:	4613      	mov	r3, r2
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	4413      	add	r3, r2
 80039c2:	005b      	lsls	r3, r3, #1
 80039c4:	461a      	mov	r2, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	635a      	str	r2, [r3, #52]	; 0x34
		return true;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e000      	b.n	80039d2 <_ZN3PWM6setPWMEh+0x2a>
	}else
	{
		return false;
 80039d0:	2300      	movs	r3, #0
	}
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	370c      	adds	r7, #12
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr

080039de <_ZN5QueueC1Ev>:
#include "stm32f4xx_hal.h"
#include "string.h"
#include "main.h"
#include "Queue.h"
#include "cstdlib"
Queue::Queue()
 80039de:	b480      	push	{r7}
 80039e0:	b083      	sub	sp, #12
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	701a      	strb	r2, [r3, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	705a      	strb	r2, [r3, #1]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	709a      	strb	r2, [r3, #2]
{
	buffer[QUEUE_MAX_SIZE];
}
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4618      	mov	r0, r3
 80039fc:	370c      	adds	r7, #12
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr

08003a06 <_ZN5Queue14IsBuffer_EmptyEv>:
{
	return full;

}
bool Queue::IsBuffer_Empty()
{
 8003a06:	b480      	push	{r7}
 8003a08:	b083      	sub	sp, #12
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
	if((head==tail)&&(full==false))
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	781a      	ldrb	r2, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	785b      	ldrb	r3, [r3, #1]
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d105      	bne.n	8003a26 <_ZN5Queue14IsBuffer_EmptyEv+0x20>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	789b      	ldrb	r3, [r3, #2]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d101      	bne.n	8003a26 <_ZN5Queue14IsBuffer_EmptyEv+0x20>
		return 1;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e000      	b.n	8003a28 <_ZN5Queue14IsBuffer_EmptyEv+0x22>
	else
		return 0;
 8003a26:	2300      	movs	r3, #0
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <_ZN5Queue12Buffer_WriteEh>:
bool Queue::Buffer_Write(uint8_t item)//overwrite the oldest value
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	460b      	mov	r3, r1
 8003a3e:	70fb      	strb	r3, [r7, #3]
	buffer[head]=&item;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	4413      	add	r3, r2
 8003a4a:	1cfa      	adds	r2, r7, #3
 8003a4c:	605a      	str	r2, [r3, #4]
	if(full==true)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	789b      	ldrb	r3, [r3, #2]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d00a      	beq.n	8003a6c <_ZN5Queue12Buffer_WriteEh+0x38>
	{
		tail=(tail+1) % QUEUE_MAX_SIZE;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	785b      	ldrb	r3, [r3, #1]
 8003a5a:	3301      	adds	r3, #1
 8003a5c:	425a      	negs	r2, r3
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	b2d2      	uxtb	r2, r2
 8003a62:	bf58      	it	pl
 8003a64:	4253      	negpl	r3, r2
 8003a66:	b2da      	uxtb	r2, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	705a      	strb	r2, [r3, #1]
	}
	head=(head+1)%QUEUE_MAX_SIZE;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	3301      	adds	r3, #1
 8003a72:	425a      	negs	r2, r3
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	b2d2      	uxtb	r2, r2
 8003a78:	bf58      	it	pl
 8003a7a:	4253      	negpl	r3, r2
 8003a7c:	b2da      	uxtb	r2, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	701a      	strb	r2, [r3, #0]
	if(head==tail)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	781a      	ldrb	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	785b      	ldrb	r3, [r3, #1]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d103      	bne.n	8003a96 <_ZN5Queue12Buffer_WriteEh+0x62>
		full=true;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2201      	movs	r2, #1
 8003a92:	709a      	strb	r2, [r3, #2]
 8003a94:	e002      	b.n	8003a9c <_ZN5Queue12Buffer_WriteEh+0x68>
	else
		full=false;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	709a      	strb	r2, [r3, #2]
}
 8003a9c:	bf00      	nop
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	370c      	adds	r7, #12
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr

08003aaa <_ZN5Queue11Buffer_ReadEPh>:
bool Queue::Buffer_Read(uint8_t* item)
{
 8003aaa:	b580      	push	{r7, lr}
 8003aac:	b082      	sub	sp, #8
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
 8003ab2:	6039      	str	r1, [r7, #0]

	if(IsBuffer_Empty())
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f7ff ffa6 	bl	8003a06 <_ZN5Queue14IsBuffer_EmptyEv>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d001      	beq.n	8003ac4 <_ZN5Queue11Buffer_ReadEPh+0x1a>
	{
		return false;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	e014      	b.n	8003aee <_ZN5Queue11Buffer_ReadEPh+0x44>
	}

	item =buffer[tail];//read the data and move the tail
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	785b      	ldrb	r3, [r3, #1]
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	4413      	add	r3, r2
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	603b      	str	r3, [r7, #0]
	full=false;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	709a      	strb	r2, [r3, #2]
	tail=(tail+1) % QUEUE_MAX_SIZE;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	785b      	ldrb	r3, [r3, #1]
 8003adc:	3301      	adds	r3, #1
 8003ade:	425a      	negs	r2, r3
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	b2d2      	uxtb	r2, r2
 8003ae4:	bf58      	it	pl
 8003ae6:	4253      	negpl	r3, r2
 8003ae8:	b2da      	uxtb	r2, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	705a      	strb	r2, [r3, #1]

}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3708      	adds	r7, #8
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
	...

08003af8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003af8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003afa:	f2ad 4dd4 	subw	sp, sp, #1236	; 0x4d4
 8003afe:	af0e      	add	r7, sp, #56	; 0x38
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003b00:	f7fc fd00 	bl	8000504 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003b04:	f000 f89e 	bl	8003c44 <_Z18SystemClock_Configv>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */

  MX_GPIO_Init();
 8003b08:	f000 f914 	bl	8003d34 <_Z12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8003b0c:	f000 fa04 	bl	8003f18 <MX_USART2_UART_Init>
  //MX_DMA_Init();
  //MX_SPI1_Init();
  //MX_TIM2_Init();
  //HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
  uint8_t myTxData[15]= "Hello World\r\n";
 8003b10:	4b47      	ldr	r3, [pc, #284]	; (8003c30 <main+0x138>)
 8003b12:	f507 6491 	add.w	r4, r7, #1160	; 0x488
 8003b16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b18:	c407      	stmia	r4!, {r0, r1, r2}
 8003b1a:	8023      	strh	r3, [r4, #0]
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	f887 3496 	strb.w	r3, [r7, #1174]	; 0x496
  uint8_t myRxData[1];
  ClassUartTest uartTest1(huart2);
 8003b22:	4e44      	ldr	r6, [pc, #272]	; (8003c34 <main+0x13c>)
 8003b24:	f207 4c44 	addw	ip, r7, #1092	; 0x444
 8003b28:	466d      	mov	r5, sp
 8003b2a:	f106 040c 	add.w	r4, r6, #12
 8003b2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b3a:	6823      	ldr	r3, [r4, #0]
 8003b3c:	602b      	str	r3, [r5, #0]
 8003b3e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8003b42:	4660      	mov	r0, ip
 8003b44:	f7ff fdcc 	bl	80036e0 <_ZN13ClassUartTestC1E20__UART_HandleTypeDef>
  PWM pwmT(htim2);
 8003b48:	4e3b      	ldr	r6, [pc, #236]	; (8003c38 <main+0x140>)
 8003b4a:	f207 4c04 	addw	ip, r7, #1028	; 0x404
 8003b4e:	466d      	mov	r5, sp
 8003b50:	f106 040c 	add.w	r4, r6, #12
 8003b54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b60:	6823      	ldr	r3, [r4, #0]
 8003b62:	602b      	str	r3, [r5, #0]
 8003b64:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8003b68:	4660      	mov	r0, ip
 8003b6a:	f7ff fe17 	bl	800379c <_ZN3PWMC1E17TIM_HandleTypeDef>
  Queue q1;
 8003b6e:	463b      	mov	r3, r7
 8003b70:	4618      	mov	r0, r3
 8003b72:	f7ff ff34 	bl	80039de <_ZN5QueueC1Ev>
  if(q1.Buffer_Write(8))
 8003b76:	463b      	mov	r3, r7
 8003b78:	2108      	movs	r1, #8
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7ff ff5a 	bl	8003a34 <_ZN5Queue12Buffer_WriteEh>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d011      	beq.n	8003baa <main+0xb2>
  {
	  HAL_Delay(1000);
 8003b86:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003b8a:	f7fc fd2d 	bl	80005e8 <HAL_Delay>
	  if (q1.Buffer_Read(item1))
 8003b8e:	4b2b      	ldr	r3, [pc, #172]	; (8003c3c <main+0x144>)
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	463b      	mov	r3, r7
 8003b94:	4611      	mov	r1, r2
 8003b96:	4618      	mov	r0, r3
 8003b98:	f7ff ff87 	bl	8003aaa <_ZN5Queue11Buffer_ReadEPh>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d003      	beq.n	8003baa <main+0xb2>
	  {
		  //myTxData[0]=item1;
		  //myTxData[1]=item1;
		  HAL_Delay(1000);
 8003ba2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003ba6:	f7fc fd1f 	bl	80005e8 <HAL_Delay>
	while (1)
	{
		//TODO: Set LED intensity, when character 'l' is received. The pwm percentage should be a parameter, and use the PWM class for the intensity control
		/* USER CODE END WHILE */

		if (uartTest1.receiveMessage(myRxData, sizeof(myRxData), 100) == true)
 8003baa:	f207 4184 	addw	r1, r7, #1156	; 0x484
 8003bae:	f207 4044 	addw	r0, r7, #1092	; 0x444
 8003bb2:	2364      	movs	r3, #100	; 0x64
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	f7ff fdd8 	bl	800376a <_ZN13ClassUartTest14receiveMessageEPhtm>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d015      	beq.n	8003bec <main+0xf4>
		{
			if (myRxData[0] == 'l') {
 8003bc0:	f897 3484 	ldrb.w	r3, [r7, #1156]	; 0x484
 8003bc4:	2b6c      	cmp	r3, #108	; 0x6c
 8003bc6:	d111      	bne.n	8003bec <main+0xf4>
				HAL_Delay(100);
 8003bc8:	2064      	movs	r0, #100	; 0x64
 8003bca:	f7fc fd0d 	bl	80005e8 <HAL_Delay>
				if (pwmT.setPWM(percent)) {
 8003bce:	4b1c      	ldr	r3, [pc, #112]	; (8003c40 <main+0x148>)
 8003bd0:	781a      	ldrb	r2, [r3, #0]
 8003bd2:	f207 4304 	addw	r3, r7, #1028	; 0x404
 8003bd6:	4611      	mov	r1, r2
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f7ff fee5 	bl	80039a8 <_ZN3PWM6setPWMEh>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d003      	beq.n	8003bec <main+0xf4>
					HAL_Delay(1000);
 8003be4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003be8:	f7fc fcfe 	bl	80005e8 <HAL_Delay>
				}
			}

		}

		if (uartTest1.receiveMessage(myRxData, sizeof(myRxData), 100) == true) {
 8003bec:	f207 4184 	addw	r1, r7, #1156	; 0x484
 8003bf0:	f207 4044 	addw	r0, r7, #1092	; 0x444
 8003bf4:	2364      	movs	r3, #100	; 0x64
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f7ff fdb7 	bl	800376a <_ZN13ClassUartTest14receiveMessageEPhtm>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d0d3      	beq.n	8003baa <main+0xb2>
			if (myRxData[0] == 'c')
 8003c02:	f897 3484 	ldrb.w	r3, [r7, #1156]	; 0x484
 8003c06:	2b63      	cmp	r3, #99	; 0x63
 8003c08:	d1cf      	bne.n	8003baa <main+0xb2>
			{
				HAL_Delay(100);
 8003c0a:	2064      	movs	r0, #100	; 0x64
 8003c0c:	f7fc fcec 	bl	80005e8 <HAL_Delay>
				if (uartTest1.sendMessage(myTxData, sizeof(myTxData), 100)== true)
 8003c10:	f507 6191 	add.w	r1, r7, #1160	; 0x488
 8003c14:	f207 4044 	addw	r0, r7, #1092	; 0x444
 8003c18:	2364      	movs	r3, #100	; 0x64
 8003c1a:	220f      	movs	r2, #15
 8003c1c:	f7ff fd8d 	bl	800373a <_ZN13ClassUartTest11sendMessageEPhtm>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d0c1      	beq.n	8003baa <main+0xb2>
				{
					HAL_Delay(10);
 8003c26:	200a      	movs	r0, #10
 8003c28:	f7fc fcde 	bl	80005e8 <HAL_Delay>
		if (uartTest1.receiveMessage(myRxData, sizeof(myRxData), 100) == true)
 8003c2c:	e7bd      	b.n	8003baa <main+0xb2>
 8003c2e:	bf00      	nop
 8003c30:	0800422c 	.word	0x0800422c
 8003c34:	20000458 	.word	0x20000458
 8003c38:	20000498 	.word	0x20000498
 8003c3c:	200004d8 	.word	0x200004d8
 8003c40:	20000005 	.word	0x20000005

08003c44 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b094      	sub	sp, #80	; 0x50
 8003c48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003c4a:	f107 031c 	add.w	r3, r7, #28
 8003c4e:	2234      	movs	r2, #52	; 0x34
 8003c50:	2100      	movs	r1, #0
 8003c52:	4618      	mov	r0, r3
 8003c54:	f000 fa5a 	bl	800410c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003c58:	f107 0308 	add.w	r3, r7, #8
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	601a      	str	r2, [r3, #0]
 8003c60:	605a      	str	r2, [r3, #4]
 8003c62:	609a      	str	r2, [r3, #8]
 8003c64:	60da      	str	r2, [r3, #12]
 8003c66:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c68:	2300      	movs	r3, #0
 8003c6a:	607b      	str	r3, [r7, #4]
 8003c6c:	4b2f      	ldr	r3, [pc, #188]	; (8003d2c <_Z18SystemClock_Configv+0xe8>)
 8003c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c70:	4a2e      	ldr	r2, [pc, #184]	; (8003d2c <_Z18SystemClock_Configv+0xe8>)
 8003c72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c76:	6413      	str	r3, [r2, #64]	; 0x40
 8003c78:	4b2c      	ldr	r3, [pc, #176]	; (8003d2c <_Z18SystemClock_Configv+0xe8>)
 8003c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c80:	607b      	str	r3, [r7, #4]
 8003c82:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003c84:	2300      	movs	r3, #0
 8003c86:	603b      	str	r3, [r7, #0]
 8003c88:	4b29      	ldr	r3, [pc, #164]	; (8003d30 <_Z18SystemClock_Configv+0xec>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003c90:	4a27      	ldr	r2, [pc, #156]	; (8003d30 <_Z18SystemClock_Configv+0xec>)
 8003c92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c96:	6013      	str	r3, [r2, #0]
 8003c98:	4b25      	ldr	r3, [pc, #148]	; (8003d30 <_Z18SystemClock_Configv+0xec>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003ca0:	603b      	str	r3, [r7, #0]
 8003ca2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003ca4:	2302      	movs	r3, #2
 8003ca6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003cac:	2310      	movs	r3, #16
 8003cae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003cb0:	2302      	movs	r3, #2
 8003cb2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8003cb8:	2310      	movs	r3, #16
 8003cba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003cbc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8003cc0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8003cc2:	2304      	movs	r3, #4
 8003cc4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003cc6:	2302      	movs	r3, #2
 8003cc8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003cca:	2302      	movs	r3, #2
 8003ccc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003cce:	f107 031c 	add.w	r3, r7, #28
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f7fd fd2c 	bl	8001730 <HAL_RCC_OscConfig>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	bf14      	ite	ne
 8003cde:	2301      	movne	r3, #1
 8003ce0:	2300      	moveq	r3, #0
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d001      	beq.n	8003cec <_Z18SystemClock_Configv+0xa8>
  {
    Error_Handler();
 8003ce8:	f000 f892 	bl	8003e10 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003cec:	230f      	movs	r3, #15
 8003cee:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003cf0:	2302      	movs	r3, #2
 8003cf2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003cf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cfc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003d02:	f107 0308 	add.w	r3, r7, #8
 8003d06:	2102      	movs	r1, #2
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f7fd fa57 	bl	80011bc <HAL_RCC_ClockConfig>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	bf14      	ite	ne
 8003d14:	2301      	movne	r3, #1
 8003d16:	2300      	moveq	r3, #0
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d001      	beq.n	8003d22 <_Z18SystemClock_Configv+0xde>
  {
    Error_Handler();
 8003d1e:	f000 f877 	bl	8003e10 <Error_Handler>
  }
}
 8003d22:	bf00      	nop
 8003d24:	3750      	adds	r7, #80	; 0x50
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	40023800 	.word	0x40023800
 8003d30:	40007000 	.word	0x40007000

08003d34 <_Z12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b08a      	sub	sp, #40	; 0x28
 8003d38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d3a:	f107 0314 	add.w	r3, r7, #20
 8003d3e:	2200      	movs	r2, #0
 8003d40:	601a      	str	r2, [r3, #0]
 8003d42:	605a      	str	r2, [r3, #4]
 8003d44:	609a      	str	r2, [r3, #8]
 8003d46:	60da      	str	r2, [r3, #12]
 8003d48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	613b      	str	r3, [r7, #16]
 8003d4e:	4b2d      	ldr	r3, [pc, #180]	; (8003e04 <_Z12MX_GPIO_Initv+0xd0>)
 8003d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d52:	4a2c      	ldr	r2, [pc, #176]	; (8003e04 <_Z12MX_GPIO_Initv+0xd0>)
 8003d54:	f043 0304 	orr.w	r3, r3, #4
 8003d58:	6313      	str	r3, [r2, #48]	; 0x30
 8003d5a:	4b2a      	ldr	r3, [pc, #168]	; (8003e04 <_Z12MX_GPIO_Initv+0xd0>)
 8003d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5e:	f003 0304 	and.w	r3, r3, #4
 8003d62:	613b      	str	r3, [r7, #16]
 8003d64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003d66:	2300      	movs	r3, #0
 8003d68:	60fb      	str	r3, [r7, #12]
 8003d6a:	4b26      	ldr	r3, [pc, #152]	; (8003e04 <_Z12MX_GPIO_Initv+0xd0>)
 8003d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6e:	4a25      	ldr	r2, [pc, #148]	; (8003e04 <_Z12MX_GPIO_Initv+0xd0>)
 8003d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d74:	6313      	str	r3, [r2, #48]	; 0x30
 8003d76:	4b23      	ldr	r3, [pc, #140]	; (8003e04 <_Z12MX_GPIO_Initv+0xd0>)
 8003d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d7e:	60fb      	str	r3, [r7, #12]
 8003d80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d82:	2300      	movs	r3, #0
 8003d84:	60bb      	str	r3, [r7, #8]
 8003d86:	4b1f      	ldr	r3, [pc, #124]	; (8003e04 <_Z12MX_GPIO_Initv+0xd0>)
 8003d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8a:	4a1e      	ldr	r2, [pc, #120]	; (8003e04 <_Z12MX_GPIO_Initv+0xd0>)
 8003d8c:	f043 0301 	orr.w	r3, r3, #1
 8003d90:	6313      	str	r3, [r2, #48]	; 0x30
 8003d92:	4b1c      	ldr	r3, [pc, #112]	; (8003e04 <_Z12MX_GPIO_Initv+0xd0>)
 8003d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d96:	f003 0301 	and.w	r3, r3, #1
 8003d9a:	60bb      	str	r3, [r7, #8]
 8003d9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d9e:	2300      	movs	r3, #0
 8003da0:	607b      	str	r3, [r7, #4]
 8003da2:	4b18      	ldr	r3, [pc, #96]	; (8003e04 <_Z12MX_GPIO_Initv+0xd0>)
 8003da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da6:	4a17      	ldr	r2, [pc, #92]	; (8003e04 <_Z12MX_GPIO_Initv+0xd0>)
 8003da8:	f043 0302 	orr.w	r3, r3, #2
 8003dac:	6313      	str	r3, [r2, #48]	; 0x30
 8003dae:	4b15      	ldr	r3, [pc, #84]	; (8003e04 <_Z12MX_GPIO_Initv+0xd0>)
 8003db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db2:	f003 0302 	and.w	r3, r3, #2
 8003db6:	607b      	str	r3, [r7, #4]
 8003db8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8003dba:	2200      	movs	r2, #0
 8003dbc:	2120      	movs	r1, #32
 8003dbe:	4812      	ldr	r0, [pc, #72]	; (8003e08 <_Z12MX_GPIO_Initv+0xd4>)
 8003dc0:	f7fd f9e2 	bl	8001188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003dc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003dc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003dd2:	f107 0314 	add.w	r3, r7, #20
 8003dd6:	4619      	mov	r1, r3
 8003dd8:	480c      	ldr	r0, [pc, #48]	; (8003e0c <_Z12MX_GPIO_Initv+0xd8>)
 8003dda:	f7fd f843 	bl	8000e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003dde:	2320      	movs	r3, #32
 8003de0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003de2:	2301      	movs	r3, #1
 8003de4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003de6:	2300      	movs	r3, #0
 8003de8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dea:	2300      	movs	r3, #0
 8003dec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dee:	f107 0314 	add.w	r3, r7, #20
 8003df2:	4619      	mov	r1, r3
 8003df4:	4804      	ldr	r0, [pc, #16]	; (8003e08 <_Z12MX_GPIO_Initv+0xd4>)
 8003df6:	f7fd f835 	bl	8000e64 <HAL_GPIO_Init>

}
 8003dfa:	bf00      	nop
 8003dfc:	3728      	adds	r7, #40	; 0x28
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	40023800 	.word	0x40023800
 8003e08:	40020000 	.word	0x40020000
 8003e0c:	40020800 	.word	0x40020800

08003e10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e10:	b480      	push	{r7}
 8003e12:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	while(1);
 8003e14:	e7fe      	b.n	8003e14 <Error_Handler+0x4>
	...

08003e18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e1e:	2300      	movs	r3, #0
 8003e20:	607b      	str	r3, [r7, #4]
 8003e22:	4b10      	ldr	r3, [pc, #64]	; (8003e64 <HAL_MspInit+0x4c>)
 8003e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e26:	4a0f      	ldr	r2, [pc, #60]	; (8003e64 <HAL_MspInit+0x4c>)
 8003e28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e2c:	6453      	str	r3, [r2, #68]	; 0x44
 8003e2e:	4b0d      	ldr	r3, [pc, #52]	; (8003e64 <HAL_MspInit+0x4c>)
 8003e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e36:	607b      	str	r3, [r7, #4]
 8003e38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	603b      	str	r3, [r7, #0]
 8003e3e:	4b09      	ldr	r3, [pc, #36]	; (8003e64 <HAL_MspInit+0x4c>)
 8003e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e42:	4a08      	ldr	r2, [pc, #32]	; (8003e64 <HAL_MspInit+0x4c>)
 8003e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e48:	6413      	str	r3, [r2, #64]	; 0x40
 8003e4a:	4b06      	ldr	r3, [pc, #24]	; (8003e64 <HAL_MspInit+0x4c>)
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e52:	603b      	str	r3, [r7, #0]
 8003e54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e56:	bf00      	nop
 8003e58:	370c      	adds	r7, #12
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr
 8003e62:	bf00      	nop
 8003e64:	40023800 	.word	0x40023800

08003e68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003e6c:	bf00      	nop
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr

08003e76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e76:	b480      	push	{r7}
 8003e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e7a:	e7fe      	b.n	8003e7a <HardFault_Handler+0x4>

08003e7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e80:	e7fe      	b.n	8003e80 <MemManage_Handler+0x4>

08003e82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e82:	b480      	push	{r7}
 8003e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e86:	e7fe      	b.n	8003e86 <BusFault_Handler+0x4>

08003e88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e8c:	e7fe      	b.n	8003e8c <UsageFault_Handler+0x4>

08003e8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003e8e:	b480      	push	{r7}
 8003e90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003e92:	bf00      	nop
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ea0:	bf00      	nop
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr

08003eaa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003eaa:	b480      	push	{r7}
 8003eac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003eae:	bf00      	nop
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ebc:	f7fc fb74 	bl	80005a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ec0:	bf00      	nop
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003ec8:	4802      	ldr	r0, [pc, #8]	; (8003ed4 <DMA1_Stream5_IRQHandler+0x10>)
 8003eca:	f7fc fd91 	bl	80009f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003ece:	bf00      	nop
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	200004e0 	.word	0x200004e0

08003ed8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003edc:	4802      	ldr	r0, [pc, #8]	; (8003ee8 <USART2_IRQHandler+0x10>)
 8003ede:	f7fe fdf9 	bl	8002ad4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003ee2:	bf00      	nop
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	20000458 	.word	0x20000458

08003eec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003eec:	b480      	push	{r7}
 8003eee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ef0:	4b08      	ldr	r3, [pc, #32]	; (8003f14 <SystemInit+0x28>)
 8003ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ef6:	4a07      	ldr	r2, [pc, #28]	; (8003f14 <SystemInit+0x28>)
 8003ef8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003efc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003f00:	4b04      	ldr	r3, [pc, #16]	; (8003f14 <SystemInit+0x28>)
 8003f02:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003f06:	609a      	str	r2, [r3, #8]
#endif
}
 8003f08:	bf00      	nop
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr
 8003f12:	bf00      	nop
 8003f14:	e000ed00 	.word	0xe000ed00

08003f18 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8003f1c:	4b11      	ldr	r3, [pc, #68]	; (8003f64 <MX_USART2_UART_Init+0x4c>)
 8003f1e:	4a12      	ldr	r2, [pc, #72]	; (8003f68 <MX_USART2_UART_Init+0x50>)
 8003f20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003f22:	4b10      	ldr	r3, [pc, #64]	; (8003f64 <MX_USART2_UART_Init+0x4c>)
 8003f24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003f28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003f2a:	4b0e      	ldr	r3, [pc, #56]	; (8003f64 <MX_USART2_UART_Init+0x4c>)
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003f30:	4b0c      	ldr	r3, [pc, #48]	; (8003f64 <MX_USART2_UART_Init+0x4c>)
 8003f32:	2200      	movs	r2, #0
 8003f34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003f36:	4b0b      	ldr	r3, [pc, #44]	; (8003f64 <MX_USART2_UART_Init+0x4c>)
 8003f38:	2200      	movs	r2, #0
 8003f3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003f3c:	4b09      	ldr	r3, [pc, #36]	; (8003f64 <MX_USART2_UART_Init+0x4c>)
 8003f3e:	220c      	movs	r2, #12
 8003f40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f42:	4b08      	ldr	r3, [pc, #32]	; (8003f64 <MX_USART2_UART_Init+0x4c>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f48:	4b06      	ldr	r3, [pc, #24]	; (8003f64 <MX_USART2_UART_Init+0x4c>)
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003f4e:	4805      	ldr	r0, [pc, #20]	; (8003f64 <MX_USART2_UART_Init+0x4c>)
 8003f50:	f7fe fc34 	bl	80027bc <HAL_UART_Init>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d001      	beq.n	8003f5e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003f5a:	f7ff ff59 	bl	8003e10 <Error_Handler>
  }

}
 8003f5e:	bf00      	nop
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	20000458 	.word	0x20000458
 8003f68:	40004400 	.word	0x40004400

08003f6c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b08a      	sub	sp, #40	; 0x28
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f74:	f107 0314 	add.w	r3, r7, #20
 8003f78:	2200      	movs	r2, #0
 8003f7a:	601a      	str	r2, [r3, #0]
 8003f7c:	605a      	str	r2, [r3, #4]
 8003f7e:	609a      	str	r2, [r3, #8]
 8003f80:	60da      	str	r2, [r3, #12]
 8003f82:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a34      	ldr	r2, [pc, #208]	; (800405c <HAL_UART_MspInit+0xf0>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d161      	bne.n	8004052 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003f8e:	2300      	movs	r3, #0
 8003f90:	613b      	str	r3, [r7, #16]
 8003f92:	4b33      	ldr	r3, [pc, #204]	; (8004060 <HAL_UART_MspInit+0xf4>)
 8003f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f96:	4a32      	ldr	r2, [pc, #200]	; (8004060 <HAL_UART_MspInit+0xf4>)
 8003f98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f9c:	6413      	str	r3, [r2, #64]	; 0x40
 8003f9e:	4b30      	ldr	r3, [pc, #192]	; (8004060 <HAL_UART_MspInit+0xf4>)
 8003fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fa6:	613b      	str	r3, [r7, #16]
 8003fa8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003faa:	2300      	movs	r3, #0
 8003fac:	60fb      	str	r3, [r7, #12]
 8003fae:	4b2c      	ldr	r3, [pc, #176]	; (8004060 <HAL_UART_MspInit+0xf4>)
 8003fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb2:	4a2b      	ldr	r2, [pc, #172]	; (8004060 <HAL_UART_MspInit+0xf4>)
 8003fb4:	f043 0301 	orr.w	r3, r3, #1
 8003fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8003fba:	4b29      	ldr	r3, [pc, #164]	; (8004060 <HAL_UART_MspInit+0xf4>)
 8003fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fbe:	f003 0301 	and.w	r3, r3, #1
 8003fc2:	60fb      	str	r3, [r7, #12]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003fc6:	230c      	movs	r3, #12
 8003fc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fca:	2302      	movs	r3, #2
 8003fcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003fd6:	2307      	movs	r3, #7
 8003fd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fda:	f107 0314 	add.w	r3, r7, #20
 8003fde:	4619      	mov	r1, r3
 8003fe0:	4820      	ldr	r0, [pc, #128]	; (8004064 <HAL_UART_MspInit+0xf8>)
 8003fe2:	f7fc ff3f 	bl	8000e64 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003fe6:	4b20      	ldr	r3, [pc, #128]	; (8004068 <HAL_UART_MspInit+0xfc>)
 8003fe8:	4a20      	ldr	r2, [pc, #128]	; (800406c <HAL_UART_MspInit+0x100>)
 8003fea:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003fec:	4b1e      	ldr	r3, [pc, #120]	; (8004068 <HAL_UART_MspInit+0xfc>)
 8003fee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003ff2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003ff4:	4b1c      	ldr	r3, [pc, #112]	; (8004068 <HAL_UART_MspInit+0xfc>)
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ffa:	4b1b      	ldr	r3, [pc, #108]	; (8004068 <HAL_UART_MspInit+0xfc>)
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004000:	4b19      	ldr	r3, [pc, #100]	; (8004068 <HAL_UART_MspInit+0xfc>)
 8004002:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004006:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004008:	4b17      	ldr	r3, [pc, #92]	; (8004068 <HAL_UART_MspInit+0xfc>)
 800400a:	2200      	movs	r2, #0
 800400c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800400e:	4b16      	ldr	r3, [pc, #88]	; (8004068 <HAL_UART_MspInit+0xfc>)
 8004010:	2200      	movs	r2, #0
 8004012:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8004014:	4b14      	ldr	r3, [pc, #80]	; (8004068 <HAL_UART_MspInit+0xfc>)
 8004016:	2200      	movs	r2, #0
 8004018:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800401a:	4b13      	ldr	r3, [pc, #76]	; (8004068 <HAL_UART_MspInit+0xfc>)
 800401c:	2200      	movs	r2, #0
 800401e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004020:	4b11      	ldr	r3, [pc, #68]	; (8004068 <HAL_UART_MspInit+0xfc>)
 8004022:	2200      	movs	r2, #0
 8004024:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004026:	4810      	ldr	r0, [pc, #64]	; (8004068 <HAL_UART_MspInit+0xfc>)
 8004028:	f7fc fc12 	bl	8000850 <HAL_DMA_Init>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d001      	beq.n	8004036 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8004032:	f7ff feed 	bl	8003e10 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a0b      	ldr	r2, [pc, #44]	; (8004068 <HAL_UART_MspInit+0xfc>)
 800403a:	635a      	str	r2, [r3, #52]	; 0x34
 800403c:	4a0a      	ldr	r2, [pc, #40]	; (8004068 <HAL_UART_MspInit+0xfc>)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004042:	2200      	movs	r2, #0
 8004044:	2100      	movs	r1, #0
 8004046:	2026      	movs	r0, #38	; 0x26
 8004048:	f7fc fbcb 	bl	80007e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800404c:	2026      	movs	r0, #38	; 0x26
 800404e:	f7fc fbe4 	bl	800081a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004052:	bf00      	nop
 8004054:	3728      	adds	r7, #40	; 0x28
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	40004400 	.word	0x40004400
 8004060:	40023800 	.word	0x40023800
 8004064:	40020000 	.word	0x40020000
 8004068:	200004e0 	.word	0x200004e0
 800406c:	40026088 	.word	0x40026088

08004070 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004070:	f8df d034 	ldr.w	sp, [pc, #52]	; 80040a8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004074:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004076:	e003      	b.n	8004080 <LoopCopyDataInit>

08004078 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004078:	4b0c      	ldr	r3, [pc, #48]	; (80040ac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800407a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800407c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800407e:	3104      	adds	r1, #4

08004080 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004080:	480b      	ldr	r0, [pc, #44]	; (80040b0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004082:	4b0c      	ldr	r3, [pc, #48]	; (80040b4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004084:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004086:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004088:	d3f6      	bcc.n	8004078 <CopyDataInit>
  ldr  r2, =_sbss
 800408a:	4a0b      	ldr	r2, [pc, #44]	; (80040b8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800408c:	e002      	b.n	8004094 <LoopFillZerobss>

0800408e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800408e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004090:	f842 3b04 	str.w	r3, [r2], #4

08004094 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004094:	4b09      	ldr	r3, [pc, #36]	; (80040bc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004096:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004098:	d3f9      	bcc.n	800408e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800409a:	f7ff ff27 	bl	8003eec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800409e:	f000 f811 	bl	80040c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80040a2:	f7ff fd29 	bl	8003af8 <main>
  bx  lr    
 80040a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80040a8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80040ac:	08004274 	.word	0x08004274
  ldr  r0, =_sdata
 80040b0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80040b4:	2000043c 	.word	0x2000043c
  ldr  r2, =_sbss
 80040b8:	2000043c 	.word	0x2000043c
  ldr  r3, = _ebss
 80040bc:	2000054c 	.word	0x2000054c

080040c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80040c0:	e7fe      	b.n	80040c0 <ADC_IRQHandler>
	...

080040c4 <__libc_init_array>:
 80040c4:	b570      	push	{r4, r5, r6, lr}
 80040c6:	4e0d      	ldr	r6, [pc, #52]	; (80040fc <__libc_init_array+0x38>)
 80040c8:	4c0d      	ldr	r4, [pc, #52]	; (8004100 <__libc_init_array+0x3c>)
 80040ca:	1ba4      	subs	r4, r4, r6
 80040cc:	10a4      	asrs	r4, r4, #2
 80040ce:	2500      	movs	r5, #0
 80040d0:	42a5      	cmp	r5, r4
 80040d2:	d109      	bne.n	80040e8 <__libc_init_array+0x24>
 80040d4:	4e0b      	ldr	r6, [pc, #44]	; (8004104 <__libc_init_array+0x40>)
 80040d6:	4c0c      	ldr	r4, [pc, #48]	; (8004108 <__libc_init_array+0x44>)
 80040d8:	f000 f89c 	bl	8004214 <_init>
 80040dc:	1ba4      	subs	r4, r4, r6
 80040de:	10a4      	asrs	r4, r4, #2
 80040e0:	2500      	movs	r5, #0
 80040e2:	42a5      	cmp	r5, r4
 80040e4:	d105      	bne.n	80040f2 <__libc_init_array+0x2e>
 80040e6:	bd70      	pop	{r4, r5, r6, pc}
 80040e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80040ec:	4798      	blx	r3
 80040ee:	3501      	adds	r5, #1
 80040f0:	e7ee      	b.n	80040d0 <__libc_init_array+0xc>
 80040f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80040f6:	4798      	blx	r3
 80040f8:	3501      	adds	r5, #1
 80040fa:	e7f2      	b.n	80040e2 <__libc_init_array+0x1e>
 80040fc:	08004268 	.word	0x08004268
 8004100:	08004268 	.word	0x08004268
 8004104:	08004268 	.word	0x08004268
 8004108:	08004270 	.word	0x08004270

0800410c <memset>:
 800410c:	4402      	add	r2, r0
 800410e:	4603      	mov	r3, r0
 8004110:	4293      	cmp	r3, r2
 8004112:	d100      	bne.n	8004116 <memset+0xa>
 8004114:	4770      	bx	lr
 8004116:	f803 1b01 	strb.w	r1, [r3], #1
 800411a:	e7f9      	b.n	8004110 <memset+0x4>

0800411c <register_fini>:
 800411c:	4b02      	ldr	r3, [pc, #8]	; (8004128 <register_fini+0xc>)
 800411e:	b113      	cbz	r3, 8004126 <register_fini+0xa>
 8004120:	4802      	ldr	r0, [pc, #8]	; (800412c <register_fini+0x10>)
 8004122:	f000 b805 	b.w	8004130 <atexit>
 8004126:	4770      	bx	lr
 8004128:	00000000 	.word	0x00000000
 800412c:	0800413d 	.word	0x0800413d

08004130 <atexit>:
 8004130:	2300      	movs	r3, #0
 8004132:	4601      	mov	r1, r0
 8004134:	461a      	mov	r2, r3
 8004136:	4618      	mov	r0, r3
 8004138:	f000 b816 	b.w	8004168 <__register_exitproc>

0800413c <__libc_fini_array>:
 800413c:	b538      	push	{r3, r4, r5, lr}
 800413e:	4d07      	ldr	r5, [pc, #28]	; (800415c <__libc_fini_array+0x20>)
 8004140:	4c07      	ldr	r4, [pc, #28]	; (8004160 <__libc_fini_array+0x24>)
 8004142:	1b64      	subs	r4, r4, r5
 8004144:	10a4      	asrs	r4, r4, #2
 8004146:	b91c      	cbnz	r4, 8004150 <__libc_fini_array+0x14>
 8004148:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800414c:	f000 b868 	b.w	8004220 <_fini>
 8004150:	3c01      	subs	r4, #1
 8004152:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8004156:	4798      	blx	r3
 8004158:	e7f5      	b.n	8004146 <__libc_fini_array+0xa>
 800415a:	bf00      	nop
 800415c:	08004270 	.word	0x08004270
 8004160:	08004274 	.word	0x08004274

08004164 <__retarget_lock_acquire_recursive>:
 8004164:	4770      	bx	lr

08004166 <__retarget_lock_release_recursive>:
 8004166:	4770      	bx	lr

08004168 <__register_exitproc>:
 8004168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800416c:	4c26      	ldr	r4, [pc, #152]	; (8004208 <__register_exitproc+0xa0>)
 800416e:	4606      	mov	r6, r0
 8004170:	6820      	ldr	r0, [r4, #0]
 8004172:	4698      	mov	r8, r3
 8004174:	460f      	mov	r7, r1
 8004176:	4691      	mov	r9, r2
 8004178:	f7ff fff4 	bl	8004164 <__retarget_lock_acquire_recursive>
 800417c:	4b23      	ldr	r3, [pc, #140]	; (800420c <__register_exitproc+0xa4>)
 800417e:	681d      	ldr	r5, [r3, #0]
 8004180:	f8d5 0148 	ldr.w	r0, [r5, #328]	; 0x148
 8004184:	b918      	cbnz	r0, 800418e <__register_exitproc+0x26>
 8004186:	f505 70a6 	add.w	r0, r5, #332	; 0x14c
 800418a:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 800418e:	6843      	ldr	r3, [r0, #4]
 8004190:	2b1f      	cmp	r3, #31
 8004192:	dd19      	ble.n	80041c8 <__register_exitproc+0x60>
 8004194:	4b1e      	ldr	r3, [pc, #120]	; (8004210 <__register_exitproc+0xa8>)
 8004196:	b933      	cbnz	r3, 80041a6 <__register_exitproc+0x3e>
 8004198:	6820      	ldr	r0, [r4, #0]
 800419a:	f7ff ffe4 	bl	8004166 <__retarget_lock_release_recursive>
 800419e:	f04f 30ff 	mov.w	r0, #4294967295
 80041a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80041a6:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80041aa:	f3af 8000 	nop.w
 80041ae:	2800      	cmp	r0, #0
 80041b0:	d0f2      	beq.n	8004198 <__register_exitproc+0x30>
 80041b2:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 80041b6:	6003      	str	r3, [r0, #0]
 80041b8:	2200      	movs	r2, #0
 80041ba:	6042      	str	r2, [r0, #4]
 80041bc:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 80041c0:	f8c0 2188 	str.w	r2, [r0, #392]	; 0x188
 80041c4:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
 80041c8:	6843      	ldr	r3, [r0, #4]
 80041ca:	b19e      	cbz	r6, 80041f4 <__register_exitproc+0x8c>
 80041cc:	eb00 0583 	add.w	r5, r0, r3, lsl #2
 80041d0:	2201      	movs	r2, #1
 80041d2:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
 80041d6:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
 80041da:	409a      	lsls	r2, r3
 80041dc:	4311      	orrs	r1, r2
 80041de:	2e02      	cmp	r6, #2
 80041e0:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
 80041e4:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
 80041e8:	bf02      	ittt	eq
 80041ea:	f8d0 118c 	ldreq.w	r1, [r0, #396]	; 0x18c
 80041ee:	430a      	orreq	r2, r1
 80041f0:	f8c0 218c 	streq.w	r2, [r0, #396]	; 0x18c
 80041f4:	1c5a      	adds	r2, r3, #1
 80041f6:	3302      	adds	r3, #2
 80041f8:	6042      	str	r2, [r0, #4]
 80041fa:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
 80041fe:	6820      	ldr	r0, [r4, #0]
 8004200:	f7ff ffb1 	bl	8004166 <__retarget_lock_release_recursive>
 8004204:	2000      	movs	r0, #0
 8004206:	e7cc      	b.n	80041a2 <__register_exitproc+0x3a>
 8004208:	20000438 	.word	0x20000438
 800420c:	0800425c 	.word	0x0800425c
 8004210:	00000000 	.word	0x00000000

08004214 <_init>:
 8004214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004216:	bf00      	nop
 8004218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800421a:	bc08      	pop	{r3}
 800421c:	469e      	mov	lr, r3
 800421e:	4770      	bx	lr

08004220 <_fini>:
 8004220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004222:	bf00      	nop
 8004224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004226:	bc08      	pop	{r3}
 8004228:	469e      	mov	lr, r3
 800422a:	4770      	bx	lr
