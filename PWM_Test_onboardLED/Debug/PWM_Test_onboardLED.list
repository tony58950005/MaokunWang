
PWM_Test_onboardLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037ec  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080039b0  080039b0  000139b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039c8  080039c8  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  080039c8  080039c8  000139c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080039d0  080039d0  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039d0  080039d0  000139d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039d4  080039d4  000139d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080039d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  2000001c  080039f4  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  080039f4  000200c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c872  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e63  00000000  00000000  0002c8be  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c78  00000000  00000000  0002e728  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b60  00000000  00000000  0002f3a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021630  00000000  00000000  0002ff00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a699  00000000  00000000  00051530  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cb1b9  00000000  00000000  0005bbc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00126d82  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003304  00000000  00000000  00126e00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000001c 	.word	0x2000001c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003998 	.word	0x08003998

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000020 	.word	0x20000020
 8000200:	08003998 	.word	0x08003998

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000508:	4b0e      	ldr	r3, [pc, #56]	; (8000544 <HAL_Init+0x40>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a0d      	ldr	r2, [pc, #52]	; (8000544 <HAL_Init+0x40>)
 800050e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000512:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000514:	4b0b      	ldr	r3, [pc, #44]	; (8000544 <HAL_Init+0x40>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a0a      	ldr	r2, [pc, #40]	; (8000544 <HAL_Init+0x40>)
 800051a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800051e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000520:	4b08      	ldr	r3, [pc, #32]	; (8000544 <HAL_Init+0x40>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a07      	ldr	r2, [pc, #28]	; (8000544 <HAL_Init+0x40>)
 8000526:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800052a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800052c:	2003      	movs	r0, #3
 800052e:	f000 f94d 	bl	80007cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000532:	2000      	movs	r0, #0
 8000534:	f000 f808 	bl	8000548 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000538:	f003 f80a 	bl	8003550 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800053c:	2300      	movs	r3, #0
}
 800053e:	4618      	mov	r0, r3
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	40023c00 	.word	0x40023c00

08000548 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000550:	4b12      	ldr	r3, [pc, #72]	; (800059c <HAL_InitTick+0x54>)
 8000552:	681a      	ldr	r2, [r3, #0]
 8000554:	4b12      	ldr	r3, [pc, #72]	; (80005a0 <HAL_InitTick+0x58>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	4619      	mov	r1, r3
 800055a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800055e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000562:	fbb2 f3f3 	udiv	r3, r2, r3
 8000566:	4618      	mov	r0, r3
 8000568:	f000 f965 	bl	8000836 <HAL_SYSTICK_Config>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000572:	2301      	movs	r3, #1
 8000574:	e00e      	b.n	8000594 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	2b0f      	cmp	r3, #15
 800057a:	d80a      	bhi.n	8000592 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800057c:	2200      	movs	r2, #0
 800057e:	6879      	ldr	r1, [r7, #4]
 8000580:	f04f 30ff 	mov.w	r0, #4294967295
 8000584:	f000 f92d 	bl	80007e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000588:	4a06      	ldr	r2, [pc, #24]	; (80005a4 <HAL_InitTick+0x5c>)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800058e:	2300      	movs	r3, #0
 8000590:	e000      	b.n	8000594 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000592:	2301      	movs	r3, #1
}
 8000594:	4618      	mov	r0, r3
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	20000018 	.word	0x20000018
 80005a0:	20000004 	.word	0x20000004
 80005a4:	20000000 	.word	0x20000000

080005a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005ac:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <HAL_IncTick+0x20>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	461a      	mov	r2, r3
 80005b2:	4b06      	ldr	r3, [pc, #24]	; (80005cc <HAL_IncTick+0x24>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4413      	add	r3, r2
 80005b8:	4a04      	ldr	r2, [pc, #16]	; (80005cc <HAL_IncTick+0x24>)
 80005ba:	6013      	str	r3, [r2, #0]
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	20000004 	.word	0x20000004
 80005cc:	20000038 	.word	0x20000038

080005d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  return uwTick;
 80005d4:	4b03      	ldr	r3, [pc, #12]	; (80005e4 <HAL_GetTick+0x14>)
 80005d6:	681b      	ldr	r3, [r3, #0]
}
 80005d8:	4618      	mov	r0, r3
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	20000038 	.word	0x20000038

080005e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005f0:	f7ff ffee 	bl	80005d0 <HAL_GetTick>
 80005f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000600:	d005      	beq.n	800060e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000602:	4b09      	ldr	r3, [pc, #36]	; (8000628 <HAL_Delay+0x40>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	461a      	mov	r2, r3
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	4413      	add	r3, r2
 800060c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800060e:	bf00      	nop
 8000610:	f7ff ffde 	bl	80005d0 <HAL_GetTick>
 8000614:	4602      	mov	r2, r0
 8000616:	68bb      	ldr	r3, [r7, #8]
 8000618:	1ad3      	subs	r3, r2, r3
 800061a:	68fa      	ldr	r2, [r7, #12]
 800061c:	429a      	cmp	r2, r3
 800061e:	d8f7      	bhi.n	8000610 <HAL_Delay+0x28>
  {
  }
}
 8000620:	bf00      	nop
 8000622:	3710      	adds	r7, #16
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20000004 	.word	0x20000004

0800062c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800062c:	b480      	push	{r7}
 800062e:	b085      	sub	sp, #20
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	f003 0307 	and.w	r3, r3, #7
 800063a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800063c:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <__NVIC_SetPriorityGrouping+0x44>)
 800063e:	68db      	ldr	r3, [r3, #12]
 8000640:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000642:	68ba      	ldr	r2, [r7, #8]
 8000644:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000648:	4013      	ands	r3, r2
 800064a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000654:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000658:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800065c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800065e:	4a04      	ldr	r2, [pc, #16]	; (8000670 <__NVIC_SetPriorityGrouping+0x44>)
 8000660:	68bb      	ldr	r3, [r7, #8]
 8000662:	60d3      	str	r3, [r2, #12]
}
 8000664:	bf00      	nop
 8000666:	3714      	adds	r7, #20
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr
 8000670:	e000ed00 	.word	0xe000ed00

08000674 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000678:	4b04      	ldr	r3, [pc, #16]	; (800068c <__NVIC_GetPriorityGrouping+0x18>)
 800067a:	68db      	ldr	r3, [r3, #12]
 800067c:	0a1b      	lsrs	r3, r3, #8
 800067e:	f003 0307 	and.w	r3, r3, #7
}
 8000682:	4618      	mov	r0, r3
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr
 800068c:	e000ed00 	.word	0xe000ed00

08000690 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800069a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	db0b      	blt.n	80006ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	f003 021f 	and.w	r2, r3, #31
 80006a8:	4907      	ldr	r1, [pc, #28]	; (80006c8 <__NVIC_EnableIRQ+0x38>)
 80006aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ae:	095b      	lsrs	r3, r3, #5
 80006b0:	2001      	movs	r0, #1
 80006b2:	fa00 f202 	lsl.w	r2, r0, r2
 80006b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006ba:	bf00      	nop
 80006bc:	370c      	adds	r7, #12
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	e000e100 	.word	0xe000e100

080006cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	6039      	str	r1, [r7, #0]
 80006d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	db0a      	blt.n	80006f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	b2da      	uxtb	r2, r3
 80006e4:	490c      	ldr	r1, [pc, #48]	; (8000718 <__NVIC_SetPriority+0x4c>)
 80006e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ea:	0112      	lsls	r2, r2, #4
 80006ec:	b2d2      	uxtb	r2, r2
 80006ee:	440b      	add	r3, r1
 80006f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006f4:	e00a      	b.n	800070c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	b2da      	uxtb	r2, r3
 80006fa:	4908      	ldr	r1, [pc, #32]	; (800071c <__NVIC_SetPriority+0x50>)
 80006fc:	79fb      	ldrb	r3, [r7, #7]
 80006fe:	f003 030f 	and.w	r3, r3, #15
 8000702:	3b04      	subs	r3, #4
 8000704:	0112      	lsls	r2, r2, #4
 8000706:	b2d2      	uxtb	r2, r2
 8000708:	440b      	add	r3, r1
 800070a:	761a      	strb	r2, [r3, #24]
}
 800070c:	bf00      	nop
 800070e:	370c      	adds	r7, #12
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr
 8000718:	e000e100 	.word	0xe000e100
 800071c:	e000ed00 	.word	0xe000ed00

08000720 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000720:	b480      	push	{r7}
 8000722:	b089      	sub	sp, #36	; 0x24
 8000724:	af00      	add	r7, sp, #0
 8000726:	60f8      	str	r0, [r7, #12]
 8000728:	60b9      	str	r1, [r7, #8]
 800072a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	f003 0307 	and.w	r3, r3, #7
 8000732:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000734:	69fb      	ldr	r3, [r7, #28]
 8000736:	f1c3 0307 	rsb	r3, r3, #7
 800073a:	2b04      	cmp	r3, #4
 800073c:	bf28      	it	cs
 800073e:	2304      	movcs	r3, #4
 8000740:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000742:	69fb      	ldr	r3, [r7, #28]
 8000744:	3304      	adds	r3, #4
 8000746:	2b06      	cmp	r3, #6
 8000748:	d902      	bls.n	8000750 <NVIC_EncodePriority+0x30>
 800074a:	69fb      	ldr	r3, [r7, #28]
 800074c:	3b03      	subs	r3, #3
 800074e:	e000      	b.n	8000752 <NVIC_EncodePriority+0x32>
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000754:	f04f 32ff 	mov.w	r2, #4294967295
 8000758:	69bb      	ldr	r3, [r7, #24]
 800075a:	fa02 f303 	lsl.w	r3, r2, r3
 800075e:	43da      	mvns	r2, r3
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	401a      	ands	r2, r3
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000768:	f04f 31ff 	mov.w	r1, #4294967295
 800076c:	697b      	ldr	r3, [r7, #20]
 800076e:	fa01 f303 	lsl.w	r3, r1, r3
 8000772:	43d9      	mvns	r1, r3
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000778:	4313      	orrs	r3, r2
         );
}
 800077a:	4618      	mov	r0, r3
 800077c:	3724      	adds	r7, #36	; 0x24
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
	...

08000788 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	3b01      	subs	r3, #1
 8000794:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000798:	d301      	bcc.n	800079e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800079a:	2301      	movs	r3, #1
 800079c:	e00f      	b.n	80007be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800079e:	4a0a      	ldr	r2, [pc, #40]	; (80007c8 <SysTick_Config+0x40>)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	3b01      	subs	r3, #1
 80007a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007a6:	210f      	movs	r1, #15
 80007a8:	f04f 30ff 	mov.w	r0, #4294967295
 80007ac:	f7ff ff8e 	bl	80006cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007b0:	4b05      	ldr	r3, [pc, #20]	; (80007c8 <SysTick_Config+0x40>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007b6:	4b04      	ldr	r3, [pc, #16]	; (80007c8 <SysTick_Config+0x40>)
 80007b8:	2207      	movs	r2, #7
 80007ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007bc:	2300      	movs	r3, #0
}
 80007be:	4618      	mov	r0, r3
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	e000e010 	.word	0xe000e010

080007cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007d4:	6878      	ldr	r0, [r7, #4]
 80007d6:	f7ff ff29 	bl	800062c <__NVIC_SetPriorityGrouping>
}
 80007da:	bf00      	nop
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}

080007e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007e2:	b580      	push	{r7, lr}
 80007e4:	b086      	sub	sp, #24
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	4603      	mov	r3, r0
 80007ea:	60b9      	str	r1, [r7, #8]
 80007ec:	607a      	str	r2, [r7, #4]
 80007ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007f0:	2300      	movs	r3, #0
 80007f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007f4:	f7ff ff3e 	bl	8000674 <__NVIC_GetPriorityGrouping>
 80007f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007fa:	687a      	ldr	r2, [r7, #4]
 80007fc:	68b9      	ldr	r1, [r7, #8]
 80007fe:	6978      	ldr	r0, [r7, #20]
 8000800:	f7ff ff8e 	bl	8000720 <NVIC_EncodePriority>
 8000804:	4602      	mov	r2, r0
 8000806:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800080a:	4611      	mov	r1, r2
 800080c:	4618      	mov	r0, r3
 800080e:	f7ff ff5d 	bl	80006cc <__NVIC_SetPriority>
}
 8000812:	bf00      	nop
 8000814:	3718      	adds	r7, #24
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}

0800081a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800081a:	b580      	push	{r7, lr}
 800081c:	b082      	sub	sp, #8
 800081e:	af00      	add	r7, sp, #0
 8000820:	4603      	mov	r3, r0
 8000822:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000828:	4618      	mov	r0, r3
 800082a:	f7ff ff31 	bl	8000690 <__NVIC_EnableIRQ>
}
 800082e:	bf00      	nop
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}

08000836 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000836:	b580      	push	{r7, lr}
 8000838:	b082      	sub	sp, #8
 800083a:	af00      	add	r7, sp, #0
 800083c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800083e:	6878      	ldr	r0, [r7, #4]
 8000840:	f7ff ffa2 	bl	8000788 <SysTick_Config>
 8000844:	4603      	mov	r3, r0
}
 8000846:	4618      	mov	r0, r3
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}

0800084e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800084e:	b480      	push	{r7}
 8000850:	b083      	sub	sp, #12
 8000852:	af00      	add	r7, sp, #0
 8000854:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800085c:	b2db      	uxtb	r3, r3
 800085e:	2b02      	cmp	r3, #2
 8000860:	d004      	beq.n	800086c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	2280      	movs	r2, #128	; 0x80
 8000866:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000868:	2301      	movs	r3, #1
 800086a:	e00c      	b.n	8000886 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	2205      	movs	r2, #5
 8000870:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	681a      	ldr	r2, [r3, #0]
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	f022 0201 	bic.w	r2, r2, #1
 8000882:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000884:	2300      	movs	r3, #0
}
 8000886:	4618      	mov	r0, r3
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
	...

08000894 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000894:	b480      	push	{r7}
 8000896:	b089      	sub	sp, #36	; 0x24
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800089e:	2300      	movs	r3, #0
 80008a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80008a2:	2300      	movs	r3, #0
 80008a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80008a6:	2300      	movs	r3, #0
 80008a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80008aa:	2300      	movs	r3, #0
 80008ac:	61fb      	str	r3, [r7, #28]
 80008ae:	e165      	b.n	8000b7c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80008b0:	2201      	movs	r2, #1
 80008b2:	69fb      	ldr	r3, [r7, #28]
 80008b4:	fa02 f303 	lsl.w	r3, r2, r3
 80008b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	697a      	ldr	r2, [r7, #20]
 80008c0:	4013      	ands	r3, r2
 80008c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80008c4:	693a      	ldr	r2, [r7, #16]
 80008c6:	697b      	ldr	r3, [r7, #20]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	f040 8154 	bne.w	8000b76 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	685b      	ldr	r3, [r3, #4]
 80008d2:	2b01      	cmp	r3, #1
 80008d4:	d00b      	beq.n	80008ee <HAL_GPIO_Init+0x5a>
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	685b      	ldr	r3, [r3, #4]
 80008da:	2b02      	cmp	r3, #2
 80008dc:	d007      	beq.n	80008ee <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008e2:	2b11      	cmp	r3, #17
 80008e4:	d003      	beq.n	80008ee <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	685b      	ldr	r3, [r3, #4]
 80008ea:	2b12      	cmp	r3, #18
 80008ec:	d130      	bne.n	8000950 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	689b      	ldr	r3, [r3, #8]
 80008f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80008f4:	69fb      	ldr	r3, [r7, #28]
 80008f6:	005b      	lsls	r3, r3, #1
 80008f8:	2203      	movs	r2, #3
 80008fa:	fa02 f303 	lsl.w	r3, r2, r3
 80008fe:	43db      	mvns	r3, r3
 8000900:	69ba      	ldr	r2, [r7, #24]
 8000902:	4013      	ands	r3, r2
 8000904:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	68da      	ldr	r2, [r3, #12]
 800090a:	69fb      	ldr	r3, [r7, #28]
 800090c:	005b      	lsls	r3, r3, #1
 800090e:	fa02 f303 	lsl.w	r3, r2, r3
 8000912:	69ba      	ldr	r2, [r7, #24]
 8000914:	4313      	orrs	r3, r2
 8000916:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	69ba      	ldr	r2, [r7, #24]
 800091c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000924:	2201      	movs	r2, #1
 8000926:	69fb      	ldr	r3, [r7, #28]
 8000928:	fa02 f303 	lsl.w	r3, r2, r3
 800092c:	43db      	mvns	r3, r3
 800092e:	69ba      	ldr	r2, [r7, #24]
 8000930:	4013      	ands	r3, r2
 8000932:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	091b      	lsrs	r3, r3, #4
 800093a:	f003 0201 	and.w	r2, r3, #1
 800093e:	69fb      	ldr	r3, [r7, #28]
 8000940:	fa02 f303 	lsl.w	r3, r2, r3
 8000944:	69ba      	ldr	r2, [r7, #24]
 8000946:	4313      	orrs	r3, r2
 8000948:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	69ba      	ldr	r2, [r7, #24]
 800094e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	68db      	ldr	r3, [r3, #12]
 8000954:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000956:	69fb      	ldr	r3, [r7, #28]
 8000958:	005b      	lsls	r3, r3, #1
 800095a:	2203      	movs	r2, #3
 800095c:	fa02 f303 	lsl.w	r3, r2, r3
 8000960:	43db      	mvns	r3, r3
 8000962:	69ba      	ldr	r2, [r7, #24]
 8000964:	4013      	ands	r3, r2
 8000966:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	689a      	ldr	r2, [r3, #8]
 800096c:	69fb      	ldr	r3, [r7, #28]
 800096e:	005b      	lsls	r3, r3, #1
 8000970:	fa02 f303 	lsl.w	r3, r2, r3
 8000974:	69ba      	ldr	r2, [r7, #24]
 8000976:	4313      	orrs	r3, r2
 8000978:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	69ba      	ldr	r2, [r7, #24]
 800097e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	685b      	ldr	r3, [r3, #4]
 8000984:	2b02      	cmp	r3, #2
 8000986:	d003      	beq.n	8000990 <HAL_GPIO_Init+0xfc>
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	685b      	ldr	r3, [r3, #4]
 800098c:	2b12      	cmp	r3, #18
 800098e:	d123      	bne.n	80009d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000990:	69fb      	ldr	r3, [r7, #28]
 8000992:	08da      	lsrs	r2, r3, #3
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	3208      	adds	r2, #8
 8000998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800099c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800099e:	69fb      	ldr	r3, [r7, #28]
 80009a0:	f003 0307 	and.w	r3, r3, #7
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	220f      	movs	r2, #15
 80009a8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ac:	43db      	mvns	r3, r3
 80009ae:	69ba      	ldr	r2, [r7, #24]
 80009b0:	4013      	ands	r3, r2
 80009b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	691a      	ldr	r2, [r3, #16]
 80009b8:	69fb      	ldr	r3, [r7, #28]
 80009ba:	f003 0307 	and.w	r3, r3, #7
 80009be:	009b      	lsls	r3, r3, #2
 80009c0:	fa02 f303 	lsl.w	r3, r2, r3
 80009c4:	69ba      	ldr	r2, [r7, #24]
 80009c6:	4313      	orrs	r3, r2
 80009c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80009ca:	69fb      	ldr	r3, [r7, #28]
 80009cc:	08da      	lsrs	r2, r3, #3
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	3208      	adds	r2, #8
 80009d2:	69b9      	ldr	r1, [r7, #24]
 80009d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80009de:	69fb      	ldr	r3, [r7, #28]
 80009e0:	005b      	lsls	r3, r3, #1
 80009e2:	2203      	movs	r2, #3
 80009e4:	fa02 f303 	lsl.w	r3, r2, r3
 80009e8:	43db      	mvns	r3, r3
 80009ea:	69ba      	ldr	r2, [r7, #24]
 80009ec:	4013      	ands	r3, r2
 80009ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	f003 0203 	and.w	r2, r3, #3
 80009f8:	69fb      	ldr	r3, [r7, #28]
 80009fa:	005b      	lsls	r3, r3, #1
 80009fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000a00:	69ba      	ldr	r2, [r7, #24]
 8000a02:	4313      	orrs	r3, r2
 8000a04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	69ba      	ldr	r2, [r7, #24]
 8000a0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	f000 80ae 	beq.w	8000b76 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60fb      	str	r3, [r7, #12]
 8000a1e:	4b5c      	ldr	r3, [pc, #368]	; (8000b90 <HAL_GPIO_Init+0x2fc>)
 8000a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a22:	4a5b      	ldr	r2, [pc, #364]	; (8000b90 <HAL_GPIO_Init+0x2fc>)
 8000a24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a28:	6453      	str	r3, [r2, #68]	; 0x44
 8000a2a:	4b59      	ldr	r3, [pc, #356]	; (8000b90 <HAL_GPIO_Init+0x2fc>)
 8000a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000a36:	4a57      	ldr	r2, [pc, #348]	; (8000b94 <HAL_GPIO_Init+0x300>)
 8000a38:	69fb      	ldr	r3, [r7, #28]
 8000a3a:	089b      	lsrs	r3, r3, #2
 8000a3c:	3302      	adds	r3, #2
 8000a3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a44:	69fb      	ldr	r3, [r7, #28]
 8000a46:	f003 0303 	and.w	r3, r3, #3
 8000a4a:	009b      	lsls	r3, r3, #2
 8000a4c:	220f      	movs	r2, #15
 8000a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a52:	43db      	mvns	r3, r3
 8000a54:	69ba      	ldr	r2, [r7, #24]
 8000a56:	4013      	ands	r3, r2
 8000a58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	4a4e      	ldr	r2, [pc, #312]	; (8000b98 <HAL_GPIO_Init+0x304>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d025      	beq.n	8000aae <HAL_GPIO_Init+0x21a>
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4a4d      	ldr	r2, [pc, #308]	; (8000b9c <HAL_GPIO_Init+0x308>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d01f      	beq.n	8000aaa <HAL_GPIO_Init+0x216>
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4a4c      	ldr	r2, [pc, #304]	; (8000ba0 <HAL_GPIO_Init+0x30c>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d019      	beq.n	8000aa6 <HAL_GPIO_Init+0x212>
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4a4b      	ldr	r2, [pc, #300]	; (8000ba4 <HAL_GPIO_Init+0x310>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d013      	beq.n	8000aa2 <HAL_GPIO_Init+0x20e>
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4a4a      	ldr	r2, [pc, #296]	; (8000ba8 <HAL_GPIO_Init+0x314>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d00d      	beq.n	8000a9e <HAL_GPIO_Init+0x20a>
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4a49      	ldr	r2, [pc, #292]	; (8000bac <HAL_GPIO_Init+0x318>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d007      	beq.n	8000a9a <HAL_GPIO_Init+0x206>
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4a48      	ldr	r2, [pc, #288]	; (8000bb0 <HAL_GPIO_Init+0x31c>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d101      	bne.n	8000a96 <HAL_GPIO_Init+0x202>
 8000a92:	2306      	movs	r3, #6
 8000a94:	e00c      	b.n	8000ab0 <HAL_GPIO_Init+0x21c>
 8000a96:	2307      	movs	r3, #7
 8000a98:	e00a      	b.n	8000ab0 <HAL_GPIO_Init+0x21c>
 8000a9a:	2305      	movs	r3, #5
 8000a9c:	e008      	b.n	8000ab0 <HAL_GPIO_Init+0x21c>
 8000a9e:	2304      	movs	r3, #4
 8000aa0:	e006      	b.n	8000ab0 <HAL_GPIO_Init+0x21c>
 8000aa2:	2303      	movs	r3, #3
 8000aa4:	e004      	b.n	8000ab0 <HAL_GPIO_Init+0x21c>
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	e002      	b.n	8000ab0 <HAL_GPIO_Init+0x21c>
 8000aaa:	2301      	movs	r3, #1
 8000aac:	e000      	b.n	8000ab0 <HAL_GPIO_Init+0x21c>
 8000aae:	2300      	movs	r3, #0
 8000ab0:	69fa      	ldr	r2, [r7, #28]
 8000ab2:	f002 0203 	and.w	r2, r2, #3
 8000ab6:	0092      	lsls	r2, r2, #2
 8000ab8:	4093      	lsls	r3, r2
 8000aba:	69ba      	ldr	r2, [r7, #24]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ac0:	4934      	ldr	r1, [pc, #208]	; (8000b94 <HAL_GPIO_Init+0x300>)
 8000ac2:	69fb      	ldr	r3, [r7, #28]
 8000ac4:	089b      	lsrs	r3, r3, #2
 8000ac6:	3302      	adds	r3, #2
 8000ac8:	69ba      	ldr	r2, [r7, #24]
 8000aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ace:	4b39      	ldr	r3, [pc, #228]	; (8000bb4 <HAL_GPIO_Init+0x320>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ad4:	693b      	ldr	r3, [r7, #16]
 8000ad6:	43db      	mvns	r3, r3
 8000ad8:	69ba      	ldr	r2, [r7, #24]
 8000ada:	4013      	ands	r3, r2
 8000adc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d003      	beq.n	8000af2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000aea:	69ba      	ldr	r2, [r7, #24]
 8000aec:	693b      	ldr	r3, [r7, #16]
 8000aee:	4313      	orrs	r3, r2
 8000af0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000af2:	4a30      	ldr	r2, [pc, #192]	; (8000bb4 <HAL_GPIO_Init+0x320>)
 8000af4:	69bb      	ldr	r3, [r7, #24]
 8000af6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000af8:	4b2e      	ldr	r3, [pc, #184]	; (8000bb4 <HAL_GPIO_Init+0x320>)
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000afe:	693b      	ldr	r3, [r7, #16]
 8000b00:	43db      	mvns	r3, r3
 8000b02:	69ba      	ldr	r2, [r7, #24]
 8000b04:	4013      	ands	r3, r2
 8000b06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d003      	beq.n	8000b1c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000b14:	69ba      	ldr	r2, [r7, #24]
 8000b16:	693b      	ldr	r3, [r7, #16]
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000b1c:	4a25      	ldr	r2, [pc, #148]	; (8000bb4 <HAL_GPIO_Init+0x320>)
 8000b1e:	69bb      	ldr	r3, [r7, #24]
 8000b20:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b22:	4b24      	ldr	r3, [pc, #144]	; (8000bb4 <HAL_GPIO_Init+0x320>)
 8000b24:	689b      	ldr	r3, [r3, #8]
 8000b26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b28:	693b      	ldr	r3, [r7, #16]
 8000b2a:	43db      	mvns	r3, r3
 8000b2c:	69ba      	ldr	r2, [r7, #24]
 8000b2e:	4013      	ands	r3, r2
 8000b30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d003      	beq.n	8000b46 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000b3e:	69ba      	ldr	r2, [r7, #24]
 8000b40:	693b      	ldr	r3, [r7, #16]
 8000b42:	4313      	orrs	r3, r2
 8000b44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000b46:	4a1b      	ldr	r2, [pc, #108]	; (8000bb4 <HAL_GPIO_Init+0x320>)
 8000b48:	69bb      	ldr	r3, [r7, #24]
 8000b4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b4c:	4b19      	ldr	r3, [pc, #100]	; (8000bb4 <HAL_GPIO_Init+0x320>)
 8000b4e:	68db      	ldr	r3, [r3, #12]
 8000b50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b52:	693b      	ldr	r3, [r7, #16]
 8000b54:	43db      	mvns	r3, r3
 8000b56:	69ba      	ldr	r2, [r7, #24]
 8000b58:	4013      	ands	r3, r2
 8000b5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d003      	beq.n	8000b70 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000b68:	69ba      	ldr	r2, [r7, #24]
 8000b6a:	693b      	ldr	r3, [r7, #16]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000b70:	4a10      	ldr	r2, [pc, #64]	; (8000bb4 <HAL_GPIO_Init+0x320>)
 8000b72:	69bb      	ldr	r3, [r7, #24]
 8000b74:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b76:	69fb      	ldr	r3, [r7, #28]
 8000b78:	3301      	adds	r3, #1
 8000b7a:	61fb      	str	r3, [r7, #28]
 8000b7c:	69fb      	ldr	r3, [r7, #28]
 8000b7e:	2b0f      	cmp	r3, #15
 8000b80:	f67f ae96 	bls.w	80008b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b84:	bf00      	nop
 8000b86:	3724      	adds	r7, #36	; 0x24
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	40023800 	.word	0x40023800
 8000b94:	40013800 	.word	0x40013800
 8000b98:	40020000 	.word	0x40020000
 8000b9c:	40020400 	.word	0x40020400
 8000ba0:	40020800 	.word	0x40020800
 8000ba4:	40020c00 	.word	0x40020c00
 8000ba8:	40021000 	.word	0x40021000
 8000bac:	40021400 	.word	0x40021400
 8000bb0:	40021800 	.word	0x40021800
 8000bb4:	40013c00 	.word	0x40013c00

08000bb8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	460b      	mov	r3, r1
 8000bc2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	691a      	ldr	r2, [r3, #16]
 8000bc8:	887b      	ldrh	r3, [r7, #2]
 8000bca:	4013      	ands	r3, r2
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d002      	beq.n	8000bd6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	73fb      	strb	r3, [r7, #15]
 8000bd4:	e001      	b.n	8000bda <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3714      	adds	r7, #20
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
 8000bf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d101      	bne.n	8000bfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	e0cc      	b.n	8000d96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000bfc:	4b68      	ldr	r3, [pc, #416]	; (8000da0 <HAL_RCC_ClockConfig+0x1b8>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f003 030f 	and.w	r3, r3, #15
 8000c04:	683a      	ldr	r2, [r7, #0]
 8000c06:	429a      	cmp	r2, r3
 8000c08:	d90c      	bls.n	8000c24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c0a:	4b65      	ldr	r3, [pc, #404]	; (8000da0 <HAL_RCC_ClockConfig+0x1b8>)
 8000c0c:	683a      	ldr	r2, [r7, #0]
 8000c0e:	b2d2      	uxtb	r2, r2
 8000c10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c12:	4b63      	ldr	r3, [pc, #396]	; (8000da0 <HAL_RCC_ClockConfig+0x1b8>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f003 030f 	and.w	r3, r3, #15
 8000c1a:	683a      	ldr	r2, [r7, #0]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d001      	beq.n	8000c24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000c20:	2301      	movs	r3, #1
 8000c22:	e0b8      	b.n	8000d96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f003 0302 	and.w	r3, r3, #2
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d020      	beq.n	8000c72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f003 0304 	and.w	r3, r3, #4
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d005      	beq.n	8000c48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000c3c:	4b59      	ldr	r3, [pc, #356]	; (8000da4 <HAL_RCC_ClockConfig+0x1bc>)
 8000c3e:	689b      	ldr	r3, [r3, #8]
 8000c40:	4a58      	ldr	r2, [pc, #352]	; (8000da4 <HAL_RCC_ClockConfig+0x1bc>)
 8000c42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000c46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f003 0308 	and.w	r3, r3, #8
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d005      	beq.n	8000c60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000c54:	4b53      	ldr	r3, [pc, #332]	; (8000da4 <HAL_RCC_ClockConfig+0x1bc>)
 8000c56:	689b      	ldr	r3, [r3, #8]
 8000c58:	4a52      	ldr	r2, [pc, #328]	; (8000da4 <HAL_RCC_ClockConfig+0x1bc>)
 8000c5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000c5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000c60:	4b50      	ldr	r3, [pc, #320]	; (8000da4 <HAL_RCC_ClockConfig+0x1bc>)
 8000c62:	689b      	ldr	r3, [r3, #8]
 8000c64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	689b      	ldr	r3, [r3, #8]
 8000c6c:	494d      	ldr	r1, [pc, #308]	; (8000da4 <HAL_RCC_ClockConfig+0x1bc>)
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d044      	beq.n	8000d08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d107      	bne.n	8000c96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c86:	4b47      	ldr	r3, [pc, #284]	; (8000da4 <HAL_RCC_ClockConfig+0x1bc>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d119      	bne.n	8000cc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000c92:	2301      	movs	r3, #1
 8000c94:	e07f      	b.n	8000d96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	2b02      	cmp	r3, #2
 8000c9c:	d003      	beq.n	8000ca6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000ca2:	2b03      	cmp	r3, #3
 8000ca4:	d107      	bne.n	8000cb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ca6:	4b3f      	ldr	r3, [pc, #252]	; (8000da4 <HAL_RCC_ClockConfig+0x1bc>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d109      	bne.n	8000cc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e06f      	b.n	8000d96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cb6:	4b3b      	ldr	r3, [pc, #236]	; (8000da4 <HAL_RCC_ClockConfig+0x1bc>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f003 0302 	and.w	r3, r3, #2
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d101      	bne.n	8000cc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e067      	b.n	8000d96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000cc6:	4b37      	ldr	r3, [pc, #220]	; (8000da4 <HAL_RCC_ClockConfig+0x1bc>)
 8000cc8:	689b      	ldr	r3, [r3, #8]
 8000cca:	f023 0203 	bic.w	r2, r3, #3
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	4934      	ldr	r1, [pc, #208]	; (8000da4 <HAL_RCC_ClockConfig+0x1bc>)
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000cd8:	f7ff fc7a 	bl	80005d0 <HAL_GetTick>
 8000cdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000cde:	e00a      	b.n	8000cf6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ce0:	f7ff fc76 	bl	80005d0 <HAL_GetTick>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	1ad3      	subs	r3, r2, r3
 8000cea:	f241 3288 	movw	r2, #5000	; 0x1388
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d901      	bls.n	8000cf6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000cf2:	2303      	movs	r3, #3
 8000cf4:	e04f      	b.n	8000d96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000cf6:	4b2b      	ldr	r3, [pc, #172]	; (8000da4 <HAL_RCC_ClockConfig+0x1bc>)
 8000cf8:	689b      	ldr	r3, [r3, #8]
 8000cfa:	f003 020c 	and.w	r2, r3, #12
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	009b      	lsls	r3, r3, #2
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d1eb      	bne.n	8000ce0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000d08:	4b25      	ldr	r3, [pc, #148]	; (8000da0 <HAL_RCC_ClockConfig+0x1b8>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f003 030f 	and.w	r3, r3, #15
 8000d10:	683a      	ldr	r2, [r7, #0]
 8000d12:	429a      	cmp	r2, r3
 8000d14:	d20c      	bcs.n	8000d30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d16:	4b22      	ldr	r3, [pc, #136]	; (8000da0 <HAL_RCC_ClockConfig+0x1b8>)
 8000d18:	683a      	ldr	r2, [r7, #0]
 8000d1a:	b2d2      	uxtb	r2, r2
 8000d1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d1e:	4b20      	ldr	r3, [pc, #128]	; (8000da0 <HAL_RCC_ClockConfig+0x1b8>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f003 030f 	and.w	r3, r3, #15
 8000d26:	683a      	ldr	r2, [r7, #0]
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	d001      	beq.n	8000d30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	e032      	b.n	8000d96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f003 0304 	and.w	r3, r3, #4
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d008      	beq.n	8000d4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d3c:	4b19      	ldr	r3, [pc, #100]	; (8000da4 <HAL_RCC_ClockConfig+0x1bc>)
 8000d3e:	689b      	ldr	r3, [r3, #8]
 8000d40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	4916      	ldr	r1, [pc, #88]	; (8000da4 <HAL_RCC_ClockConfig+0x1bc>)
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f003 0308 	and.w	r3, r3, #8
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d009      	beq.n	8000d6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000d5a:	4b12      	ldr	r3, [pc, #72]	; (8000da4 <HAL_RCC_ClockConfig+0x1bc>)
 8000d5c:	689b      	ldr	r3, [r3, #8]
 8000d5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	691b      	ldr	r3, [r3, #16]
 8000d66:	00db      	lsls	r3, r3, #3
 8000d68:	490e      	ldr	r1, [pc, #56]	; (8000da4 <HAL_RCC_ClockConfig+0x1bc>)
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000d6e:	f000 f855 	bl	8000e1c <HAL_RCC_GetSysClockFreq>
 8000d72:	4601      	mov	r1, r0
 8000d74:	4b0b      	ldr	r3, [pc, #44]	; (8000da4 <HAL_RCC_ClockConfig+0x1bc>)
 8000d76:	689b      	ldr	r3, [r3, #8]
 8000d78:	091b      	lsrs	r3, r3, #4
 8000d7a:	f003 030f 	and.w	r3, r3, #15
 8000d7e:	4a0a      	ldr	r2, [pc, #40]	; (8000da8 <HAL_RCC_ClockConfig+0x1c0>)
 8000d80:	5cd3      	ldrb	r3, [r2, r3]
 8000d82:	fa21 f303 	lsr.w	r3, r1, r3
 8000d86:	4a09      	ldr	r2, [pc, #36]	; (8000dac <HAL_RCC_ClockConfig+0x1c4>)
 8000d88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8000d8a:	4b09      	ldr	r3, [pc, #36]	; (8000db0 <HAL_RCC_ClockConfig+0x1c8>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff fbda 	bl	8000548 <HAL_InitTick>

  return HAL_OK;
 8000d94:	2300      	movs	r3, #0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3710      	adds	r7, #16
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40023c00 	.word	0x40023c00
 8000da4:	40023800 	.word	0x40023800
 8000da8:	080039b0 	.word	0x080039b0
 8000dac:	20000018 	.word	0x20000018
 8000db0:	20000000 	.word	0x20000000

08000db4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000db8:	4b03      	ldr	r3, [pc, #12]	; (8000dc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8000dba:	681b      	ldr	r3, [r3, #0]
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	20000018 	.word	0x20000018

08000dcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000dd0:	f7ff fff0 	bl	8000db4 <HAL_RCC_GetHCLKFreq>
 8000dd4:	4601      	mov	r1, r0
 8000dd6:	4b05      	ldr	r3, [pc, #20]	; (8000dec <HAL_RCC_GetPCLK1Freq+0x20>)
 8000dd8:	689b      	ldr	r3, [r3, #8]
 8000dda:	0a9b      	lsrs	r3, r3, #10
 8000ddc:	f003 0307 	and.w	r3, r3, #7
 8000de0:	4a03      	ldr	r2, [pc, #12]	; (8000df0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000de2:	5cd3      	ldrb	r3, [r2, r3]
 8000de4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	40023800 	.word	0x40023800
 8000df0:	080039c0 	.word	0x080039c0

08000df4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000df8:	f7ff ffdc 	bl	8000db4 <HAL_RCC_GetHCLKFreq>
 8000dfc:	4601      	mov	r1, r0
 8000dfe:	4b05      	ldr	r3, [pc, #20]	; (8000e14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000e00:	689b      	ldr	r3, [r3, #8]
 8000e02:	0b5b      	lsrs	r3, r3, #13
 8000e04:	f003 0307 	and.w	r3, r3, #7
 8000e08:	4a03      	ldr	r2, [pc, #12]	; (8000e18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000e0a:	5cd3      	ldrb	r3, [r2, r3]
 8000e0c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	40023800 	.word	0x40023800
 8000e18:	080039c0 	.word	0x080039c0

08000e1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e1e:	b087      	sub	sp, #28
 8000e20:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8000e22:	2300      	movs	r3, #0
 8000e24:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8000e26:	2300      	movs	r3, #0
 8000e28:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8000e32:	2300      	movs	r3, #0
 8000e34:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000e36:	4bc6      	ldr	r3, [pc, #792]	; (8001150 <HAL_RCC_GetSysClockFreq+0x334>)
 8000e38:	689b      	ldr	r3, [r3, #8]
 8000e3a:	f003 030c 	and.w	r3, r3, #12
 8000e3e:	2b0c      	cmp	r3, #12
 8000e40:	f200 817e 	bhi.w	8001140 <HAL_RCC_GetSysClockFreq+0x324>
 8000e44:	a201      	add	r2, pc, #4	; (adr r2, 8000e4c <HAL_RCC_GetSysClockFreq+0x30>)
 8000e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e4a:	bf00      	nop
 8000e4c:	08000e81 	.word	0x08000e81
 8000e50:	08001141 	.word	0x08001141
 8000e54:	08001141 	.word	0x08001141
 8000e58:	08001141 	.word	0x08001141
 8000e5c:	08000e87 	.word	0x08000e87
 8000e60:	08001141 	.word	0x08001141
 8000e64:	08001141 	.word	0x08001141
 8000e68:	08001141 	.word	0x08001141
 8000e6c:	08000e8d 	.word	0x08000e8d
 8000e70:	08001141 	.word	0x08001141
 8000e74:	08001141 	.word	0x08001141
 8000e78:	08001141 	.word	0x08001141
 8000e7c:	08000fe9 	.word	0x08000fe9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000e80:	4bb4      	ldr	r3, [pc, #720]	; (8001154 <HAL_RCC_GetSysClockFreq+0x338>)
 8000e82:	613b      	str	r3, [r7, #16]
       break;
 8000e84:	e15f      	b.n	8001146 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8000e86:	4bb4      	ldr	r3, [pc, #720]	; (8001158 <HAL_RCC_GetSysClockFreq+0x33c>)
 8000e88:	613b      	str	r3, [r7, #16]
      break;
 8000e8a:	e15c      	b.n	8001146 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000e8c:	4bb0      	ldr	r3, [pc, #704]	; (8001150 <HAL_RCC_GetSysClockFreq+0x334>)
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000e94:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000e96:	4bae      	ldr	r3, [pc, #696]	; (8001150 <HAL_RCC_GetSysClockFreq+0x334>)
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d04a      	beq.n	8000f38 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ea2:	4bab      	ldr	r3, [pc, #684]	; (8001150 <HAL_RCC_GetSysClockFreq+0x334>)
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	099b      	lsrs	r3, r3, #6
 8000ea8:	f04f 0400 	mov.w	r4, #0
 8000eac:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000eb0:	f04f 0200 	mov.w	r2, #0
 8000eb4:	ea03 0501 	and.w	r5, r3, r1
 8000eb8:	ea04 0602 	and.w	r6, r4, r2
 8000ebc:	4629      	mov	r1, r5
 8000ebe:	4632      	mov	r2, r6
 8000ec0:	f04f 0300 	mov.w	r3, #0
 8000ec4:	f04f 0400 	mov.w	r4, #0
 8000ec8:	0154      	lsls	r4, r2, #5
 8000eca:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000ece:	014b      	lsls	r3, r1, #5
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4622      	mov	r2, r4
 8000ed4:	1b49      	subs	r1, r1, r5
 8000ed6:	eb62 0206 	sbc.w	r2, r2, r6
 8000eda:	f04f 0300 	mov.w	r3, #0
 8000ede:	f04f 0400 	mov.w	r4, #0
 8000ee2:	0194      	lsls	r4, r2, #6
 8000ee4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8000ee8:	018b      	lsls	r3, r1, #6
 8000eea:	1a5b      	subs	r3, r3, r1
 8000eec:	eb64 0402 	sbc.w	r4, r4, r2
 8000ef0:	f04f 0100 	mov.w	r1, #0
 8000ef4:	f04f 0200 	mov.w	r2, #0
 8000ef8:	00e2      	lsls	r2, r4, #3
 8000efa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8000efe:	00d9      	lsls	r1, r3, #3
 8000f00:	460b      	mov	r3, r1
 8000f02:	4614      	mov	r4, r2
 8000f04:	195b      	adds	r3, r3, r5
 8000f06:	eb44 0406 	adc.w	r4, r4, r6
 8000f0a:	f04f 0100 	mov.w	r1, #0
 8000f0e:	f04f 0200 	mov.w	r2, #0
 8000f12:	0262      	lsls	r2, r4, #9
 8000f14:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8000f18:	0259      	lsls	r1, r3, #9
 8000f1a:	460b      	mov	r3, r1
 8000f1c:	4614      	mov	r4, r2
 8000f1e:	4618      	mov	r0, r3
 8000f20:	4621      	mov	r1, r4
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	f04f 0400 	mov.w	r4, #0
 8000f28:	461a      	mov	r2, r3
 8000f2a:	4623      	mov	r3, r4
 8000f2c:	f7ff f96a 	bl	8000204 <__aeabi_uldivmod>
 8000f30:	4603      	mov	r3, r0
 8000f32:	460c      	mov	r4, r1
 8000f34:	617b      	str	r3, [r7, #20]
 8000f36:	e049      	b.n	8000fcc <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f38:	4b85      	ldr	r3, [pc, #532]	; (8001150 <HAL_RCC_GetSysClockFreq+0x334>)
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	099b      	lsrs	r3, r3, #6
 8000f3e:	f04f 0400 	mov.w	r4, #0
 8000f42:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000f46:	f04f 0200 	mov.w	r2, #0
 8000f4a:	ea03 0501 	and.w	r5, r3, r1
 8000f4e:	ea04 0602 	and.w	r6, r4, r2
 8000f52:	4629      	mov	r1, r5
 8000f54:	4632      	mov	r2, r6
 8000f56:	f04f 0300 	mov.w	r3, #0
 8000f5a:	f04f 0400 	mov.w	r4, #0
 8000f5e:	0154      	lsls	r4, r2, #5
 8000f60:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000f64:	014b      	lsls	r3, r1, #5
 8000f66:	4619      	mov	r1, r3
 8000f68:	4622      	mov	r2, r4
 8000f6a:	1b49      	subs	r1, r1, r5
 8000f6c:	eb62 0206 	sbc.w	r2, r2, r6
 8000f70:	f04f 0300 	mov.w	r3, #0
 8000f74:	f04f 0400 	mov.w	r4, #0
 8000f78:	0194      	lsls	r4, r2, #6
 8000f7a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8000f7e:	018b      	lsls	r3, r1, #6
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	eb64 0402 	sbc.w	r4, r4, r2
 8000f86:	f04f 0100 	mov.w	r1, #0
 8000f8a:	f04f 0200 	mov.w	r2, #0
 8000f8e:	00e2      	lsls	r2, r4, #3
 8000f90:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8000f94:	00d9      	lsls	r1, r3, #3
 8000f96:	460b      	mov	r3, r1
 8000f98:	4614      	mov	r4, r2
 8000f9a:	195b      	adds	r3, r3, r5
 8000f9c:	eb44 0406 	adc.w	r4, r4, r6
 8000fa0:	f04f 0100 	mov.w	r1, #0
 8000fa4:	f04f 0200 	mov.w	r2, #0
 8000fa8:	02a2      	lsls	r2, r4, #10
 8000faa:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8000fae:	0299      	lsls	r1, r3, #10
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	4614      	mov	r4, r2
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	4621      	mov	r1, r4
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	f04f 0400 	mov.w	r4, #0
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	4623      	mov	r3, r4
 8000fc2:	f7ff f91f 	bl	8000204 <__aeabi_uldivmod>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	460c      	mov	r4, r1
 8000fca:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000fcc:	4b60      	ldr	r3, [pc, #384]	; (8001150 <HAL_RCC_GetSysClockFreq+0x334>)
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	0c1b      	lsrs	r3, r3, #16
 8000fd2:	f003 0303 	and.w	r3, r3, #3
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8000fdc:	697a      	ldr	r2, [r7, #20]
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fe4:	613b      	str	r3, [r7, #16]
      break;
 8000fe6:	e0ae      	b.n	8001146 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000fe8:	4b59      	ldr	r3, [pc, #356]	; (8001150 <HAL_RCC_GetSysClockFreq+0x334>)
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000ff0:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000ff2:	4b57      	ldr	r3, [pc, #348]	; (8001150 <HAL_RCC_GetSysClockFreq+0x334>)
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d04a      	beq.n	8001094 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ffe:	4b54      	ldr	r3, [pc, #336]	; (8001150 <HAL_RCC_GetSysClockFreq+0x334>)
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	099b      	lsrs	r3, r3, #6
 8001004:	f04f 0400 	mov.w	r4, #0
 8001008:	f240 11ff 	movw	r1, #511	; 0x1ff
 800100c:	f04f 0200 	mov.w	r2, #0
 8001010:	ea03 0501 	and.w	r5, r3, r1
 8001014:	ea04 0602 	and.w	r6, r4, r2
 8001018:	4629      	mov	r1, r5
 800101a:	4632      	mov	r2, r6
 800101c:	f04f 0300 	mov.w	r3, #0
 8001020:	f04f 0400 	mov.w	r4, #0
 8001024:	0154      	lsls	r4, r2, #5
 8001026:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800102a:	014b      	lsls	r3, r1, #5
 800102c:	4619      	mov	r1, r3
 800102e:	4622      	mov	r2, r4
 8001030:	1b49      	subs	r1, r1, r5
 8001032:	eb62 0206 	sbc.w	r2, r2, r6
 8001036:	f04f 0300 	mov.w	r3, #0
 800103a:	f04f 0400 	mov.w	r4, #0
 800103e:	0194      	lsls	r4, r2, #6
 8001040:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001044:	018b      	lsls	r3, r1, #6
 8001046:	1a5b      	subs	r3, r3, r1
 8001048:	eb64 0402 	sbc.w	r4, r4, r2
 800104c:	f04f 0100 	mov.w	r1, #0
 8001050:	f04f 0200 	mov.w	r2, #0
 8001054:	00e2      	lsls	r2, r4, #3
 8001056:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800105a:	00d9      	lsls	r1, r3, #3
 800105c:	460b      	mov	r3, r1
 800105e:	4614      	mov	r4, r2
 8001060:	195b      	adds	r3, r3, r5
 8001062:	eb44 0406 	adc.w	r4, r4, r6
 8001066:	f04f 0100 	mov.w	r1, #0
 800106a:	f04f 0200 	mov.w	r2, #0
 800106e:	0262      	lsls	r2, r4, #9
 8001070:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001074:	0259      	lsls	r1, r3, #9
 8001076:	460b      	mov	r3, r1
 8001078:	4614      	mov	r4, r2
 800107a:	4618      	mov	r0, r3
 800107c:	4621      	mov	r1, r4
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	f04f 0400 	mov.w	r4, #0
 8001084:	461a      	mov	r2, r3
 8001086:	4623      	mov	r3, r4
 8001088:	f7ff f8bc 	bl	8000204 <__aeabi_uldivmod>
 800108c:	4603      	mov	r3, r0
 800108e:	460c      	mov	r4, r1
 8001090:	617b      	str	r3, [r7, #20]
 8001092:	e049      	b.n	8001128 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001094:	4b2e      	ldr	r3, [pc, #184]	; (8001150 <HAL_RCC_GetSysClockFreq+0x334>)
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	099b      	lsrs	r3, r3, #6
 800109a:	f04f 0400 	mov.w	r4, #0
 800109e:	f240 11ff 	movw	r1, #511	; 0x1ff
 80010a2:	f04f 0200 	mov.w	r2, #0
 80010a6:	ea03 0501 	and.w	r5, r3, r1
 80010aa:	ea04 0602 	and.w	r6, r4, r2
 80010ae:	4629      	mov	r1, r5
 80010b0:	4632      	mov	r2, r6
 80010b2:	f04f 0300 	mov.w	r3, #0
 80010b6:	f04f 0400 	mov.w	r4, #0
 80010ba:	0154      	lsls	r4, r2, #5
 80010bc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80010c0:	014b      	lsls	r3, r1, #5
 80010c2:	4619      	mov	r1, r3
 80010c4:	4622      	mov	r2, r4
 80010c6:	1b49      	subs	r1, r1, r5
 80010c8:	eb62 0206 	sbc.w	r2, r2, r6
 80010cc:	f04f 0300 	mov.w	r3, #0
 80010d0:	f04f 0400 	mov.w	r4, #0
 80010d4:	0194      	lsls	r4, r2, #6
 80010d6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80010da:	018b      	lsls	r3, r1, #6
 80010dc:	1a5b      	subs	r3, r3, r1
 80010de:	eb64 0402 	sbc.w	r4, r4, r2
 80010e2:	f04f 0100 	mov.w	r1, #0
 80010e6:	f04f 0200 	mov.w	r2, #0
 80010ea:	00e2      	lsls	r2, r4, #3
 80010ec:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80010f0:	00d9      	lsls	r1, r3, #3
 80010f2:	460b      	mov	r3, r1
 80010f4:	4614      	mov	r4, r2
 80010f6:	195b      	adds	r3, r3, r5
 80010f8:	eb44 0406 	adc.w	r4, r4, r6
 80010fc:	f04f 0100 	mov.w	r1, #0
 8001100:	f04f 0200 	mov.w	r2, #0
 8001104:	02a2      	lsls	r2, r4, #10
 8001106:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800110a:	0299      	lsls	r1, r3, #10
 800110c:	460b      	mov	r3, r1
 800110e:	4614      	mov	r4, r2
 8001110:	4618      	mov	r0, r3
 8001112:	4621      	mov	r1, r4
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	f04f 0400 	mov.w	r4, #0
 800111a:	461a      	mov	r2, r3
 800111c:	4623      	mov	r3, r4
 800111e:	f7ff f871 	bl	8000204 <__aeabi_uldivmod>
 8001122:	4603      	mov	r3, r0
 8001124:	460c      	mov	r4, r1
 8001126:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001128:	4b09      	ldr	r3, [pc, #36]	; (8001150 <HAL_RCC_GetSysClockFreq+0x334>)
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	0f1b      	lsrs	r3, r3, #28
 800112e:	f003 0307 	and.w	r3, r3, #7
 8001132:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8001134:	697a      	ldr	r2, [r7, #20]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	fbb2 f3f3 	udiv	r3, r2, r3
 800113c:	613b      	str	r3, [r7, #16]
      break;
 800113e:	e002      	b.n	8001146 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001140:	4b04      	ldr	r3, [pc, #16]	; (8001154 <HAL_RCC_GetSysClockFreq+0x338>)
 8001142:	613b      	str	r3, [r7, #16]
      break;
 8001144:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001146:	693b      	ldr	r3, [r7, #16]
}
 8001148:	4618      	mov	r0, r3
 800114a:	371c      	adds	r7, #28
 800114c:	46bd      	mov	sp, r7
 800114e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001150:	40023800 	.word	0x40023800
 8001154:	00f42400 	.word	0x00f42400
 8001158:	007a1200 	.word	0x007a1200

0800115c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001164:	2300      	movs	r3, #0
 8001166:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f003 0301 	and.w	r3, r3, #1
 8001170:	2b00      	cmp	r3, #0
 8001172:	f000 8083 	beq.w	800127c <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001176:	4b95      	ldr	r3, [pc, #596]	; (80013cc <HAL_RCC_OscConfig+0x270>)
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	f003 030c 	and.w	r3, r3, #12
 800117e:	2b04      	cmp	r3, #4
 8001180:	d019      	beq.n	80011b6 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001182:	4b92      	ldr	r3, [pc, #584]	; (80013cc <HAL_RCC_OscConfig+0x270>)
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800118a:	2b08      	cmp	r3, #8
 800118c:	d106      	bne.n	800119c <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800118e:	4b8f      	ldr	r3, [pc, #572]	; (80013cc <HAL_RCC_OscConfig+0x270>)
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001196:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800119a:	d00c      	beq.n	80011b6 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800119c:	4b8b      	ldr	r3, [pc, #556]	; (80013cc <HAL_RCC_OscConfig+0x270>)
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80011a4:	2b0c      	cmp	r3, #12
 80011a6:	d112      	bne.n	80011ce <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011a8:	4b88      	ldr	r3, [pc, #544]	; (80013cc <HAL_RCC_OscConfig+0x270>)
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011b4:	d10b      	bne.n	80011ce <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011b6:	4b85      	ldr	r3, [pc, #532]	; (80013cc <HAL_RCC_OscConfig+0x270>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d05b      	beq.n	800127a <HAL_RCC_OscConfig+0x11e>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d157      	bne.n	800127a <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e216      	b.n	80015fc <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011d6:	d106      	bne.n	80011e6 <HAL_RCC_OscConfig+0x8a>
 80011d8:	4b7c      	ldr	r3, [pc, #496]	; (80013cc <HAL_RCC_OscConfig+0x270>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a7b      	ldr	r2, [pc, #492]	; (80013cc <HAL_RCC_OscConfig+0x270>)
 80011de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011e2:	6013      	str	r3, [r2, #0]
 80011e4:	e01d      	b.n	8001222 <HAL_RCC_OscConfig+0xc6>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011ee:	d10c      	bne.n	800120a <HAL_RCC_OscConfig+0xae>
 80011f0:	4b76      	ldr	r3, [pc, #472]	; (80013cc <HAL_RCC_OscConfig+0x270>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a75      	ldr	r2, [pc, #468]	; (80013cc <HAL_RCC_OscConfig+0x270>)
 80011f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011fa:	6013      	str	r3, [r2, #0]
 80011fc:	4b73      	ldr	r3, [pc, #460]	; (80013cc <HAL_RCC_OscConfig+0x270>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a72      	ldr	r2, [pc, #456]	; (80013cc <HAL_RCC_OscConfig+0x270>)
 8001202:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001206:	6013      	str	r3, [r2, #0]
 8001208:	e00b      	b.n	8001222 <HAL_RCC_OscConfig+0xc6>
 800120a:	4b70      	ldr	r3, [pc, #448]	; (80013cc <HAL_RCC_OscConfig+0x270>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a6f      	ldr	r2, [pc, #444]	; (80013cc <HAL_RCC_OscConfig+0x270>)
 8001210:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001214:	6013      	str	r3, [r2, #0]
 8001216:	4b6d      	ldr	r3, [pc, #436]	; (80013cc <HAL_RCC_OscConfig+0x270>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a6c      	ldr	r2, [pc, #432]	; (80013cc <HAL_RCC_OscConfig+0x270>)
 800121c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001220:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d013      	beq.n	8001252 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800122a:	f7ff f9d1 	bl	80005d0 <HAL_GetTick>
 800122e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001230:	e008      	b.n	8001244 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001232:	f7ff f9cd 	bl	80005d0 <HAL_GetTick>
 8001236:	4602      	mov	r2, r0
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	2b64      	cmp	r3, #100	; 0x64
 800123e:	d901      	bls.n	8001244 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001240:	2303      	movs	r3, #3
 8001242:	e1db      	b.n	80015fc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001244:	4b61      	ldr	r3, [pc, #388]	; (80013cc <HAL_RCC_OscConfig+0x270>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124c:	2b00      	cmp	r3, #0
 800124e:	d0f0      	beq.n	8001232 <HAL_RCC_OscConfig+0xd6>
 8001250:	e014      	b.n	800127c <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001252:	f7ff f9bd 	bl	80005d0 <HAL_GetTick>
 8001256:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001258:	e008      	b.n	800126c <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800125a:	f7ff f9b9 	bl	80005d0 <HAL_GetTick>
 800125e:	4602      	mov	r2, r0
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	1ad3      	subs	r3, r2, r3
 8001264:	2b64      	cmp	r3, #100	; 0x64
 8001266:	d901      	bls.n	800126c <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8001268:	2303      	movs	r3, #3
 800126a:	e1c7      	b.n	80015fc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800126c:	4b57      	ldr	r3, [pc, #348]	; (80013cc <HAL_RCC_OscConfig+0x270>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001274:	2b00      	cmp	r3, #0
 8001276:	d1f0      	bne.n	800125a <HAL_RCC_OscConfig+0xfe>
 8001278:	e000      	b.n	800127c <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800127a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f003 0302 	and.w	r3, r3, #2
 8001284:	2b00      	cmp	r3, #0
 8001286:	d06f      	beq.n	8001368 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001288:	4b50      	ldr	r3, [pc, #320]	; (80013cc <HAL_RCC_OscConfig+0x270>)
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	f003 030c 	and.w	r3, r3, #12
 8001290:	2b00      	cmp	r3, #0
 8001292:	d017      	beq.n	80012c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001294:	4b4d      	ldr	r3, [pc, #308]	; (80013cc <HAL_RCC_OscConfig+0x270>)
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800129c:	2b08      	cmp	r3, #8
 800129e:	d105      	bne.n	80012ac <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80012a0:	4b4a      	ldr	r3, [pc, #296]	; (80013cc <HAL_RCC_OscConfig+0x270>)
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d00b      	beq.n	80012c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012ac:	4b47      	ldr	r3, [pc, #284]	; (80013cc <HAL_RCC_OscConfig+0x270>)
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80012b4:	2b0c      	cmp	r3, #12
 80012b6:	d11c      	bne.n	80012f2 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012b8:	4b44      	ldr	r3, [pc, #272]	; (80013cc <HAL_RCC_OscConfig+0x270>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d116      	bne.n	80012f2 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012c4:	4b41      	ldr	r3, [pc, #260]	; (80013cc <HAL_RCC_OscConfig+0x270>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f003 0302 	and.w	r3, r3, #2
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d005      	beq.n	80012dc <HAL_RCC_OscConfig+0x180>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d001      	beq.n	80012dc <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	e18f      	b.n	80015fc <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012dc:	4b3b      	ldr	r3, [pc, #236]	; (80013cc <HAL_RCC_OscConfig+0x270>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	691b      	ldr	r3, [r3, #16]
 80012e8:	00db      	lsls	r3, r3, #3
 80012ea:	4938      	ldr	r1, [pc, #224]	; (80013cc <HAL_RCC_OscConfig+0x270>)
 80012ec:	4313      	orrs	r3, r2
 80012ee:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012f0:	e03a      	b.n	8001368 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	68db      	ldr	r3, [r3, #12]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d020      	beq.n	800133c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012fa:	4b35      	ldr	r3, [pc, #212]	; (80013d0 <HAL_RCC_OscConfig+0x274>)
 80012fc:	2201      	movs	r2, #1
 80012fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001300:	f7ff f966 	bl	80005d0 <HAL_GetTick>
 8001304:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001306:	e008      	b.n	800131a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001308:	f7ff f962 	bl	80005d0 <HAL_GetTick>
 800130c:	4602      	mov	r2, r0
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	2b02      	cmp	r3, #2
 8001314:	d901      	bls.n	800131a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	e170      	b.n	80015fc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800131a:	4b2c      	ldr	r3, [pc, #176]	; (80013cc <HAL_RCC_OscConfig+0x270>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 0302 	and.w	r3, r3, #2
 8001322:	2b00      	cmp	r3, #0
 8001324:	d0f0      	beq.n	8001308 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001326:	4b29      	ldr	r3, [pc, #164]	; (80013cc <HAL_RCC_OscConfig+0x270>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	691b      	ldr	r3, [r3, #16]
 8001332:	00db      	lsls	r3, r3, #3
 8001334:	4925      	ldr	r1, [pc, #148]	; (80013cc <HAL_RCC_OscConfig+0x270>)
 8001336:	4313      	orrs	r3, r2
 8001338:	600b      	str	r3, [r1, #0]
 800133a:	e015      	b.n	8001368 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800133c:	4b24      	ldr	r3, [pc, #144]	; (80013d0 <HAL_RCC_OscConfig+0x274>)
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001342:	f7ff f945 	bl	80005d0 <HAL_GetTick>
 8001346:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001348:	e008      	b.n	800135c <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800134a:	f7ff f941 	bl	80005d0 <HAL_GetTick>
 800134e:	4602      	mov	r2, r0
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	2b02      	cmp	r3, #2
 8001356:	d901      	bls.n	800135c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001358:	2303      	movs	r3, #3
 800135a:	e14f      	b.n	80015fc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800135c:	4b1b      	ldr	r3, [pc, #108]	; (80013cc <HAL_RCC_OscConfig+0x270>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f003 0302 	and.w	r3, r3, #2
 8001364:	2b00      	cmp	r3, #0
 8001366:	d1f0      	bne.n	800134a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 0308 	and.w	r3, r3, #8
 8001370:	2b00      	cmp	r3, #0
 8001372:	d037      	beq.n	80013e4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	695b      	ldr	r3, [r3, #20]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d016      	beq.n	80013aa <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800137c:	4b15      	ldr	r3, [pc, #84]	; (80013d4 <HAL_RCC_OscConfig+0x278>)
 800137e:	2201      	movs	r2, #1
 8001380:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001382:	f7ff f925 	bl	80005d0 <HAL_GetTick>
 8001386:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001388:	e008      	b.n	800139c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800138a:	f7ff f921 	bl	80005d0 <HAL_GetTick>
 800138e:	4602      	mov	r2, r0
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	2b02      	cmp	r3, #2
 8001396:	d901      	bls.n	800139c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001398:	2303      	movs	r3, #3
 800139a:	e12f      	b.n	80015fc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800139c:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <HAL_RCC_OscConfig+0x270>)
 800139e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013a0:	f003 0302 	and.w	r3, r3, #2
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d0f0      	beq.n	800138a <HAL_RCC_OscConfig+0x22e>
 80013a8:	e01c      	b.n	80013e4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013aa:	4b0a      	ldr	r3, [pc, #40]	; (80013d4 <HAL_RCC_OscConfig+0x278>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013b0:	f7ff f90e 	bl	80005d0 <HAL_GetTick>
 80013b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013b6:	e00f      	b.n	80013d8 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013b8:	f7ff f90a 	bl	80005d0 <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d908      	bls.n	80013d8 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80013c6:	2303      	movs	r3, #3
 80013c8:	e118      	b.n	80015fc <HAL_RCC_OscConfig+0x4a0>
 80013ca:	bf00      	nop
 80013cc:	40023800 	.word	0x40023800
 80013d0:	42470000 	.word	0x42470000
 80013d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013d8:	4b8a      	ldr	r3, [pc, #552]	; (8001604 <HAL_RCC_OscConfig+0x4a8>)
 80013da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013dc:	f003 0302 	and.w	r3, r3, #2
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d1e9      	bne.n	80013b8 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0304 	and.w	r3, r3, #4
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	f000 8097 	beq.w	8001520 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013f2:	2300      	movs	r3, #0
 80013f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013f6:	4b83      	ldr	r3, [pc, #524]	; (8001604 <HAL_RCC_OscConfig+0x4a8>)
 80013f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d10f      	bne.n	8001422 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	60fb      	str	r3, [r7, #12]
 8001406:	4b7f      	ldr	r3, [pc, #508]	; (8001604 <HAL_RCC_OscConfig+0x4a8>)
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	4a7e      	ldr	r2, [pc, #504]	; (8001604 <HAL_RCC_OscConfig+0x4a8>)
 800140c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001410:	6413      	str	r3, [r2, #64]	; 0x40
 8001412:	4b7c      	ldr	r3, [pc, #496]	; (8001604 <HAL_RCC_OscConfig+0x4a8>)
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800141e:	2301      	movs	r3, #1
 8001420:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001422:	4b79      	ldr	r3, [pc, #484]	; (8001608 <HAL_RCC_OscConfig+0x4ac>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800142a:	2b00      	cmp	r3, #0
 800142c:	d118      	bne.n	8001460 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800142e:	4b76      	ldr	r3, [pc, #472]	; (8001608 <HAL_RCC_OscConfig+0x4ac>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a75      	ldr	r2, [pc, #468]	; (8001608 <HAL_RCC_OscConfig+0x4ac>)
 8001434:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001438:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800143a:	f7ff f8c9 	bl	80005d0 <HAL_GetTick>
 800143e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001440:	e008      	b.n	8001454 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001442:	f7ff f8c5 	bl	80005d0 <HAL_GetTick>
 8001446:	4602      	mov	r2, r0
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	2b02      	cmp	r3, #2
 800144e:	d901      	bls.n	8001454 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001450:	2303      	movs	r3, #3
 8001452:	e0d3      	b.n	80015fc <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001454:	4b6c      	ldr	r3, [pc, #432]	; (8001608 <HAL_RCC_OscConfig+0x4ac>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800145c:	2b00      	cmp	r3, #0
 800145e:	d0f0      	beq.n	8001442 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	2b01      	cmp	r3, #1
 8001466:	d106      	bne.n	8001476 <HAL_RCC_OscConfig+0x31a>
 8001468:	4b66      	ldr	r3, [pc, #408]	; (8001604 <HAL_RCC_OscConfig+0x4a8>)
 800146a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800146c:	4a65      	ldr	r2, [pc, #404]	; (8001604 <HAL_RCC_OscConfig+0x4a8>)
 800146e:	f043 0301 	orr.w	r3, r3, #1
 8001472:	6713      	str	r3, [r2, #112]	; 0x70
 8001474:	e01c      	b.n	80014b0 <HAL_RCC_OscConfig+0x354>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	2b05      	cmp	r3, #5
 800147c:	d10c      	bne.n	8001498 <HAL_RCC_OscConfig+0x33c>
 800147e:	4b61      	ldr	r3, [pc, #388]	; (8001604 <HAL_RCC_OscConfig+0x4a8>)
 8001480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001482:	4a60      	ldr	r2, [pc, #384]	; (8001604 <HAL_RCC_OscConfig+0x4a8>)
 8001484:	f043 0304 	orr.w	r3, r3, #4
 8001488:	6713      	str	r3, [r2, #112]	; 0x70
 800148a:	4b5e      	ldr	r3, [pc, #376]	; (8001604 <HAL_RCC_OscConfig+0x4a8>)
 800148c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800148e:	4a5d      	ldr	r2, [pc, #372]	; (8001604 <HAL_RCC_OscConfig+0x4a8>)
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	6713      	str	r3, [r2, #112]	; 0x70
 8001496:	e00b      	b.n	80014b0 <HAL_RCC_OscConfig+0x354>
 8001498:	4b5a      	ldr	r3, [pc, #360]	; (8001604 <HAL_RCC_OscConfig+0x4a8>)
 800149a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800149c:	4a59      	ldr	r2, [pc, #356]	; (8001604 <HAL_RCC_OscConfig+0x4a8>)
 800149e:	f023 0301 	bic.w	r3, r3, #1
 80014a2:	6713      	str	r3, [r2, #112]	; 0x70
 80014a4:	4b57      	ldr	r3, [pc, #348]	; (8001604 <HAL_RCC_OscConfig+0x4a8>)
 80014a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014a8:	4a56      	ldr	r2, [pc, #344]	; (8001604 <HAL_RCC_OscConfig+0x4a8>)
 80014aa:	f023 0304 	bic.w	r3, r3, #4
 80014ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d015      	beq.n	80014e4 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014b8:	f7ff f88a 	bl	80005d0 <HAL_GetTick>
 80014bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014be:	e00a      	b.n	80014d6 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014c0:	f7ff f886 	bl	80005d0 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e092      	b.n	80015fc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014d6:	4b4b      	ldr	r3, [pc, #300]	; (8001604 <HAL_RCC_OscConfig+0x4a8>)
 80014d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d0ee      	beq.n	80014c0 <HAL_RCC_OscConfig+0x364>
 80014e2:	e014      	b.n	800150e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014e4:	f7ff f874 	bl	80005d0 <HAL_GetTick>
 80014e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014ea:	e00a      	b.n	8001502 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014ec:	f7ff f870 	bl	80005d0 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e07c      	b.n	80015fc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001502:	4b40      	ldr	r3, [pc, #256]	; (8001604 <HAL_RCC_OscConfig+0x4a8>)
 8001504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1ee      	bne.n	80014ec <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800150e:	7dfb      	ldrb	r3, [r7, #23]
 8001510:	2b01      	cmp	r3, #1
 8001512:	d105      	bne.n	8001520 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001514:	4b3b      	ldr	r3, [pc, #236]	; (8001604 <HAL_RCC_OscConfig+0x4a8>)
 8001516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001518:	4a3a      	ldr	r2, [pc, #232]	; (8001604 <HAL_RCC_OscConfig+0x4a8>)
 800151a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800151e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	699b      	ldr	r3, [r3, #24]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d068      	beq.n	80015fa <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001528:	4b36      	ldr	r3, [pc, #216]	; (8001604 <HAL_RCC_OscConfig+0x4a8>)
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	f003 030c 	and.w	r3, r3, #12
 8001530:	2b08      	cmp	r3, #8
 8001532:	d060      	beq.n	80015f6 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	2b02      	cmp	r3, #2
 800153a:	d145      	bne.n	80015c8 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800153c:	4b33      	ldr	r3, [pc, #204]	; (800160c <HAL_RCC_OscConfig+0x4b0>)
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001542:	f7ff f845 	bl	80005d0 <HAL_GetTick>
 8001546:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001548:	e008      	b.n	800155c <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800154a:	f7ff f841 	bl	80005d0 <HAL_GetTick>
 800154e:	4602      	mov	r2, r0
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	2b02      	cmp	r3, #2
 8001556:	d901      	bls.n	800155c <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8001558:	2303      	movs	r3, #3
 800155a:	e04f      	b.n	80015fc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800155c:	4b29      	ldr	r3, [pc, #164]	; (8001604 <HAL_RCC_OscConfig+0x4a8>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d1f0      	bne.n	800154a <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	69da      	ldr	r2, [r3, #28]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6a1b      	ldr	r3, [r3, #32]
 8001570:	431a      	orrs	r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001576:	019b      	lsls	r3, r3, #6
 8001578:	431a      	orrs	r2, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800157e:	085b      	lsrs	r3, r3, #1
 8001580:	3b01      	subs	r3, #1
 8001582:	041b      	lsls	r3, r3, #16
 8001584:	431a      	orrs	r2, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800158a:	061b      	lsls	r3, r3, #24
 800158c:	431a      	orrs	r2, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	071b      	lsls	r3, r3, #28
 8001594:	491b      	ldr	r1, [pc, #108]	; (8001604 <HAL_RCC_OscConfig+0x4a8>)
 8001596:	4313      	orrs	r3, r2
 8001598:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800159a:	4b1c      	ldr	r3, [pc, #112]	; (800160c <HAL_RCC_OscConfig+0x4b0>)
 800159c:	2201      	movs	r2, #1
 800159e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a0:	f7ff f816 	bl	80005d0 <HAL_GetTick>
 80015a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015a6:	e008      	b.n	80015ba <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015a8:	f7ff f812 	bl	80005d0 <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e020      	b.n	80015fc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015ba:	4b12      	ldr	r3, [pc, #72]	; (8001604 <HAL_RCC_OscConfig+0x4a8>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d0f0      	beq.n	80015a8 <HAL_RCC_OscConfig+0x44c>
 80015c6:	e018      	b.n	80015fa <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015c8:	4b10      	ldr	r3, [pc, #64]	; (800160c <HAL_RCC_OscConfig+0x4b0>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ce:	f7fe ffff 	bl	80005d0 <HAL_GetTick>
 80015d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015d4:	e008      	b.n	80015e8 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015d6:	f7fe fffb 	bl	80005d0 <HAL_GetTick>
 80015da:	4602      	mov	r2, r0
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d901      	bls.n	80015e8 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e009      	b.n	80015fc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015e8:	4b06      	ldr	r3, [pc, #24]	; (8001604 <HAL_RCC_OscConfig+0x4a8>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d1f0      	bne.n	80015d6 <HAL_RCC_OscConfig+0x47a>
 80015f4:	e001      	b.n	80015fa <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e000      	b.n	80015fc <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80015fa:	2300      	movs	r3, #0
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3718      	adds	r7, #24
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	40023800 	.word	0x40023800
 8001608:	40007000 	.word	0x40007000
 800160c:	42470060 	.word	0x42470060

08001610 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d101      	bne.n	8001622 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e01d      	b.n	800165e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001628:	b2db      	uxtb	r3, r3
 800162a:	2b00      	cmp	r3, #0
 800162c:	d106      	bne.n	800163c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f002 f880 	bl	800373c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2202      	movs	r2, #2
 8001640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	3304      	adds	r3, #4
 800164c:	4619      	mov	r1, r3
 800164e:	4610      	mov	r0, r2
 8001650:	f000 fb34 	bl	8001cbc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2201      	movs	r2, #1
 8001658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800165c:	2300      	movs	r3, #0
}
 800165e:	4618      	mov	r0, r3
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001666:	b580      	push	{r7, lr}
 8001668:	b082      	sub	sp, #8
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d101      	bne.n	8001678 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e01d      	b.n	80016b4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800167e:	b2db      	uxtb	r3, r3
 8001680:	2b00      	cmp	r3, #0
 8001682:	d106      	bne.n	8001692 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f000 f815 	bl	80016bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2202      	movs	r2, #2
 8001696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	3304      	adds	r3, #4
 80016a2:	4619      	mov	r1, r3
 80016a4:	4610      	mov	r0, r2
 80016a6:	f000 fb09 	bl	8001cbc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2201      	movs	r2, #1
 80016ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80016b2:	2300      	movs	r3, #0
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80016c4:	bf00      	nop
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	2201      	movs	r2, #1
 80016e0:	6839      	ldr	r1, [r7, #0]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f000 fdd4 	bl	8002290 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a15      	ldr	r2, [pc, #84]	; (8001744 <HAL_TIM_PWM_Start+0x74>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d004      	beq.n	80016fc <HAL_TIM_PWM_Start+0x2c>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a14      	ldr	r2, [pc, #80]	; (8001748 <HAL_TIM_PWM_Start+0x78>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d101      	bne.n	8001700 <HAL_TIM_PWM_Start+0x30>
 80016fc:	2301      	movs	r3, #1
 80016fe:	e000      	b.n	8001702 <HAL_TIM_PWM_Start+0x32>
 8001700:	2300      	movs	r3, #0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d007      	beq.n	8001716 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001714:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	f003 0307 	and.w	r3, r3, #7
 8001720:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	2b06      	cmp	r3, #6
 8001726:	d007      	beq.n	8001738 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f042 0201 	orr.w	r2, r2, #1
 8001736:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	3710      	adds	r7, #16
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40010000 	.word	0x40010000
 8001748:	40010400 	.word	0x40010400

0800174c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	691b      	ldr	r3, [r3, #16]
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	2b02      	cmp	r3, #2
 8001760:	d122      	bne.n	80017a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	f003 0302 	and.w	r3, r3, #2
 800176c:	2b02      	cmp	r3, #2
 800176e:	d11b      	bne.n	80017a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f06f 0202 	mvn.w	r2, #2
 8001778:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2201      	movs	r2, #1
 800177e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	699b      	ldr	r3, [r3, #24]
 8001786:	f003 0303 	and.w	r3, r3, #3
 800178a:	2b00      	cmp	r3, #0
 800178c:	d003      	beq.n	8001796 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f000 fa75 	bl	8001c7e <HAL_TIM_IC_CaptureCallback>
 8001794:	e005      	b.n	80017a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f000 fa67 	bl	8001c6a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f000 fa78 	bl	8001c92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	691b      	ldr	r3, [r3, #16]
 80017ae:	f003 0304 	and.w	r3, r3, #4
 80017b2:	2b04      	cmp	r3, #4
 80017b4:	d122      	bne.n	80017fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	f003 0304 	and.w	r3, r3, #4
 80017c0:	2b04      	cmp	r3, #4
 80017c2:	d11b      	bne.n	80017fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f06f 0204 	mvn.w	r2, #4
 80017cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2202      	movs	r2, #2
 80017d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	699b      	ldr	r3, [r3, #24]
 80017da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d003      	beq.n	80017ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f000 fa4b 	bl	8001c7e <HAL_TIM_IC_CaptureCallback>
 80017e8:	e005      	b.n	80017f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f000 fa3d 	bl	8001c6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f000 fa4e 	bl	8001c92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2200      	movs	r2, #0
 80017fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	691b      	ldr	r3, [r3, #16]
 8001802:	f003 0308 	and.w	r3, r3, #8
 8001806:	2b08      	cmp	r3, #8
 8001808:	d122      	bne.n	8001850 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	f003 0308 	and.w	r3, r3, #8
 8001814:	2b08      	cmp	r3, #8
 8001816:	d11b      	bne.n	8001850 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f06f 0208 	mvn.w	r2, #8
 8001820:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2204      	movs	r2, #4
 8001826:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	69db      	ldr	r3, [r3, #28]
 800182e:	f003 0303 	and.w	r3, r3, #3
 8001832:	2b00      	cmp	r3, #0
 8001834:	d003      	beq.n	800183e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f000 fa21 	bl	8001c7e <HAL_TIM_IC_CaptureCallback>
 800183c:	e005      	b.n	800184a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f000 fa13 	bl	8001c6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f000 fa24 	bl	8001c92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2200      	movs	r2, #0
 800184e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	691b      	ldr	r3, [r3, #16]
 8001856:	f003 0310 	and.w	r3, r3, #16
 800185a:	2b10      	cmp	r3, #16
 800185c:	d122      	bne.n	80018a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	f003 0310 	and.w	r3, r3, #16
 8001868:	2b10      	cmp	r3, #16
 800186a:	d11b      	bne.n	80018a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f06f 0210 	mvn.w	r2, #16
 8001874:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2208      	movs	r2, #8
 800187a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	69db      	ldr	r3, [r3, #28]
 8001882:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001886:	2b00      	cmp	r3, #0
 8001888:	d003      	beq.n	8001892 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f000 f9f7 	bl	8001c7e <HAL_TIM_IC_CaptureCallback>
 8001890:	e005      	b.n	800189e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f000 f9e9 	bl	8001c6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f000 f9fa 	bl	8001c92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	691b      	ldr	r3, [r3, #16]
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d10e      	bne.n	80018d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	f003 0301 	and.w	r3, r3, #1
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d107      	bne.n	80018d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f06f 0201 	mvn.w	r2, #1
 80018c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f000 f9c3 	bl	8001c56 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	691b      	ldr	r3, [r3, #16]
 80018d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018da:	2b80      	cmp	r3, #128	; 0x80
 80018dc:	d10e      	bne.n	80018fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018e8:	2b80      	cmp	r3, #128	; 0x80
 80018ea:	d107      	bne.n	80018fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80018f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f000 fd76 	bl	80023e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	691b      	ldr	r3, [r3, #16]
 8001902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001906:	2b40      	cmp	r3, #64	; 0x40
 8001908:	d10e      	bne.n	8001928 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001914:	2b40      	cmp	r3, #64	; 0x40
 8001916:	d107      	bne.n	8001928 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001920:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f000 f9bf 	bl	8001ca6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	691b      	ldr	r3, [r3, #16]
 800192e:	f003 0320 	and.w	r3, r3, #32
 8001932:	2b20      	cmp	r3, #32
 8001934:	d10e      	bne.n	8001954 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	f003 0320 	and.w	r3, r3, #32
 8001940:	2b20      	cmp	r3, #32
 8001942:	d107      	bne.n	8001954 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f06f 0220 	mvn.w	r2, #32
 800194c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f000 fd40 	bl	80023d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001954:	bf00      	nop
 8001956:	3708      	adds	r7, #8
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}

0800195c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800196e:	2b01      	cmp	r3, #1
 8001970:	d101      	bne.n	8001976 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001972:	2302      	movs	r3, #2
 8001974:	e0b4      	b.n	8001ae0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	2201      	movs	r2, #1
 800197a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2202      	movs	r2, #2
 8001982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2b0c      	cmp	r3, #12
 800198a:	f200 809f 	bhi.w	8001acc <HAL_TIM_PWM_ConfigChannel+0x170>
 800198e:	a201      	add	r2, pc, #4	; (adr r2, 8001994 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8001990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001994:	080019c9 	.word	0x080019c9
 8001998:	08001acd 	.word	0x08001acd
 800199c:	08001acd 	.word	0x08001acd
 80019a0:	08001acd 	.word	0x08001acd
 80019a4:	08001a09 	.word	0x08001a09
 80019a8:	08001acd 	.word	0x08001acd
 80019ac:	08001acd 	.word	0x08001acd
 80019b0:	08001acd 	.word	0x08001acd
 80019b4:	08001a4b 	.word	0x08001a4b
 80019b8:	08001acd 	.word	0x08001acd
 80019bc:	08001acd 	.word	0x08001acd
 80019c0:	08001acd 	.word	0x08001acd
 80019c4:	08001a8b 	.word	0x08001a8b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	68b9      	ldr	r1, [r7, #8]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f000 fa14 	bl	8001dfc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	699a      	ldr	r2, [r3, #24]
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f042 0208 	orr.w	r2, r2, #8
 80019e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	699a      	ldr	r2, [r3, #24]
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f022 0204 	bic.w	r2, r2, #4
 80019f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	6999      	ldr	r1, [r3, #24]
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	691a      	ldr	r2, [r3, #16]
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	430a      	orrs	r2, r1
 8001a04:	619a      	str	r2, [r3, #24]
      break;
 8001a06:	e062      	b.n	8001ace <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	68b9      	ldr	r1, [r7, #8]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f000 fa64 	bl	8001edc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	699a      	ldr	r2, [r3, #24]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	699a      	ldr	r2, [r3, #24]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	6999      	ldr	r1, [r3, #24]
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	021a      	lsls	r2, r3, #8
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	430a      	orrs	r2, r1
 8001a46:	619a      	str	r2, [r3, #24]
      break;
 8001a48:	e041      	b.n	8001ace <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	68b9      	ldr	r1, [r7, #8]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f000 fab9 	bl	8001fc8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	69da      	ldr	r2, [r3, #28]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f042 0208 	orr.w	r2, r2, #8
 8001a64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	69da      	ldr	r2, [r3, #28]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f022 0204 	bic.w	r2, r2, #4
 8001a74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	69d9      	ldr	r1, [r3, #28]
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	691a      	ldr	r2, [r3, #16]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	430a      	orrs	r2, r1
 8001a86:	61da      	str	r2, [r3, #28]
      break;
 8001a88:	e021      	b.n	8001ace <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	68b9      	ldr	r1, [r7, #8]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f000 fb0d 	bl	80020b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	69da      	ldr	r2, [r3, #28]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001aa4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	69da      	ldr	r2, [r3, #28]
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ab4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	69d9      	ldr	r1, [r3, #28]
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	691b      	ldr	r3, [r3, #16]
 8001ac0:	021a      	lsls	r2, r3, #8
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	61da      	str	r2, [r3, #28]
      break;
 8001aca:	e000      	b.n	8001ace <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8001acc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001ade:	2300      	movs	r3, #0
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3710      	adds	r7, #16
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d101      	bne.n	8001b00 <HAL_TIM_ConfigClockSource+0x18>
 8001afc:	2302      	movs	r3, #2
 8001afe:	e0a6      	b.n	8001c4e <HAL_TIM_ConfigClockSource+0x166>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2201      	movs	r2, #1
 8001b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2202      	movs	r2, #2
 8001b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001b1e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001b26:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	68fa      	ldr	r2, [r7, #12]
 8001b2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2b40      	cmp	r3, #64	; 0x40
 8001b36:	d067      	beq.n	8001c08 <HAL_TIM_ConfigClockSource+0x120>
 8001b38:	2b40      	cmp	r3, #64	; 0x40
 8001b3a:	d80b      	bhi.n	8001b54 <HAL_TIM_ConfigClockSource+0x6c>
 8001b3c:	2b10      	cmp	r3, #16
 8001b3e:	d073      	beq.n	8001c28 <HAL_TIM_ConfigClockSource+0x140>
 8001b40:	2b10      	cmp	r3, #16
 8001b42:	d802      	bhi.n	8001b4a <HAL_TIM_ConfigClockSource+0x62>
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d06f      	beq.n	8001c28 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8001b48:	e078      	b.n	8001c3c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001b4a:	2b20      	cmp	r3, #32
 8001b4c:	d06c      	beq.n	8001c28 <HAL_TIM_ConfigClockSource+0x140>
 8001b4e:	2b30      	cmp	r3, #48	; 0x30
 8001b50:	d06a      	beq.n	8001c28 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8001b52:	e073      	b.n	8001c3c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001b54:	2b70      	cmp	r3, #112	; 0x70
 8001b56:	d00d      	beq.n	8001b74 <HAL_TIM_ConfigClockSource+0x8c>
 8001b58:	2b70      	cmp	r3, #112	; 0x70
 8001b5a:	d804      	bhi.n	8001b66 <HAL_TIM_ConfigClockSource+0x7e>
 8001b5c:	2b50      	cmp	r3, #80	; 0x50
 8001b5e:	d033      	beq.n	8001bc8 <HAL_TIM_ConfigClockSource+0xe0>
 8001b60:	2b60      	cmp	r3, #96	; 0x60
 8001b62:	d041      	beq.n	8001be8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8001b64:	e06a      	b.n	8001c3c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001b66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b6a:	d066      	beq.n	8001c3a <HAL_TIM_ConfigClockSource+0x152>
 8001b6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b70:	d017      	beq.n	8001ba2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8001b72:	e063      	b.n	8001c3c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6818      	ldr	r0, [r3, #0]
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	6899      	ldr	r1, [r3, #8]
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685a      	ldr	r2, [r3, #4]
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	f000 fb64 	bl	8002250 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001b96:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	68fa      	ldr	r2, [r7, #12]
 8001b9e:	609a      	str	r2, [r3, #8]
      break;
 8001ba0:	e04c      	b.n	8001c3c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6818      	ldr	r0, [r3, #0]
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	6899      	ldr	r1, [r3, #8]
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685a      	ldr	r2, [r3, #4]
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	f000 fb4d 	bl	8002250 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	689a      	ldr	r2, [r3, #8]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001bc4:	609a      	str	r2, [r3, #8]
      break;
 8001bc6:	e039      	b.n	8001c3c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6818      	ldr	r0, [r3, #0]
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	6859      	ldr	r1, [r3, #4]
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	f000 fac1 	bl	800215c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2150      	movs	r1, #80	; 0x50
 8001be0:	4618      	mov	r0, r3
 8001be2:	f000 fb1a 	bl	800221a <TIM_ITRx_SetConfig>
      break;
 8001be6:	e029      	b.n	8001c3c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6818      	ldr	r0, [r3, #0]
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	6859      	ldr	r1, [r3, #4]
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	f000 fae0 	bl	80021ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2160      	movs	r1, #96	; 0x60
 8001c00:	4618      	mov	r0, r3
 8001c02:	f000 fb0a 	bl	800221a <TIM_ITRx_SetConfig>
      break;
 8001c06:	e019      	b.n	8001c3c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6818      	ldr	r0, [r3, #0]
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	6859      	ldr	r1, [r3, #4]
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	461a      	mov	r2, r3
 8001c16:	f000 faa1 	bl	800215c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2140      	movs	r1, #64	; 0x40
 8001c20:	4618      	mov	r0, r3
 8001c22:	f000 fafa 	bl	800221a <TIM_ITRx_SetConfig>
      break;
 8001c26:	e009      	b.n	8001c3c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4619      	mov	r1, r3
 8001c32:	4610      	mov	r0, r2
 8001c34:	f000 faf1 	bl	800221a <TIM_ITRx_SetConfig>
      break;
 8001c38:	e000      	b.n	8001c3c <HAL_TIM_ConfigClockSource+0x154>
      break;
 8001c3a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c56:	b480      	push	{r7}
 8001c58:	b083      	sub	sp, #12
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001c5e:	bf00      	nop
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr

08001c6a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	b083      	sub	sp, #12
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001c72:	bf00      	nop
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr

08001c7e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	b083      	sub	sp, #12
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001c86:	bf00      	nop
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr

08001c92 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001c92:	b480      	push	{r7}
 8001c94:	b083      	sub	sp, #12
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	b083      	sub	sp, #12
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001cae:	bf00      	nop
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
	...

08001cbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	4a40      	ldr	r2, [pc, #256]	; (8001dd0 <TIM_Base_SetConfig+0x114>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d013      	beq.n	8001cfc <TIM_Base_SetConfig+0x40>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cda:	d00f      	beq.n	8001cfc <TIM_Base_SetConfig+0x40>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	4a3d      	ldr	r2, [pc, #244]	; (8001dd4 <TIM_Base_SetConfig+0x118>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d00b      	beq.n	8001cfc <TIM_Base_SetConfig+0x40>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	4a3c      	ldr	r2, [pc, #240]	; (8001dd8 <TIM_Base_SetConfig+0x11c>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d007      	beq.n	8001cfc <TIM_Base_SetConfig+0x40>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	4a3b      	ldr	r2, [pc, #236]	; (8001ddc <TIM_Base_SetConfig+0x120>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d003      	beq.n	8001cfc <TIM_Base_SetConfig+0x40>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	4a3a      	ldr	r2, [pc, #232]	; (8001de0 <TIM_Base_SetConfig+0x124>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d108      	bne.n	8001d0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	68fa      	ldr	r2, [r7, #12]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a2f      	ldr	r2, [pc, #188]	; (8001dd0 <TIM_Base_SetConfig+0x114>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d02b      	beq.n	8001d6e <TIM_Base_SetConfig+0xb2>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d1c:	d027      	beq.n	8001d6e <TIM_Base_SetConfig+0xb2>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a2c      	ldr	r2, [pc, #176]	; (8001dd4 <TIM_Base_SetConfig+0x118>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d023      	beq.n	8001d6e <TIM_Base_SetConfig+0xb2>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a2b      	ldr	r2, [pc, #172]	; (8001dd8 <TIM_Base_SetConfig+0x11c>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d01f      	beq.n	8001d6e <TIM_Base_SetConfig+0xb2>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a2a      	ldr	r2, [pc, #168]	; (8001ddc <TIM_Base_SetConfig+0x120>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d01b      	beq.n	8001d6e <TIM_Base_SetConfig+0xb2>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a29      	ldr	r2, [pc, #164]	; (8001de0 <TIM_Base_SetConfig+0x124>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d017      	beq.n	8001d6e <TIM_Base_SetConfig+0xb2>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a28      	ldr	r2, [pc, #160]	; (8001de4 <TIM_Base_SetConfig+0x128>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d013      	beq.n	8001d6e <TIM_Base_SetConfig+0xb2>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a27      	ldr	r2, [pc, #156]	; (8001de8 <TIM_Base_SetConfig+0x12c>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d00f      	beq.n	8001d6e <TIM_Base_SetConfig+0xb2>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a26      	ldr	r2, [pc, #152]	; (8001dec <TIM_Base_SetConfig+0x130>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d00b      	beq.n	8001d6e <TIM_Base_SetConfig+0xb2>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a25      	ldr	r2, [pc, #148]	; (8001df0 <TIM_Base_SetConfig+0x134>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d007      	beq.n	8001d6e <TIM_Base_SetConfig+0xb2>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a24      	ldr	r2, [pc, #144]	; (8001df4 <TIM_Base_SetConfig+0x138>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d003      	beq.n	8001d6e <TIM_Base_SetConfig+0xb2>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a23      	ldr	r2, [pc, #140]	; (8001df8 <TIM_Base_SetConfig+0x13c>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d108      	bne.n	8001d80 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	68fa      	ldr	r2, [r7, #12]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	695b      	ldr	r3, [r3, #20]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	68fa      	ldr	r2, [r7, #12]
 8001d92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	689a      	ldr	r2, [r3, #8]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	4a0a      	ldr	r2, [pc, #40]	; (8001dd0 <TIM_Base_SetConfig+0x114>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d003      	beq.n	8001db4 <TIM_Base_SetConfig+0xf8>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4a0c      	ldr	r2, [pc, #48]	; (8001de0 <TIM_Base_SetConfig+0x124>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d103      	bne.n	8001dbc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	691a      	ldr	r2, [r3, #16]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	615a      	str	r2, [r3, #20]
}
 8001dc2:	bf00      	nop
 8001dc4:	3714      	adds	r7, #20
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	40010000 	.word	0x40010000
 8001dd4:	40000400 	.word	0x40000400
 8001dd8:	40000800 	.word	0x40000800
 8001ddc:	40000c00 	.word	0x40000c00
 8001de0:	40010400 	.word	0x40010400
 8001de4:	40014000 	.word	0x40014000
 8001de8:	40014400 	.word	0x40014400
 8001dec:	40014800 	.word	0x40014800
 8001df0:	40001800 	.word	0x40001800
 8001df4:	40001c00 	.word	0x40001c00
 8001df8:	40002000 	.word	0x40002000

08001dfc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b087      	sub	sp, #28
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6a1b      	ldr	r3, [r3, #32]
 8001e0a:	f023 0201 	bic.w	r2, r3, #1
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6a1b      	ldr	r3, [r3, #32]
 8001e16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	699b      	ldr	r3, [r3, #24]
 8001e22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f023 0303 	bic.w	r3, r3, #3
 8001e32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	68fa      	ldr	r2, [r7, #12]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	f023 0302 	bic.w	r3, r3, #2
 8001e44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	697a      	ldr	r2, [r7, #20]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	4a20      	ldr	r2, [pc, #128]	; (8001ed4 <TIM_OC1_SetConfig+0xd8>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d003      	beq.n	8001e60 <TIM_OC1_SetConfig+0x64>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	4a1f      	ldr	r2, [pc, #124]	; (8001ed8 <TIM_OC1_SetConfig+0xdc>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d10c      	bne.n	8001e7a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	f023 0308 	bic.w	r3, r3, #8
 8001e66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	697a      	ldr	r2, [r7, #20]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	f023 0304 	bic.w	r3, r3, #4
 8001e78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a15      	ldr	r2, [pc, #84]	; (8001ed4 <TIM_OC1_SetConfig+0xd8>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d003      	beq.n	8001e8a <TIM_OC1_SetConfig+0x8e>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a14      	ldr	r2, [pc, #80]	; (8001ed8 <TIM_OC1_SetConfig+0xdc>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d111      	bne.n	8001eae <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001e98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	695b      	ldr	r3, [r3, #20]
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	693a      	ldr	r2, [r7, #16]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685a      	ldr	r2, [r3, #4]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	697a      	ldr	r2, [r7, #20]
 8001ec6:	621a      	str	r2, [r3, #32]
}
 8001ec8:	bf00      	nop
 8001eca:	371c      	adds	r7, #28
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr
 8001ed4:	40010000 	.word	0x40010000
 8001ed8:	40010400 	.word	0x40010400

08001edc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b087      	sub	sp, #28
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6a1b      	ldr	r3, [r3, #32]
 8001eea:	f023 0210 	bic.w	r2, r3, #16
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6a1b      	ldr	r3, [r3, #32]
 8001ef6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	699b      	ldr	r3, [r3, #24]
 8001f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	021b      	lsls	r3, r3, #8
 8001f1a:	68fa      	ldr	r2, [r7, #12]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	f023 0320 	bic.w	r3, r3, #32
 8001f26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	011b      	lsls	r3, r3, #4
 8001f2e:	697a      	ldr	r2, [r7, #20]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	4a22      	ldr	r2, [pc, #136]	; (8001fc0 <TIM_OC2_SetConfig+0xe4>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d003      	beq.n	8001f44 <TIM_OC2_SetConfig+0x68>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	4a21      	ldr	r2, [pc, #132]	; (8001fc4 <TIM_OC2_SetConfig+0xe8>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d10d      	bne.n	8001f60 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	011b      	lsls	r3, r3, #4
 8001f52:	697a      	ldr	r2, [r7, #20]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f5e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4a17      	ldr	r2, [pc, #92]	; (8001fc0 <TIM_OC2_SetConfig+0xe4>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d003      	beq.n	8001f70 <TIM_OC2_SetConfig+0x94>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4a16      	ldr	r2, [pc, #88]	; (8001fc4 <TIM_OC2_SetConfig+0xe8>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d113      	bne.n	8001f98 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001f7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	695b      	ldr	r3, [r3, #20]
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	693a      	ldr	r2, [r7, #16]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	68fa      	ldr	r2, [r7, #12]
 8001fa2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685a      	ldr	r2, [r3, #4]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	697a      	ldr	r2, [r7, #20]
 8001fb0:	621a      	str	r2, [r3, #32]
}
 8001fb2:	bf00      	nop
 8001fb4:	371c      	adds	r7, #28
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	40010000 	.word	0x40010000
 8001fc4:	40010400 	.word	0x40010400

08001fc8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b087      	sub	sp, #28
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a1b      	ldr	r3, [r3, #32]
 8001fd6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6a1b      	ldr	r3, [r3, #32]
 8001fe2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	69db      	ldr	r3, [r3, #28]
 8001fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ff6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f023 0303 	bic.w	r3, r3, #3
 8001ffe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	68fa      	ldr	r2, [r7, #12]
 8002006:	4313      	orrs	r3, r2
 8002008:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002010:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	021b      	lsls	r3, r3, #8
 8002018:	697a      	ldr	r2, [r7, #20]
 800201a:	4313      	orrs	r3, r2
 800201c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a21      	ldr	r2, [pc, #132]	; (80020a8 <TIM_OC3_SetConfig+0xe0>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d003      	beq.n	800202e <TIM_OC3_SetConfig+0x66>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a20      	ldr	r2, [pc, #128]	; (80020ac <TIM_OC3_SetConfig+0xe4>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d10d      	bne.n	800204a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002034:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	021b      	lsls	r3, r3, #8
 800203c:	697a      	ldr	r2, [r7, #20]
 800203e:	4313      	orrs	r3, r2
 8002040:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002048:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a16      	ldr	r2, [pc, #88]	; (80020a8 <TIM_OC3_SetConfig+0xe0>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d003      	beq.n	800205a <TIM_OC3_SetConfig+0x92>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a15      	ldr	r2, [pc, #84]	; (80020ac <TIM_OC3_SetConfig+0xe4>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d113      	bne.n	8002082 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002060:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002068:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	695b      	ldr	r3, [r3, #20]
 800206e:	011b      	lsls	r3, r3, #4
 8002070:	693a      	ldr	r2, [r7, #16]
 8002072:	4313      	orrs	r3, r2
 8002074:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	011b      	lsls	r3, r3, #4
 800207c:	693a      	ldr	r2, [r7, #16]
 800207e:	4313      	orrs	r3, r2
 8002080:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	693a      	ldr	r2, [r7, #16]
 8002086:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	68fa      	ldr	r2, [r7, #12]
 800208c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685a      	ldr	r2, [r3, #4]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	697a      	ldr	r2, [r7, #20]
 800209a:	621a      	str	r2, [r3, #32]
}
 800209c:	bf00      	nop
 800209e:	371c      	adds	r7, #28
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr
 80020a8:	40010000 	.word	0x40010000
 80020ac:	40010400 	.word	0x40010400

080020b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b087      	sub	sp, #28
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a1b      	ldr	r3, [r3, #32]
 80020be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6a1b      	ldr	r3, [r3, #32]
 80020ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	69db      	ldr	r3, [r3, #28]
 80020d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	021b      	lsls	r3, r3, #8
 80020ee:	68fa      	ldr	r2, [r7, #12]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80020fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	031b      	lsls	r3, r3, #12
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	4313      	orrs	r3, r2
 8002106:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	4a12      	ldr	r2, [pc, #72]	; (8002154 <TIM_OC4_SetConfig+0xa4>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d003      	beq.n	8002118 <TIM_OC4_SetConfig+0x68>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4a11      	ldr	r2, [pc, #68]	; (8002158 <TIM_OC4_SetConfig+0xa8>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d109      	bne.n	800212c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800211e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	695b      	ldr	r3, [r3, #20]
 8002124:	019b      	lsls	r3, r3, #6
 8002126:	697a      	ldr	r2, [r7, #20]
 8002128:	4313      	orrs	r3, r2
 800212a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	697a      	ldr	r2, [r7, #20]
 8002130:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	68fa      	ldr	r2, [r7, #12]
 8002136:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685a      	ldr	r2, [r3, #4]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	693a      	ldr	r2, [r7, #16]
 8002144:	621a      	str	r2, [r3, #32]
}
 8002146:	bf00      	nop
 8002148:	371c      	adds	r7, #28
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	40010000 	.word	0x40010000
 8002158:	40010400 	.word	0x40010400

0800215c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800215c:	b480      	push	{r7}
 800215e:	b087      	sub	sp, #28
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6a1b      	ldr	r3, [r3, #32]
 800216c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6a1b      	ldr	r3, [r3, #32]
 8002172:	f023 0201 	bic.w	r2, r3, #1
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	699b      	ldr	r3, [r3, #24]
 800217e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002186:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	011b      	lsls	r3, r3, #4
 800218c:	693a      	ldr	r2, [r7, #16]
 800218e:	4313      	orrs	r3, r2
 8002190:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	f023 030a 	bic.w	r3, r3, #10
 8002198:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800219a:	697a      	ldr	r2, [r7, #20]
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	4313      	orrs	r3, r2
 80021a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	693a      	ldr	r2, [r7, #16]
 80021a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	697a      	ldr	r2, [r7, #20]
 80021ac:	621a      	str	r2, [r3, #32]
}
 80021ae:	bf00      	nop
 80021b0:	371c      	adds	r7, #28
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr

080021ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80021ba:	b480      	push	{r7}
 80021bc:	b087      	sub	sp, #28
 80021be:	af00      	add	r7, sp, #0
 80021c0:	60f8      	str	r0, [r7, #12]
 80021c2:	60b9      	str	r1, [r7, #8]
 80021c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6a1b      	ldr	r3, [r3, #32]
 80021ca:	f023 0210 	bic.w	r2, r3, #16
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6a1b      	ldr	r3, [r3, #32]
 80021dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80021e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	031b      	lsls	r3, r3, #12
 80021ea:	697a      	ldr	r2, [r7, #20]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80021f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	011b      	lsls	r3, r3, #4
 80021fc:	693a      	ldr	r2, [r7, #16]
 80021fe:	4313      	orrs	r3, r2
 8002200:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	697a      	ldr	r2, [r7, #20]
 8002206:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	693a      	ldr	r2, [r7, #16]
 800220c:	621a      	str	r2, [r3, #32]
}
 800220e:	bf00      	nop
 8002210:	371c      	adds	r7, #28
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr

0800221a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800221a:	b480      	push	{r7}
 800221c:	b085      	sub	sp, #20
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
 8002222:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002230:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	4313      	orrs	r3, r2
 8002238:	f043 0307 	orr.w	r3, r3, #7
 800223c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	68fa      	ldr	r2, [r7, #12]
 8002242:	609a      	str	r2, [r3, #8]
}
 8002244:	bf00      	nop
 8002246:	3714      	adds	r7, #20
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002250:	b480      	push	{r7}
 8002252:	b087      	sub	sp, #28
 8002254:	af00      	add	r7, sp, #0
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	60b9      	str	r1, [r7, #8]
 800225a:	607a      	str	r2, [r7, #4]
 800225c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800226a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	021a      	lsls	r2, r3, #8
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	431a      	orrs	r2, r3
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	4313      	orrs	r3, r2
 8002278:	697a      	ldr	r2, [r7, #20]
 800227a:	4313      	orrs	r3, r2
 800227c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	697a      	ldr	r2, [r7, #20]
 8002282:	609a      	str	r2, [r3, #8]
}
 8002284:	bf00      	nop
 8002286:	371c      	adds	r7, #28
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002290:	b480      	push	{r7}
 8002292:	b087      	sub	sp, #28
 8002294:	af00      	add	r7, sp, #0
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	60b9      	str	r1, [r7, #8]
 800229a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	f003 031f 	and.w	r3, r3, #31
 80022a2:	2201      	movs	r2, #1
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	6a1a      	ldr	r2, [r3, #32]
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	43db      	mvns	r3, r3
 80022b2:	401a      	ands	r2, r3
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6a1a      	ldr	r2, [r3, #32]
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	f003 031f 	and.w	r3, r3, #31
 80022c2:	6879      	ldr	r1, [r7, #4]
 80022c4:	fa01 f303 	lsl.w	r3, r1, r3
 80022c8:	431a      	orrs	r2, r3
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	621a      	str	r2, [r3, #32]
}
 80022ce:	bf00      	nop
 80022d0:	371c      	adds	r7, #28
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
	...

080022dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80022dc:	b480      	push	{r7}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d101      	bne.n	80022f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80022f0:	2302      	movs	r3, #2
 80022f2:	e05a      	b.n	80023aa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2202      	movs	r2, #2
 8002300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800231a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	68fa      	ldr	r2, [r7, #12]
 8002322:	4313      	orrs	r3, r2
 8002324:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	68fa      	ldr	r2, [r7, #12]
 800232c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a21      	ldr	r2, [pc, #132]	; (80023b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d022      	beq.n	800237e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002340:	d01d      	beq.n	800237e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a1d      	ldr	r2, [pc, #116]	; (80023bc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d018      	beq.n	800237e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a1b      	ldr	r2, [pc, #108]	; (80023c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d013      	beq.n	800237e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a1a      	ldr	r2, [pc, #104]	; (80023c4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d00e      	beq.n	800237e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a18      	ldr	r2, [pc, #96]	; (80023c8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d009      	beq.n	800237e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a17      	ldr	r2, [pc, #92]	; (80023cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d004      	beq.n	800237e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a15      	ldr	r2, [pc, #84]	; (80023d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d10c      	bne.n	8002398 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002384:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	68ba      	ldr	r2, [r7, #8]
 800238c:	4313      	orrs	r3, r2
 800238e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68ba      	ldr	r2, [r7, #8]
 8002396:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2201      	movs	r2, #1
 800239c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3714      	adds	r7, #20
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	40010000 	.word	0x40010000
 80023bc:	40000400 	.word	0x40000400
 80023c0:	40000800 	.word	0x40000800
 80023c4:	40000c00 	.word	0x40000c00
 80023c8:	40010400 	.word	0x40010400
 80023cc:	40014000 	.word	0x40014000
 80023d0:	40001800 	.word	0x40001800

080023d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80023dc:	bf00      	nop
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d101      	bne.n	800240e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e03f      	b.n	800248e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2b00      	cmp	r3, #0
 8002418:	d106      	bne.n	8002428 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f001 fa12 	bl	800384c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2224      	movs	r2, #36	; 0x24
 800242c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	68da      	ldr	r2, [r3, #12]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800243e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f000 fb97 	bl	8002b74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	691a      	ldr	r2, [r3, #16]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002454:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	695a      	ldr	r2, [r3, #20]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002464:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68da      	ldr	r2, [r3, #12]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002474:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2220      	movs	r2, #32
 8002480:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2220      	movs	r2, #32
 8002488:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	b088      	sub	sp, #32
 800249a:	af02      	add	r7, sp, #8
 800249c:	60f8      	str	r0, [r7, #12]
 800249e:	60b9      	str	r1, [r7, #8]
 80024a0:	603b      	str	r3, [r7, #0]
 80024a2:	4613      	mov	r3, r2
 80024a4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80024a6:	2300      	movs	r3, #0
 80024a8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2b20      	cmp	r3, #32
 80024b4:	f040 8083 	bne.w	80025be <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d002      	beq.n	80024c4 <HAL_UART_Transmit+0x2e>
 80024be:	88fb      	ldrh	r3, [r7, #6]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d101      	bne.n	80024c8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e07b      	b.n	80025c0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d101      	bne.n	80024d6 <HAL_UART_Transmit+0x40>
 80024d2:	2302      	movs	r3, #2
 80024d4:	e074      	b.n	80025c0 <HAL_UART_Transmit+0x12a>
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2201      	movs	r2, #1
 80024da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2200      	movs	r2, #0
 80024e2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2221      	movs	r2, #33	; 0x21
 80024e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80024ec:	f7fe f870 	bl	80005d0 <HAL_GetTick>
 80024f0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	88fa      	ldrh	r2, [r7, #6]
 80024f6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	88fa      	ldrh	r2, [r7, #6]
 80024fc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2200      	movs	r2, #0
 8002502:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002506:	e042      	b.n	800258e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800250c:	b29b      	uxth	r3, r3
 800250e:	3b01      	subs	r3, #1
 8002510:	b29a      	uxth	r2, r3
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800251e:	d122      	bne.n	8002566 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	9300      	str	r3, [sp, #0]
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	2200      	movs	r2, #0
 8002528:	2180      	movs	r1, #128	; 0x80
 800252a:	68f8      	ldr	r0, [r7, #12]
 800252c:	f000 f9b6 	bl	800289c <UART_WaitOnFlagUntilTimeout>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e042      	b.n	80025c0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	881b      	ldrh	r3, [r3, #0]
 8002542:	461a      	mov	r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800254c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d103      	bne.n	800255e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	3302      	adds	r3, #2
 800255a:	60bb      	str	r3, [r7, #8]
 800255c:	e017      	b.n	800258e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	3301      	adds	r3, #1
 8002562:	60bb      	str	r3, [r7, #8]
 8002564:	e013      	b.n	800258e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	9300      	str	r3, [sp, #0]
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	2200      	movs	r2, #0
 800256e:	2180      	movs	r1, #128	; 0x80
 8002570:	68f8      	ldr	r0, [r7, #12]
 8002572:	f000 f993 	bl	800289c <UART_WaitOnFlagUntilTimeout>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e01f      	b.n	80025c0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	1c5a      	adds	r2, r3, #1
 8002584:	60ba      	str	r2, [r7, #8]
 8002586:	781a      	ldrb	r2, [r3, #0]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002592:	b29b      	uxth	r3, r3
 8002594:	2b00      	cmp	r3, #0
 8002596:	d1b7      	bne.n	8002508 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	9300      	str	r3, [sp, #0]
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	2200      	movs	r2, #0
 80025a0:	2140      	movs	r1, #64	; 0x40
 80025a2:	68f8      	ldr	r0, [r7, #12]
 80025a4:	f000 f97a 	bl	800289c <UART_WaitOnFlagUntilTimeout>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e006      	b.n	80025c0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2220      	movs	r2, #32
 80025b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80025ba:	2300      	movs	r3, #0
 80025bc:	e000      	b.n	80025c0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80025be:	2302      	movs	r3, #2
  }
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3718      	adds	r7, #24
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	4613      	mov	r3, r2
 80025d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b20      	cmp	r3, #32
 80025e0:	d140      	bne.n	8002664 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d002      	beq.n	80025ee <HAL_UART_Receive_IT+0x26>
 80025e8:	88fb      	ldrh	r3, [r7, #6]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d101      	bne.n	80025f2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e039      	b.n	8002666 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d101      	bne.n	8002600 <HAL_UART_Receive_IT+0x38>
 80025fc:	2302      	movs	r3, #2
 80025fe:	e032      	b.n	8002666 <HAL_UART_Receive_IT+0x9e>
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	68ba      	ldr	r2, [r7, #8]
 800260c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	88fa      	ldrh	r2, [r7, #6]
 8002612:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	88fa      	ldrh	r2, [r7, #6]
 8002618:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2200      	movs	r2, #0
 800261e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2222      	movs	r2, #34	; 0x22
 8002624:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2200      	movs	r2, #0
 800262c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	68da      	ldr	r2, [r3, #12]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800263e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	695a      	ldr	r2, [r3, #20]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f042 0201 	orr.w	r2, r2, #1
 800264e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	68da      	ldr	r2, [r3, #12]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f042 0220 	orr.w	r2, r2, #32
 800265e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002660:	2300      	movs	r3, #0
 8002662:	e000      	b.n	8002666 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002664:	2302      	movs	r3, #2
  }
}
 8002666:	4618      	mov	r0, r3
 8002668:	3714      	adds	r7, #20
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
	...

08002674 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b088      	sub	sp, #32
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	695b      	ldr	r3, [r3, #20]
 8002692:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002694:	2300      	movs	r3, #0
 8002696:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002698:	2300      	movs	r3, #0
 800269a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	f003 030f 	and.w	r3, r3, #15
 80026a2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d10d      	bne.n	80026c6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	f003 0320 	and.w	r3, r3, #32
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d008      	beq.n	80026c6 <HAL_UART_IRQHandler+0x52>
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	f003 0320 	and.w	r3, r3, #32
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d003      	beq.n	80026c6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 f9d6 	bl	8002a70 <UART_Receive_IT>
      return;
 80026c4:	e0d1      	b.n	800286a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	f000 80b0 	beq.w	800282e <HAL_UART_IRQHandler+0x1ba>
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	f003 0301 	and.w	r3, r3, #1
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d105      	bne.n	80026e4 <HAL_UART_IRQHandler+0x70>
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80026de:	2b00      	cmp	r3, #0
 80026e0:	f000 80a5 	beq.w	800282e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00a      	beq.n	8002704 <HAL_UART_IRQHandler+0x90>
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d005      	beq.n	8002704 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026fc:	f043 0201 	orr.w	r2, r3, #1
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	f003 0304 	and.w	r3, r3, #4
 800270a:	2b00      	cmp	r3, #0
 800270c:	d00a      	beq.n	8002724 <HAL_UART_IRQHandler+0xb0>
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	f003 0301 	and.w	r3, r3, #1
 8002714:	2b00      	cmp	r3, #0
 8002716:	d005      	beq.n	8002724 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800271c:	f043 0202 	orr.w	r2, r3, #2
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00a      	beq.n	8002744 <HAL_UART_IRQHandler+0xd0>
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	f003 0301 	and.w	r3, r3, #1
 8002734:	2b00      	cmp	r3, #0
 8002736:	d005      	beq.n	8002744 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800273c:	f043 0204 	orr.w	r2, r3, #4
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	f003 0308 	and.w	r3, r3, #8
 800274a:	2b00      	cmp	r3, #0
 800274c:	d00f      	beq.n	800276e <HAL_UART_IRQHandler+0xfa>
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	f003 0320 	and.w	r3, r3, #32
 8002754:	2b00      	cmp	r3, #0
 8002756:	d104      	bne.n	8002762 <HAL_UART_IRQHandler+0xee>
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	2b00      	cmp	r3, #0
 8002760:	d005      	beq.n	800276e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002766:	f043 0208 	orr.w	r2, r3, #8
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002772:	2b00      	cmp	r3, #0
 8002774:	d078      	beq.n	8002868 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	f003 0320 	and.w	r3, r3, #32
 800277c:	2b00      	cmp	r3, #0
 800277e:	d007      	beq.n	8002790 <HAL_UART_IRQHandler+0x11c>
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	f003 0320 	and.w	r3, r3, #32
 8002786:	2b00      	cmp	r3, #0
 8002788:	d002      	beq.n	8002790 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 f970 	bl	8002a70 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	695b      	ldr	r3, [r3, #20]
 8002796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800279a:	2b40      	cmp	r3, #64	; 0x40
 800279c:	bf0c      	ite	eq
 800279e:	2301      	moveq	r3, #1
 80027a0:	2300      	movne	r3, #0
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027aa:	f003 0308 	and.w	r3, r3, #8
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d102      	bne.n	80027b8 <HAL_UART_IRQHandler+0x144>
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d031      	beq.n	800281c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f000 f8b9 	bl	8002930 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	695b      	ldr	r3, [r3, #20]
 80027c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027c8:	2b40      	cmp	r3, #64	; 0x40
 80027ca:	d123      	bne.n	8002814 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	695a      	ldr	r2, [r3, #20]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027da:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d013      	beq.n	800280c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027e8:	4a21      	ldr	r2, [pc, #132]	; (8002870 <HAL_UART_IRQHandler+0x1fc>)
 80027ea:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7fe f82c 	bl	800084e <HAL_DMA_Abort_IT>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d016      	beq.n	800282a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002800:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002806:	4610      	mov	r0, r2
 8002808:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800280a:	e00e      	b.n	800282a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f000 f83b 	bl	8002888 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002812:	e00a      	b.n	800282a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f000 f837 	bl	8002888 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800281a:	e006      	b.n	800282a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f000 f833 	bl	8002888 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002828:	e01e      	b.n	8002868 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800282a:	bf00      	nop
    return;
 800282c:	e01c      	b.n	8002868 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002834:	2b00      	cmp	r3, #0
 8002836:	d008      	beq.n	800284a <HAL_UART_IRQHandler+0x1d6>
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800283e:	2b00      	cmp	r3, #0
 8002840:	d003      	beq.n	800284a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 f8a6 	bl	8002994 <UART_Transmit_IT>
    return;
 8002848:	e00f      	b.n	800286a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002850:	2b00      	cmp	r3, #0
 8002852:	d00a      	beq.n	800286a <HAL_UART_IRQHandler+0x1f6>
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800285a:	2b00      	cmp	r3, #0
 800285c:	d005      	beq.n	800286a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f000 f8ee 	bl	8002a40 <UART_EndTransmit_IT>
    return;
 8002864:	bf00      	nop
 8002866:	e000      	b.n	800286a <HAL_UART_IRQHandler+0x1f6>
    return;
 8002868:	bf00      	nop
  }
}
 800286a:	3720      	adds	r7, #32
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	0800296d 	.word	0x0800296d

08002874 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800287c:	bf00      	nop
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002890:	bf00      	nop
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	603b      	str	r3, [r7, #0]
 80028a8:	4613      	mov	r3, r2
 80028aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028ac:	e02c      	b.n	8002908 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b4:	d028      	beq.n	8002908 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d007      	beq.n	80028cc <UART_WaitOnFlagUntilTimeout+0x30>
 80028bc:	f7fd fe88 	bl	80005d0 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d21d      	bcs.n	8002908 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	68da      	ldr	r2, [r3, #12]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80028da:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	695a      	ldr	r2, [r3, #20]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f022 0201 	bic.w	r2, r2, #1
 80028ea:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2220      	movs	r2, #32
 80028f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2220      	movs	r2, #32
 80028f8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e00f      	b.n	8002928 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	4013      	ands	r3, r2
 8002912:	68ba      	ldr	r2, [r7, #8]
 8002914:	429a      	cmp	r2, r3
 8002916:	bf0c      	ite	eq
 8002918:	2301      	moveq	r3, #1
 800291a:	2300      	movne	r3, #0
 800291c:	b2db      	uxtb	r3, r3
 800291e:	461a      	mov	r2, r3
 8002920:	79fb      	ldrb	r3, [r7, #7]
 8002922:	429a      	cmp	r2, r3
 8002924:	d0c3      	beq.n	80028ae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002926:	2300      	movs	r3, #0
}
 8002928:	4618      	mov	r0, r3
 800292a:	3710      	adds	r7, #16
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	68da      	ldr	r2, [r3, #12]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002946:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	695a      	ldr	r2, [r3, #20]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f022 0201 	bic.w	r2, r2, #1
 8002956:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2220      	movs	r2, #32
 800295c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002960:	bf00      	nop
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002978:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2200      	movs	r2, #0
 800297e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2200      	movs	r2, #0
 8002984:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002986:	68f8      	ldr	r0, [r7, #12]
 8002988:	f7ff ff7e 	bl	8002888 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800298c:	bf00      	nop
 800298e:	3710      	adds	r7, #16
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	2b21      	cmp	r3, #33	; 0x21
 80029a6:	d144      	bne.n	8002a32 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029b0:	d11a      	bne.n	80029e8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a1b      	ldr	r3, [r3, #32]
 80029b6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	881b      	ldrh	r3, [r3, #0]
 80029bc:	461a      	mov	r2, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029c6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	691b      	ldr	r3, [r3, #16]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d105      	bne.n	80029dc <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a1b      	ldr	r3, [r3, #32]
 80029d4:	1c9a      	adds	r2, r3, #2
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	621a      	str	r2, [r3, #32]
 80029da:	e00e      	b.n	80029fa <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a1b      	ldr	r3, [r3, #32]
 80029e0:	1c5a      	adds	r2, r3, #1
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	621a      	str	r2, [r3, #32]
 80029e6:	e008      	b.n	80029fa <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a1b      	ldr	r3, [r3, #32]
 80029ec:	1c59      	adds	r1, r3, #1
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	6211      	str	r1, [r2, #32]
 80029f2:	781a      	ldrb	r2, [r3, #0]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	3b01      	subs	r3, #1
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	4619      	mov	r1, r3
 8002a08:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d10f      	bne.n	8002a2e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	68da      	ldr	r2, [r3, #12]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a1c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68da      	ldr	r2, [r3, #12]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a2c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	e000      	b.n	8002a34 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002a32:	2302      	movs	r3, #2
  }
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3714      	adds	r7, #20
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	68da      	ldr	r2, [r3, #12]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a56:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2220      	movs	r2, #32
 8002a5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f7ff ff07 	bl	8002874 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002a66:	2300      	movs	r3, #0
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3708      	adds	r7, #8
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	2b22      	cmp	r3, #34	; 0x22
 8002a82:	d171      	bne.n	8002b68 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a8c:	d123      	bne.n	8002ad6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a92:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	691b      	ldr	r3, [r3, #16]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d10e      	bne.n	8002aba <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002aa8:	b29a      	uxth	r2, r3
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab2:	1c9a      	adds	r2, r3, #2
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	629a      	str	r2, [r3, #40]	; 0x28
 8002ab8:	e029      	b.n	8002b0e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	b29a      	uxth	r2, r3
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ace:	1c5a      	adds	r2, r3, #1
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	629a      	str	r2, [r3, #40]	; 0x28
 8002ad4:	e01b      	b.n	8002b0e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d10a      	bne.n	8002af4 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	6858      	ldr	r0, [r3, #4]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae8:	1c59      	adds	r1, r3, #1
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	6291      	str	r1, [r2, #40]	; 0x28
 8002aee:	b2c2      	uxtb	r2, r0
 8002af0:	701a      	strb	r2, [r3, #0]
 8002af2:	e00c      	b.n	8002b0e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	b2da      	uxtb	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b00:	1c58      	adds	r0, r3, #1
 8002b02:	6879      	ldr	r1, [r7, #4]
 8002b04:	6288      	str	r0, [r1, #40]	; 0x28
 8002b06:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002b0a:	b2d2      	uxtb	r2, r2
 8002b0c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	3b01      	subs	r3, #1
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d120      	bne.n	8002b64 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	68da      	ldr	r2, [r3, #12]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f022 0220 	bic.w	r2, r2, #32
 8002b30:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	68da      	ldr	r2, [r3, #12]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b40:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	695a      	ldr	r2, [r3, #20]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f022 0201 	bic.w	r2, r2, #1
 8002b50:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2220      	movs	r2, #32
 8002b56:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 fce0 	bl	8003520 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002b60:	2300      	movs	r3, #0
 8002b62:	e002      	b.n	8002b6a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002b64:	2300      	movs	r3, #0
 8002b66:	e000      	b.n	8002b6a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002b68:	2302      	movs	r3, #2
  }
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3710      	adds	r7, #16
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
	...

08002b74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b78:	b085      	sub	sp, #20
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	691b      	ldr	r3, [r3, #16]
 8002b84:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	68da      	ldr	r2, [r3, #12]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	430a      	orrs	r2, r1
 8002b92:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689a      	ldr	r2, [r3, #8]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	691b      	ldr	r3, [r3, #16]
 8002b9c:	431a      	orrs	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	695b      	ldr	r3, [r3, #20]
 8002ba2:	431a      	orrs	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	69db      	ldr	r3, [r3, #28]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002bb6:	f023 030c 	bic.w	r3, r3, #12
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	6812      	ldr	r2, [r2, #0]
 8002bbe:	68f9      	ldr	r1, [r7, #12]
 8002bc0:	430b      	orrs	r3, r1
 8002bc2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	695b      	ldr	r3, [r3, #20]
 8002bca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	699a      	ldr	r2, [r3, #24]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	69db      	ldr	r3, [r3, #28]
 8002bde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002be2:	f040 818b 	bne.w	8002efc <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4ac1      	ldr	r2, [pc, #772]	; (8002ef0 <UART_SetConfig+0x37c>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d005      	beq.n	8002bfc <UART_SetConfig+0x88>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4abf      	ldr	r2, [pc, #764]	; (8002ef4 <UART_SetConfig+0x380>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	f040 80bd 	bne.w	8002d76 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002bfc:	f7fe f8fa 	bl	8000df4 <HAL_RCC_GetPCLK2Freq>
 8002c00:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	461d      	mov	r5, r3
 8002c06:	f04f 0600 	mov.w	r6, #0
 8002c0a:	46a8      	mov	r8, r5
 8002c0c:	46b1      	mov	r9, r6
 8002c0e:	eb18 0308 	adds.w	r3, r8, r8
 8002c12:	eb49 0409 	adc.w	r4, r9, r9
 8002c16:	4698      	mov	r8, r3
 8002c18:	46a1      	mov	r9, r4
 8002c1a:	eb18 0805 	adds.w	r8, r8, r5
 8002c1e:	eb49 0906 	adc.w	r9, r9, r6
 8002c22:	f04f 0100 	mov.w	r1, #0
 8002c26:	f04f 0200 	mov.w	r2, #0
 8002c2a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002c2e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002c32:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002c36:	4688      	mov	r8, r1
 8002c38:	4691      	mov	r9, r2
 8002c3a:	eb18 0005 	adds.w	r0, r8, r5
 8002c3e:	eb49 0106 	adc.w	r1, r9, r6
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	461d      	mov	r5, r3
 8002c48:	f04f 0600 	mov.w	r6, #0
 8002c4c:	196b      	adds	r3, r5, r5
 8002c4e:	eb46 0406 	adc.w	r4, r6, r6
 8002c52:	461a      	mov	r2, r3
 8002c54:	4623      	mov	r3, r4
 8002c56:	f7fd fad5 	bl	8000204 <__aeabi_uldivmod>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	460c      	mov	r4, r1
 8002c5e:	461a      	mov	r2, r3
 8002c60:	4ba5      	ldr	r3, [pc, #660]	; (8002ef8 <UART_SetConfig+0x384>)
 8002c62:	fba3 2302 	umull	r2, r3, r3, r2
 8002c66:	095b      	lsrs	r3, r3, #5
 8002c68:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	461d      	mov	r5, r3
 8002c70:	f04f 0600 	mov.w	r6, #0
 8002c74:	46a9      	mov	r9, r5
 8002c76:	46b2      	mov	sl, r6
 8002c78:	eb19 0309 	adds.w	r3, r9, r9
 8002c7c:	eb4a 040a 	adc.w	r4, sl, sl
 8002c80:	4699      	mov	r9, r3
 8002c82:	46a2      	mov	sl, r4
 8002c84:	eb19 0905 	adds.w	r9, r9, r5
 8002c88:	eb4a 0a06 	adc.w	sl, sl, r6
 8002c8c:	f04f 0100 	mov.w	r1, #0
 8002c90:	f04f 0200 	mov.w	r2, #0
 8002c94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c98:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002c9c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002ca0:	4689      	mov	r9, r1
 8002ca2:	4692      	mov	sl, r2
 8002ca4:	eb19 0005 	adds.w	r0, r9, r5
 8002ca8:	eb4a 0106 	adc.w	r1, sl, r6
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	461d      	mov	r5, r3
 8002cb2:	f04f 0600 	mov.w	r6, #0
 8002cb6:	196b      	adds	r3, r5, r5
 8002cb8:	eb46 0406 	adc.w	r4, r6, r6
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	4623      	mov	r3, r4
 8002cc0:	f7fd faa0 	bl	8000204 <__aeabi_uldivmod>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	460c      	mov	r4, r1
 8002cc8:	461a      	mov	r2, r3
 8002cca:	4b8b      	ldr	r3, [pc, #556]	; (8002ef8 <UART_SetConfig+0x384>)
 8002ccc:	fba3 1302 	umull	r1, r3, r3, r2
 8002cd0:	095b      	lsrs	r3, r3, #5
 8002cd2:	2164      	movs	r1, #100	; 0x64
 8002cd4:	fb01 f303 	mul.w	r3, r1, r3
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	00db      	lsls	r3, r3, #3
 8002cdc:	3332      	adds	r3, #50	; 0x32
 8002cde:	4a86      	ldr	r2, [pc, #536]	; (8002ef8 <UART_SetConfig+0x384>)
 8002ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce4:	095b      	lsrs	r3, r3, #5
 8002ce6:	005b      	lsls	r3, r3, #1
 8002ce8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002cec:	4498      	add	r8, r3
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	461d      	mov	r5, r3
 8002cf2:	f04f 0600 	mov.w	r6, #0
 8002cf6:	46a9      	mov	r9, r5
 8002cf8:	46b2      	mov	sl, r6
 8002cfa:	eb19 0309 	adds.w	r3, r9, r9
 8002cfe:	eb4a 040a 	adc.w	r4, sl, sl
 8002d02:	4699      	mov	r9, r3
 8002d04:	46a2      	mov	sl, r4
 8002d06:	eb19 0905 	adds.w	r9, r9, r5
 8002d0a:	eb4a 0a06 	adc.w	sl, sl, r6
 8002d0e:	f04f 0100 	mov.w	r1, #0
 8002d12:	f04f 0200 	mov.w	r2, #0
 8002d16:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d1a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002d1e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002d22:	4689      	mov	r9, r1
 8002d24:	4692      	mov	sl, r2
 8002d26:	eb19 0005 	adds.w	r0, r9, r5
 8002d2a:	eb4a 0106 	adc.w	r1, sl, r6
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	461d      	mov	r5, r3
 8002d34:	f04f 0600 	mov.w	r6, #0
 8002d38:	196b      	adds	r3, r5, r5
 8002d3a:	eb46 0406 	adc.w	r4, r6, r6
 8002d3e:	461a      	mov	r2, r3
 8002d40:	4623      	mov	r3, r4
 8002d42:	f7fd fa5f 	bl	8000204 <__aeabi_uldivmod>
 8002d46:	4603      	mov	r3, r0
 8002d48:	460c      	mov	r4, r1
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	4b6a      	ldr	r3, [pc, #424]	; (8002ef8 <UART_SetConfig+0x384>)
 8002d4e:	fba3 1302 	umull	r1, r3, r3, r2
 8002d52:	095b      	lsrs	r3, r3, #5
 8002d54:	2164      	movs	r1, #100	; 0x64
 8002d56:	fb01 f303 	mul.w	r3, r1, r3
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	00db      	lsls	r3, r3, #3
 8002d5e:	3332      	adds	r3, #50	; 0x32
 8002d60:	4a65      	ldr	r2, [pc, #404]	; (8002ef8 <UART_SetConfig+0x384>)
 8002d62:	fba2 2303 	umull	r2, r3, r2, r3
 8002d66:	095b      	lsrs	r3, r3, #5
 8002d68:	f003 0207 	and.w	r2, r3, #7
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4442      	add	r2, r8
 8002d72:	609a      	str	r2, [r3, #8]
 8002d74:	e26f      	b.n	8003256 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002d76:	f7fe f829 	bl	8000dcc <HAL_RCC_GetPCLK1Freq>
 8002d7a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	461d      	mov	r5, r3
 8002d80:	f04f 0600 	mov.w	r6, #0
 8002d84:	46a8      	mov	r8, r5
 8002d86:	46b1      	mov	r9, r6
 8002d88:	eb18 0308 	adds.w	r3, r8, r8
 8002d8c:	eb49 0409 	adc.w	r4, r9, r9
 8002d90:	4698      	mov	r8, r3
 8002d92:	46a1      	mov	r9, r4
 8002d94:	eb18 0805 	adds.w	r8, r8, r5
 8002d98:	eb49 0906 	adc.w	r9, r9, r6
 8002d9c:	f04f 0100 	mov.w	r1, #0
 8002da0:	f04f 0200 	mov.w	r2, #0
 8002da4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002da8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002dac:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002db0:	4688      	mov	r8, r1
 8002db2:	4691      	mov	r9, r2
 8002db4:	eb18 0005 	adds.w	r0, r8, r5
 8002db8:	eb49 0106 	adc.w	r1, r9, r6
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	461d      	mov	r5, r3
 8002dc2:	f04f 0600 	mov.w	r6, #0
 8002dc6:	196b      	adds	r3, r5, r5
 8002dc8:	eb46 0406 	adc.w	r4, r6, r6
 8002dcc:	461a      	mov	r2, r3
 8002dce:	4623      	mov	r3, r4
 8002dd0:	f7fd fa18 	bl	8000204 <__aeabi_uldivmod>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	460c      	mov	r4, r1
 8002dd8:	461a      	mov	r2, r3
 8002dda:	4b47      	ldr	r3, [pc, #284]	; (8002ef8 <UART_SetConfig+0x384>)
 8002ddc:	fba3 2302 	umull	r2, r3, r3, r2
 8002de0:	095b      	lsrs	r3, r3, #5
 8002de2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	461d      	mov	r5, r3
 8002dea:	f04f 0600 	mov.w	r6, #0
 8002dee:	46a9      	mov	r9, r5
 8002df0:	46b2      	mov	sl, r6
 8002df2:	eb19 0309 	adds.w	r3, r9, r9
 8002df6:	eb4a 040a 	adc.w	r4, sl, sl
 8002dfa:	4699      	mov	r9, r3
 8002dfc:	46a2      	mov	sl, r4
 8002dfe:	eb19 0905 	adds.w	r9, r9, r5
 8002e02:	eb4a 0a06 	adc.w	sl, sl, r6
 8002e06:	f04f 0100 	mov.w	r1, #0
 8002e0a:	f04f 0200 	mov.w	r2, #0
 8002e0e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e12:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002e16:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002e1a:	4689      	mov	r9, r1
 8002e1c:	4692      	mov	sl, r2
 8002e1e:	eb19 0005 	adds.w	r0, r9, r5
 8002e22:	eb4a 0106 	adc.w	r1, sl, r6
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	461d      	mov	r5, r3
 8002e2c:	f04f 0600 	mov.w	r6, #0
 8002e30:	196b      	adds	r3, r5, r5
 8002e32:	eb46 0406 	adc.w	r4, r6, r6
 8002e36:	461a      	mov	r2, r3
 8002e38:	4623      	mov	r3, r4
 8002e3a:	f7fd f9e3 	bl	8000204 <__aeabi_uldivmod>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	460c      	mov	r4, r1
 8002e42:	461a      	mov	r2, r3
 8002e44:	4b2c      	ldr	r3, [pc, #176]	; (8002ef8 <UART_SetConfig+0x384>)
 8002e46:	fba3 1302 	umull	r1, r3, r3, r2
 8002e4a:	095b      	lsrs	r3, r3, #5
 8002e4c:	2164      	movs	r1, #100	; 0x64
 8002e4e:	fb01 f303 	mul.w	r3, r1, r3
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	00db      	lsls	r3, r3, #3
 8002e56:	3332      	adds	r3, #50	; 0x32
 8002e58:	4a27      	ldr	r2, [pc, #156]	; (8002ef8 <UART_SetConfig+0x384>)
 8002e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e5e:	095b      	lsrs	r3, r3, #5
 8002e60:	005b      	lsls	r3, r3, #1
 8002e62:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002e66:	4498      	add	r8, r3
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	461d      	mov	r5, r3
 8002e6c:	f04f 0600 	mov.w	r6, #0
 8002e70:	46a9      	mov	r9, r5
 8002e72:	46b2      	mov	sl, r6
 8002e74:	eb19 0309 	adds.w	r3, r9, r9
 8002e78:	eb4a 040a 	adc.w	r4, sl, sl
 8002e7c:	4699      	mov	r9, r3
 8002e7e:	46a2      	mov	sl, r4
 8002e80:	eb19 0905 	adds.w	r9, r9, r5
 8002e84:	eb4a 0a06 	adc.w	sl, sl, r6
 8002e88:	f04f 0100 	mov.w	r1, #0
 8002e8c:	f04f 0200 	mov.w	r2, #0
 8002e90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e94:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002e98:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002e9c:	4689      	mov	r9, r1
 8002e9e:	4692      	mov	sl, r2
 8002ea0:	eb19 0005 	adds.w	r0, r9, r5
 8002ea4:	eb4a 0106 	adc.w	r1, sl, r6
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	461d      	mov	r5, r3
 8002eae:	f04f 0600 	mov.w	r6, #0
 8002eb2:	196b      	adds	r3, r5, r5
 8002eb4:	eb46 0406 	adc.w	r4, r6, r6
 8002eb8:	461a      	mov	r2, r3
 8002eba:	4623      	mov	r3, r4
 8002ebc:	f7fd f9a2 	bl	8000204 <__aeabi_uldivmod>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	460c      	mov	r4, r1
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	4b0c      	ldr	r3, [pc, #48]	; (8002ef8 <UART_SetConfig+0x384>)
 8002ec8:	fba3 1302 	umull	r1, r3, r3, r2
 8002ecc:	095b      	lsrs	r3, r3, #5
 8002ece:	2164      	movs	r1, #100	; 0x64
 8002ed0:	fb01 f303 	mul.w	r3, r1, r3
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	00db      	lsls	r3, r3, #3
 8002ed8:	3332      	adds	r3, #50	; 0x32
 8002eda:	4a07      	ldr	r2, [pc, #28]	; (8002ef8 <UART_SetConfig+0x384>)
 8002edc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee0:	095b      	lsrs	r3, r3, #5
 8002ee2:	f003 0207 	and.w	r2, r3, #7
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4442      	add	r2, r8
 8002eec:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002eee:	e1b2      	b.n	8003256 <UART_SetConfig+0x6e2>
 8002ef0:	40011000 	.word	0x40011000
 8002ef4:	40011400 	.word	0x40011400
 8002ef8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4ad7      	ldr	r2, [pc, #860]	; (8003260 <UART_SetConfig+0x6ec>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d005      	beq.n	8002f12 <UART_SetConfig+0x39e>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4ad6      	ldr	r2, [pc, #856]	; (8003264 <UART_SetConfig+0x6f0>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	f040 80d1 	bne.w	80030b4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f12:	f7fd ff6f 	bl	8000df4 <HAL_RCC_GetPCLK2Freq>
 8002f16:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	469a      	mov	sl, r3
 8002f1c:	f04f 0b00 	mov.w	fp, #0
 8002f20:	46d0      	mov	r8, sl
 8002f22:	46d9      	mov	r9, fp
 8002f24:	eb18 0308 	adds.w	r3, r8, r8
 8002f28:	eb49 0409 	adc.w	r4, r9, r9
 8002f2c:	4698      	mov	r8, r3
 8002f2e:	46a1      	mov	r9, r4
 8002f30:	eb18 080a 	adds.w	r8, r8, sl
 8002f34:	eb49 090b 	adc.w	r9, r9, fp
 8002f38:	f04f 0100 	mov.w	r1, #0
 8002f3c:	f04f 0200 	mov.w	r2, #0
 8002f40:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002f44:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002f48:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002f4c:	4688      	mov	r8, r1
 8002f4e:	4691      	mov	r9, r2
 8002f50:	eb1a 0508 	adds.w	r5, sl, r8
 8002f54:	eb4b 0609 	adc.w	r6, fp, r9
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	f04f 0200 	mov.w	r2, #0
 8002f62:	f04f 0300 	mov.w	r3, #0
 8002f66:	f04f 0400 	mov.w	r4, #0
 8002f6a:	0094      	lsls	r4, r2, #2
 8002f6c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002f70:	008b      	lsls	r3, r1, #2
 8002f72:	461a      	mov	r2, r3
 8002f74:	4623      	mov	r3, r4
 8002f76:	4628      	mov	r0, r5
 8002f78:	4631      	mov	r1, r6
 8002f7a:	f7fd f943 	bl	8000204 <__aeabi_uldivmod>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	460c      	mov	r4, r1
 8002f82:	461a      	mov	r2, r3
 8002f84:	4bb8      	ldr	r3, [pc, #736]	; (8003268 <UART_SetConfig+0x6f4>)
 8002f86:	fba3 2302 	umull	r2, r3, r3, r2
 8002f8a:	095b      	lsrs	r3, r3, #5
 8002f8c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	469b      	mov	fp, r3
 8002f94:	f04f 0c00 	mov.w	ip, #0
 8002f98:	46d9      	mov	r9, fp
 8002f9a:	46e2      	mov	sl, ip
 8002f9c:	eb19 0309 	adds.w	r3, r9, r9
 8002fa0:	eb4a 040a 	adc.w	r4, sl, sl
 8002fa4:	4699      	mov	r9, r3
 8002fa6:	46a2      	mov	sl, r4
 8002fa8:	eb19 090b 	adds.w	r9, r9, fp
 8002fac:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002fb0:	f04f 0100 	mov.w	r1, #0
 8002fb4:	f04f 0200 	mov.w	r2, #0
 8002fb8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002fbc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002fc0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002fc4:	4689      	mov	r9, r1
 8002fc6:	4692      	mov	sl, r2
 8002fc8:	eb1b 0509 	adds.w	r5, fp, r9
 8002fcc:	eb4c 060a 	adc.w	r6, ip, sl
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	f04f 0200 	mov.w	r2, #0
 8002fda:	f04f 0300 	mov.w	r3, #0
 8002fde:	f04f 0400 	mov.w	r4, #0
 8002fe2:	0094      	lsls	r4, r2, #2
 8002fe4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002fe8:	008b      	lsls	r3, r1, #2
 8002fea:	461a      	mov	r2, r3
 8002fec:	4623      	mov	r3, r4
 8002fee:	4628      	mov	r0, r5
 8002ff0:	4631      	mov	r1, r6
 8002ff2:	f7fd f907 	bl	8000204 <__aeabi_uldivmod>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	460c      	mov	r4, r1
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	4b9a      	ldr	r3, [pc, #616]	; (8003268 <UART_SetConfig+0x6f4>)
 8002ffe:	fba3 1302 	umull	r1, r3, r3, r2
 8003002:	095b      	lsrs	r3, r3, #5
 8003004:	2164      	movs	r1, #100	; 0x64
 8003006:	fb01 f303 	mul.w	r3, r1, r3
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	011b      	lsls	r3, r3, #4
 800300e:	3332      	adds	r3, #50	; 0x32
 8003010:	4a95      	ldr	r2, [pc, #596]	; (8003268 <UART_SetConfig+0x6f4>)
 8003012:	fba2 2303 	umull	r2, r3, r2, r3
 8003016:	095b      	lsrs	r3, r3, #5
 8003018:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800301c:	4498      	add	r8, r3
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	469b      	mov	fp, r3
 8003022:	f04f 0c00 	mov.w	ip, #0
 8003026:	46d9      	mov	r9, fp
 8003028:	46e2      	mov	sl, ip
 800302a:	eb19 0309 	adds.w	r3, r9, r9
 800302e:	eb4a 040a 	adc.w	r4, sl, sl
 8003032:	4699      	mov	r9, r3
 8003034:	46a2      	mov	sl, r4
 8003036:	eb19 090b 	adds.w	r9, r9, fp
 800303a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800303e:	f04f 0100 	mov.w	r1, #0
 8003042:	f04f 0200 	mov.w	r2, #0
 8003046:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800304a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800304e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003052:	4689      	mov	r9, r1
 8003054:	4692      	mov	sl, r2
 8003056:	eb1b 0509 	adds.w	r5, fp, r9
 800305a:	eb4c 060a 	adc.w	r6, ip, sl
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	4619      	mov	r1, r3
 8003064:	f04f 0200 	mov.w	r2, #0
 8003068:	f04f 0300 	mov.w	r3, #0
 800306c:	f04f 0400 	mov.w	r4, #0
 8003070:	0094      	lsls	r4, r2, #2
 8003072:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003076:	008b      	lsls	r3, r1, #2
 8003078:	461a      	mov	r2, r3
 800307a:	4623      	mov	r3, r4
 800307c:	4628      	mov	r0, r5
 800307e:	4631      	mov	r1, r6
 8003080:	f7fd f8c0 	bl	8000204 <__aeabi_uldivmod>
 8003084:	4603      	mov	r3, r0
 8003086:	460c      	mov	r4, r1
 8003088:	461a      	mov	r2, r3
 800308a:	4b77      	ldr	r3, [pc, #476]	; (8003268 <UART_SetConfig+0x6f4>)
 800308c:	fba3 1302 	umull	r1, r3, r3, r2
 8003090:	095b      	lsrs	r3, r3, #5
 8003092:	2164      	movs	r1, #100	; 0x64
 8003094:	fb01 f303 	mul.w	r3, r1, r3
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	011b      	lsls	r3, r3, #4
 800309c:	3332      	adds	r3, #50	; 0x32
 800309e:	4a72      	ldr	r2, [pc, #456]	; (8003268 <UART_SetConfig+0x6f4>)
 80030a0:	fba2 2303 	umull	r2, r3, r2, r3
 80030a4:	095b      	lsrs	r3, r3, #5
 80030a6:	f003 020f 	and.w	r2, r3, #15
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4442      	add	r2, r8
 80030b0:	609a      	str	r2, [r3, #8]
 80030b2:	e0d0      	b.n	8003256 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80030b4:	f7fd fe8a 	bl	8000dcc <HAL_RCC_GetPCLK1Freq>
 80030b8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	469a      	mov	sl, r3
 80030be:	f04f 0b00 	mov.w	fp, #0
 80030c2:	46d0      	mov	r8, sl
 80030c4:	46d9      	mov	r9, fp
 80030c6:	eb18 0308 	adds.w	r3, r8, r8
 80030ca:	eb49 0409 	adc.w	r4, r9, r9
 80030ce:	4698      	mov	r8, r3
 80030d0:	46a1      	mov	r9, r4
 80030d2:	eb18 080a 	adds.w	r8, r8, sl
 80030d6:	eb49 090b 	adc.w	r9, r9, fp
 80030da:	f04f 0100 	mov.w	r1, #0
 80030de:	f04f 0200 	mov.w	r2, #0
 80030e2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80030e6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80030ea:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80030ee:	4688      	mov	r8, r1
 80030f0:	4691      	mov	r9, r2
 80030f2:	eb1a 0508 	adds.w	r5, sl, r8
 80030f6:	eb4b 0609 	adc.w	r6, fp, r9
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	4619      	mov	r1, r3
 8003100:	f04f 0200 	mov.w	r2, #0
 8003104:	f04f 0300 	mov.w	r3, #0
 8003108:	f04f 0400 	mov.w	r4, #0
 800310c:	0094      	lsls	r4, r2, #2
 800310e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003112:	008b      	lsls	r3, r1, #2
 8003114:	461a      	mov	r2, r3
 8003116:	4623      	mov	r3, r4
 8003118:	4628      	mov	r0, r5
 800311a:	4631      	mov	r1, r6
 800311c:	f7fd f872 	bl	8000204 <__aeabi_uldivmod>
 8003120:	4603      	mov	r3, r0
 8003122:	460c      	mov	r4, r1
 8003124:	461a      	mov	r2, r3
 8003126:	4b50      	ldr	r3, [pc, #320]	; (8003268 <UART_SetConfig+0x6f4>)
 8003128:	fba3 2302 	umull	r2, r3, r3, r2
 800312c:	095b      	lsrs	r3, r3, #5
 800312e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	469b      	mov	fp, r3
 8003136:	f04f 0c00 	mov.w	ip, #0
 800313a:	46d9      	mov	r9, fp
 800313c:	46e2      	mov	sl, ip
 800313e:	eb19 0309 	adds.w	r3, r9, r9
 8003142:	eb4a 040a 	adc.w	r4, sl, sl
 8003146:	4699      	mov	r9, r3
 8003148:	46a2      	mov	sl, r4
 800314a:	eb19 090b 	adds.w	r9, r9, fp
 800314e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003152:	f04f 0100 	mov.w	r1, #0
 8003156:	f04f 0200 	mov.w	r2, #0
 800315a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800315e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003162:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003166:	4689      	mov	r9, r1
 8003168:	4692      	mov	sl, r2
 800316a:	eb1b 0509 	adds.w	r5, fp, r9
 800316e:	eb4c 060a 	adc.w	r6, ip, sl
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	4619      	mov	r1, r3
 8003178:	f04f 0200 	mov.w	r2, #0
 800317c:	f04f 0300 	mov.w	r3, #0
 8003180:	f04f 0400 	mov.w	r4, #0
 8003184:	0094      	lsls	r4, r2, #2
 8003186:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800318a:	008b      	lsls	r3, r1, #2
 800318c:	461a      	mov	r2, r3
 800318e:	4623      	mov	r3, r4
 8003190:	4628      	mov	r0, r5
 8003192:	4631      	mov	r1, r6
 8003194:	f7fd f836 	bl	8000204 <__aeabi_uldivmod>
 8003198:	4603      	mov	r3, r0
 800319a:	460c      	mov	r4, r1
 800319c:	461a      	mov	r2, r3
 800319e:	4b32      	ldr	r3, [pc, #200]	; (8003268 <UART_SetConfig+0x6f4>)
 80031a0:	fba3 1302 	umull	r1, r3, r3, r2
 80031a4:	095b      	lsrs	r3, r3, #5
 80031a6:	2164      	movs	r1, #100	; 0x64
 80031a8:	fb01 f303 	mul.w	r3, r1, r3
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	011b      	lsls	r3, r3, #4
 80031b0:	3332      	adds	r3, #50	; 0x32
 80031b2:	4a2d      	ldr	r2, [pc, #180]	; (8003268 <UART_SetConfig+0x6f4>)
 80031b4:	fba2 2303 	umull	r2, r3, r2, r3
 80031b8:	095b      	lsrs	r3, r3, #5
 80031ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031be:	4498      	add	r8, r3
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	469b      	mov	fp, r3
 80031c4:	f04f 0c00 	mov.w	ip, #0
 80031c8:	46d9      	mov	r9, fp
 80031ca:	46e2      	mov	sl, ip
 80031cc:	eb19 0309 	adds.w	r3, r9, r9
 80031d0:	eb4a 040a 	adc.w	r4, sl, sl
 80031d4:	4699      	mov	r9, r3
 80031d6:	46a2      	mov	sl, r4
 80031d8:	eb19 090b 	adds.w	r9, r9, fp
 80031dc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80031e0:	f04f 0100 	mov.w	r1, #0
 80031e4:	f04f 0200 	mov.w	r2, #0
 80031e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031ec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80031f0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80031f4:	4689      	mov	r9, r1
 80031f6:	4692      	mov	sl, r2
 80031f8:	eb1b 0509 	adds.w	r5, fp, r9
 80031fc:	eb4c 060a 	adc.w	r6, ip, sl
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	4619      	mov	r1, r3
 8003206:	f04f 0200 	mov.w	r2, #0
 800320a:	f04f 0300 	mov.w	r3, #0
 800320e:	f04f 0400 	mov.w	r4, #0
 8003212:	0094      	lsls	r4, r2, #2
 8003214:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003218:	008b      	lsls	r3, r1, #2
 800321a:	461a      	mov	r2, r3
 800321c:	4623      	mov	r3, r4
 800321e:	4628      	mov	r0, r5
 8003220:	4631      	mov	r1, r6
 8003222:	f7fc ffef 	bl	8000204 <__aeabi_uldivmod>
 8003226:	4603      	mov	r3, r0
 8003228:	460c      	mov	r4, r1
 800322a:	461a      	mov	r2, r3
 800322c:	4b0e      	ldr	r3, [pc, #56]	; (8003268 <UART_SetConfig+0x6f4>)
 800322e:	fba3 1302 	umull	r1, r3, r3, r2
 8003232:	095b      	lsrs	r3, r3, #5
 8003234:	2164      	movs	r1, #100	; 0x64
 8003236:	fb01 f303 	mul.w	r3, r1, r3
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	011b      	lsls	r3, r3, #4
 800323e:	3332      	adds	r3, #50	; 0x32
 8003240:	4a09      	ldr	r2, [pc, #36]	; (8003268 <UART_SetConfig+0x6f4>)
 8003242:	fba2 2303 	umull	r2, r3, r2, r3
 8003246:	095b      	lsrs	r3, r3, #5
 8003248:	f003 020f 	and.w	r2, r3, #15
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4442      	add	r2, r8
 8003252:	609a      	str	r2, [r3, #8]
}
 8003254:	e7ff      	b.n	8003256 <UART_SetConfig+0x6e2>
 8003256:	bf00      	nop
 8003258:	3714      	adds	r7, #20
 800325a:	46bd      	mov	sp, r7
 800325c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003260:	40011000 	.word	0x40011000
 8003264:	40011400 	.word	0x40011400
 8003268:	51eb851f 	.word	0x51eb851f

0800326c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003272:	2300      	movs	r3, #0
 8003274:	607b      	str	r3, [r7, #4]
 8003276:	4b0c      	ldr	r3, [pc, #48]	; (80032a8 <MX_DMA_Init+0x3c>)
 8003278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327a:	4a0b      	ldr	r2, [pc, #44]	; (80032a8 <MX_DMA_Init+0x3c>)
 800327c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003280:	6313      	str	r3, [r2, #48]	; 0x30
 8003282:	4b09      	ldr	r3, [pc, #36]	; (80032a8 <MX_DMA_Init+0x3c>)
 8003284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003286:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800328a:	607b      	str	r3, [r7, #4]
 800328c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800328e:	2200      	movs	r2, #0
 8003290:	2100      	movs	r1, #0
 8003292:	2010      	movs	r0, #16
 8003294:	f7fd faa5 	bl	80007e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8003298:	2010      	movs	r0, #16
 800329a:	f7fd fabe 	bl	800081a <HAL_NVIC_EnableIRQ>

}
 800329e:	bf00      	nop
 80032a0:	3708      	adds	r7, #8
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	40023800 	.word	0x40023800

080032ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b08a      	sub	sp, #40	; 0x28
 80032b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032b2:	f107 0314 	add.w	r3, r7, #20
 80032b6:	2200      	movs	r2, #0
 80032b8:	601a      	str	r2, [r3, #0]
 80032ba:	605a      	str	r2, [r3, #4]
 80032bc:	609a      	str	r2, [r3, #8]
 80032be:	60da      	str	r2, [r3, #12]
 80032c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80032c2:	2300      	movs	r3, #0
 80032c4:	613b      	str	r3, [r7, #16]
 80032c6:	4b23      	ldr	r3, [pc, #140]	; (8003354 <MX_GPIO_Init+0xa8>)
 80032c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ca:	4a22      	ldr	r2, [pc, #136]	; (8003354 <MX_GPIO_Init+0xa8>)
 80032cc:	f043 0304 	orr.w	r3, r3, #4
 80032d0:	6313      	str	r3, [r2, #48]	; 0x30
 80032d2:	4b20      	ldr	r3, [pc, #128]	; (8003354 <MX_GPIO_Init+0xa8>)
 80032d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d6:	f003 0304 	and.w	r3, r3, #4
 80032da:	613b      	str	r3, [r7, #16]
 80032dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80032de:	2300      	movs	r3, #0
 80032e0:	60fb      	str	r3, [r7, #12]
 80032e2:	4b1c      	ldr	r3, [pc, #112]	; (8003354 <MX_GPIO_Init+0xa8>)
 80032e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e6:	4a1b      	ldr	r2, [pc, #108]	; (8003354 <MX_GPIO_Init+0xa8>)
 80032e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032ec:	6313      	str	r3, [r2, #48]	; 0x30
 80032ee:	4b19      	ldr	r3, [pc, #100]	; (8003354 <MX_GPIO_Init+0xa8>)
 80032f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032f6:	60fb      	str	r3, [r7, #12]
 80032f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80032fa:	2300      	movs	r3, #0
 80032fc:	60bb      	str	r3, [r7, #8]
 80032fe:	4b15      	ldr	r3, [pc, #84]	; (8003354 <MX_GPIO_Init+0xa8>)
 8003300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003302:	4a14      	ldr	r2, [pc, #80]	; (8003354 <MX_GPIO_Init+0xa8>)
 8003304:	f043 0301 	orr.w	r3, r3, #1
 8003308:	6313      	str	r3, [r2, #48]	; 0x30
 800330a:	4b12      	ldr	r3, [pc, #72]	; (8003354 <MX_GPIO_Init+0xa8>)
 800330c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330e:	f003 0301 	and.w	r3, r3, #1
 8003312:	60bb      	str	r3, [r7, #8]
 8003314:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003316:	2300      	movs	r3, #0
 8003318:	607b      	str	r3, [r7, #4]
 800331a:	4b0e      	ldr	r3, [pc, #56]	; (8003354 <MX_GPIO_Init+0xa8>)
 800331c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331e:	4a0d      	ldr	r2, [pc, #52]	; (8003354 <MX_GPIO_Init+0xa8>)
 8003320:	f043 0302 	orr.w	r3, r3, #2
 8003324:	6313      	str	r3, [r2, #48]	; 0x30
 8003326:	4b0b      	ldr	r3, [pc, #44]	; (8003354 <MX_GPIO_Init+0xa8>)
 8003328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332a:	f003 0302 	and.w	r3, r3, #2
 800332e:	607b      	str	r3, [r7, #4]
 8003330:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003332:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003336:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003338:	4b07      	ldr	r3, [pc, #28]	; (8003358 <MX_GPIO_Init+0xac>)
 800333a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800333c:	2300      	movs	r3, #0
 800333e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003340:	f107 0314 	add.w	r3, r7, #20
 8003344:	4619      	mov	r1, r3
 8003346:	4805      	ldr	r0, [pc, #20]	; (800335c <MX_GPIO_Init+0xb0>)
 8003348:	f7fd faa4 	bl	8000894 <HAL_GPIO_Init>

}
 800334c:	bf00      	nop
 800334e:	3728      	adds	r7, #40	; 0x28
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	40023800 	.word	0x40023800
 8003358:	10210000 	.word	0x10210000
 800335c:	40020800 	.word	0x40020800

08003360 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t mode=1;
 8003366:	2301      	movs	r3, #1
 8003368:	73fb      	strb	r3, [r7, #15]
	uint32_t ledpwmval=0;
 800336a:	2300      	movs	r3, #0
 800336c:	60bb      	str	r3, [r7, #8]
	bool flag=true;
 800336e:	2301      	movs	r3, #1
 8003370:	71fb      	strb	r3, [r7, #7]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003372:	f7fd f8c7 	bl	8000504 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003376:	f000 f865 	bl	8003444 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800337a:	f7ff ff97 	bl	80032ac <MX_GPIO_Init>
  MX_TIM2_Init();
 800337e:	f000 f967 	bl	8003650 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8003382:	f000 fa39 	bl	80037f8 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8003386:	f7ff ff71 	bl	800326c <MX_DMA_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 800338a:	2100      	movs	r1, #0
 800338c:	4827      	ldr	r0, [pc, #156]	; (800342c <main+0xcc>)
 800338e:	f7fe f99f 	bl	80016d0 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart2, myRxData, 11);
 8003392:	220b      	movs	r2, #11
 8003394:	4926      	ldr	r1, [pc, #152]	; (8003430 <main+0xd0>)
 8003396:	4827      	ldr	r0, [pc, #156]	; (8003434 <main+0xd4>)
 8003398:	f7ff f916 	bl	80025c8 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
     {

	  if (serialFlag)
 800339c:	4b26      	ldr	r3, [pc, #152]	; (8003438 <main+0xd8>)
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d00d      	beq.n	80033c0 <main+0x60>
	  {
		  serialFlag = 0;
 80033a4:	4b24      	ldr	r3, [pc, #144]	; (8003438 <main+0xd8>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2, myTxData, 13, 10);
 80033aa:	230a      	movs	r3, #10
 80033ac:	220d      	movs	r2, #13
 80033ae:	4923      	ldr	r1, [pc, #140]	; (800343c <main+0xdc>)
 80033b0:	4820      	ldr	r0, [pc, #128]	; (8003434 <main+0xd4>)
 80033b2:	f7ff f870 	bl	8002496 <HAL_UART_Transmit>
		  HAL_UART_Receive_IT(&huart2, myRxData, 11);
 80033b6:	220b      	movs	r2, #11
 80033b8:	491d      	ldr	r1, [pc, #116]	; (8003430 <main+0xd0>)
 80033ba:	481e      	ldr	r0, [pc, #120]	; (8003434 <main+0xd4>)
 80033bc:	f7ff f904 	bl	80025c8 <HAL_UART_Receive_IT>
	  }
	  //HAL_UART_Transmit(&huart2, myTxData, 13, 10);
       /* USER CODE END WHILE */
	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)==GPIO_PIN_SET && flag)
 80033c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80033c4:	481e      	ldr	r0, [pc, #120]	; (8003440 <main+0xe0>)
 80033c6:	f7fd fbf7 	bl	8000bb8 <HAL_GPIO_ReadPin>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d10f      	bne.n	80033f0 <main+0x90>
 80033d0:	79fb      	ldrb	r3, [r7, #7]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d00c      	beq.n	80033f0 <main+0x90>
	  {
		  flag=false;
 80033d6:	2300      	movs	r3, #0
 80033d8:	71fb      	strb	r3, [r7, #7]
		 // State=HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_5);
		  if (mode==1)
 80033da:	7bfb      	ldrb	r3, [r7, #15]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d103      	bne.n	80033e8 <main+0x88>
		    		  ledpwmval=ledpwmval+50;
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	3332      	adds	r3, #50	; 0x32
 80033e4:	60bb      	str	r3, [r7, #8]
		  if (mode==1)
 80033e6:	e00d      	b.n	8003404 <main+0xa4>
		  else
		    		  ledpwmval=ledpwmval-50;
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	3b32      	subs	r3, #50	; 0x32
 80033ec:	60bb      	str	r3, [r7, #8]
		  if (mode==1)
 80033ee:	e009      	b.n	8003404 <main+0xa4>
	  }else if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)==GPIO_PIN_RESET)
 80033f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80033f4:	4812      	ldr	r0, [pc, #72]	; (8003440 <main+0xe0>)
 80033f6:	f7fd fbdf 	bl	8000bb8 <HAL_GPIO_ReadPin>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d101      	bne.n	8003404 <main+0xa4>
	  {
		 // State=HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_5);
		  flag=true;
 8003400:	2301      	movs	r3, #1
 8003402:	71fb      	strb	r3, [r7, #7]
   	 /* if (mode)
   		  ledpwmval ++;
   	  else
   		  ledpwmval --;*/

   	  if (ledpwmval >=1000)
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800340a:	d301      	bcc.n	8003410 <main+0xb0>
   		  mode=0;//led value get cleared and work at the OFF mode
 800340c:	2300      	movs	r3, #0
 800340e:	73fb      	strb	r3, [r7, #15]
   	  if (ledpwmval==0)
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d101      	bne.n	800341a <main+0xba>
   		  mode=1;//
 8003416:	2301      	movs	r3, #1
 8003418:	73fb      	strb	r3, [r7, #15]
   	//  _HAL_TIM_COMPARE(&htim2,TIM_CHANNEL_1,ledpwmval);

   	  TIM2->CCR1 = ledpwmval;
 800341a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	6353      	str	r3, [r2, #52]	; 0x34
   	  HAL_Delay(10);
 8003422:	200a      	movs	r0, #10
 8003424:	f7fd f8e0 	bl	80005e8 <HAL_Delay>
	  if (serialFlag)
 8003428:	e7b8      	b.n	800339c <main+0x3c>
 800342a:	bf00      	nop
 800342c:	20000048 	.word	0x20000048
 8003430:	2000003c 	.word	0x2000003c
 8003434:	20000088 	.word	0x20000088
 8003438:	20000047 	.word	0x20000047
 800343c:	20000008 	.word	0x20000008
 8003440:	40020800 	.word	0x40020800

08003444 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b094      	sub	sp, #80	; 0x50
 8003448:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800344a:	f107 031c 	add.w	r3, r7, #28
 800344e:	2234      	movs	r2, #52	; 0x34
 8003450:	2100      	movs	r1, #0
 8003452:	4618      	mov	r0, r3
 8003454:	f000 fa98 	bl	8003988 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003458:	f107 0308 	add.w	r3, r7, #8
 800345c:	2200      	movs	r2, #0
 800345e:	601a      	str	r2, [r3, #0]
 8003460:	605a      	str	r2, [r3, #4]
 8003462:	609a      	str	r2, [r3, #8]
 8003464:	60da      	str	r2, [r3, #12]
 8003466:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003468:	2300      	movs	r3, #0
 800346a:	607b      	str	r3, [r7, #4]
 800346c:	4b2a      	ldr	r3, [pc, #168]	; (8003518 <SystemClock_Config+0xd4>)
 800346e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003470:	4a29      	ldr	r2, [pc, #164]	; (8003518 <SystemClock_Config+0xd4>)
 8003472:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003476:	6413      	str	r3, [r2, #64]	; 0x40
 8003478:	4b27      	ldr	r3, [pc, #156]	; (8003518 <SystemClock_Config+0xd4>)
 800347a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003480:	607b      	str	r3, [r7, #4]
 8003482:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003484:	2300      	movs	r3, #0
 8003486:	603b      	str	r3, [r7, #0]
 8003488:	4b24      	ldr	r3, [pc, #144]	; (800351c <SystemClock_Config+0xd8>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003490:	4a22      	ldr	r2, [pc, #136]	; (800351c <SystemClock_Config+0xd8>)
 8003492:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003496:	6013      	str	r3, [r2, #0]
 8003498:	4b20      	ldr	r3, [pc, #128]	; (800351c <SystemClock_Config+0xd8>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80034a0:	603b      	str	r3, [r7, #0]
 80034a2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80034a4:	2302      	movs	r3, #2
 80034a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80034a8:	2301      	movs	r3, #1
 80034aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80034ac:	2310      	movs	r3, #16
 80034ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80034b0:	2302      	movs	r3, #2
 80034b2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80034b4:	2300      	movs	r3, #0
 80034b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80034b8:	2310      	movs	r3, #16
 80034ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80034bc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80034c0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80034c2:	2304      	movs	r3, #4
 80034c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80034c6:	2302      	movs	r3, #2
 80034c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80034ca:	2302      	movs	r3, #2
 80034cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80034ce:	f107 031c 	add.w	r3, r7, #28
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7fd fe42 	bl	800115c <HAL_RCC_OscConfig>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d001      	beq.n	80034e2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80034de:	f000 f82f 	bl	8003540 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80034e2:	230f      	movs	r3, #15
 80034e4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80034e6:	2302      	movs	r3, #2
 80034e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80034ea:	2300      	movs	r3, #0
 80034ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80034ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80034f4:	2300      	movs	r3, #0
 80034f6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80034f8:	f107 0308 	add.w	r3, r7, #8
 80034fc:	2102      	movs	r1, #2
 80034fe:	4618      	mov	r0, r3
 8003500:	f7fd fb72 	bl	8000be8 <HAL_RCC_ClockConfig>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d001      	beq.n	800350e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800350a:	f000 f819 	bl	8003540 <Error_Handler>
  }
}
 800350e:	bf00      	nop
 8003510:	3750      	adds	r7, #80	; 0x50
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	40023800 	.word	0x40023800
 800351c:	40007000 	.word	0x40007000

08003520 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
  serialFlag = 1;
 8003528:	4b04      	ldr	r3, [pc, #16]	; (800353c <HAL_UART_RxCpltCallback+0x1c>)
 800352a:	2201      	movs	r2, #1
 800352c:	701a      	strb	r2, [r3, #0]
}
 800352e:	bf00      	nop
 8003530:	370c      	adds	r7, #12
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	20000047 	.word	0x20000047

08003540 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003540:	b480      	push	{r7}
 8003542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003544:	bf00      	nop
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
	...

08003550 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003556:	2300      	movs	r3, #0
 8003558:	607b      	str	r3, [r7, #4]
 800355a:	4b10      	ldr	r3, [pc, #64]	; (800359c <HAL_MspInit+0x4c>)
 800355c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800355e:	4a0f      	ldr	r2, [pc, #60]	; (800359c <HAL_MspInit+0x4c>)
 8003560:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003564:	6453      	str	r3, [r2, #68]	; 0x44
 8003566:	4b0d      	ldr	r3, [pc, #52]	; (800359c <HAL_MspInit+0x4c>)
 8003568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800356e:	607b      	str	r3, [r7, #4]
 8003570:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003572:	2300      	movs	r3, #0
 8003574:	603b      	str	r3, [r7, #0]
 8003576:	4b09      	ldr	r3, [pc, #36]	; (800359c <HAL_MspInit+0x4c>)
 8003578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357a:	4a08      	ldr	r2, [pc, #32]	; (800359c <HAL_MspInit+0x4c>)
 800357c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003580:	6413      	str	r3, [r2, #64]	; 0x40
 8003582:	4b06      	ldr	r3, [pc, #24]	; (800359c <HAL_MspInit+0x4c>)
 8003584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800358a:	603b      	str	r3, [r7, #0]
 800358c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800358e:	bf00      	nop
 8003590:	370c      	adds	r7, #12
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop
 800359c:	40023800 	.word	0x40023800

080035a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80035a0:	b480      	push	{r7}
 80035a2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80035a4:	bf00      	nop
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr

080035ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035ae:	b480      	push	{r7}
 80035b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035b2:	e7fe      	b.n	80035b2 <HardFault_Handler+0x4>

080035b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80035b4:	b480      	push	{r7}
 80035b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80035b8:	e7fe      	b.n	80035b8 <MemManage_Handler+0x4>

080035ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80035ba:	b480      	push	{r7}
 80035bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80035be:	e7fe      	b.n	80035be <BusFault_Handler+0x4>

080035c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80035c0:	b480      	push	{r7}
 80035c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80035c4:	e7fe      	b.n	80035c4 <UsageFault_Handler+0x4>

080035c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80035c6:	b480      	push	{r7}
 80035c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80035ca:	bf00      	nop
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80035d4:	b480      	push	{r7}
 80035d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80035d8:	bf00      	nop
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr

080035e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80035e2:	b480      	push	{r7}
 80035e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80035e6:	bf00      	nop
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80035f4:	f7fc ffd8 	bl	80005a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80035f8:	bf00      	nop
 80035fa:	bd80      	pop	{r7, pc}

080035fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003600:	4802      	ldr	r0, [pc, #8]	; (800360c <TIM2_IRQHandler+0x10>)
 8003602:	f7fe f8a3 	bl	800174c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003606:	bf00      	nop
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	20000048 	.word	0x20000048

08003610 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003614:	4802      	ldr	r0, [pc, #8]	; (8003620 <USART2_IRQHandler+0x10>)
 8003616:	f7ff f82d 	bl	8002674 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800361a:	bf00      	nop
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	20000088 	.word	0x20000088

08003624 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003624:	b480      	push	{r7}
 8003626:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003628:	4b08      	ldr	r3, [pc, #32]	; (800364c <SystemInit+0x28>)
 800362a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800362e:	4a07      	ldr	r2, [pc, #28]	; (800364c <SystemInit+0x28>)
 8003630:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003634:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003638:	4b04      	ldr	r3, [pc, #16]	; (800364c <SystemInit+0x28>)
 800363a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800363e:	609a      	str	r2, [r3, #8]
#endif
}
 8003640:	bf00      	nop
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr
 800364a:	bf00      	nop
 800364c:	e000ed00 	.word	0xe000ed00

08003650 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b08e      	sub	sp, #56	; 0x38
 8003654:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003656:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800365a:	2200      	movs	r2, #0
 800365c:	601a      	str	r2, [r3, #0]
 800365e:	605a      	str	r2, [r3, #4]
 8003660:	609a      	str	r2, [r3, #8]
 8003662:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003664:	f107 0320 	add.w	r3, r7, #32
 8003668:	2200      	movs	r2, #0
 800366a:	601a      	str	r2, [r3, #0]
 800366c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800366e:	1d3b      	adds	r3, r7, #4
 8003670:	2200      	movs	r2, #0
 8003672:	601a      	str	r2, [r3, #0]
 8003674:	605a      	str	r2, [r3, #4]
 8003676:	609a      	str	r2, [r3, #8]
 8003678:	60da      	str	r2, [r3, #12]
 800367a:	611a      	str	r2, [r3, #16]
 800367c:	615a      	str	r2, [r3, #20]
 800367e:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8003680:	4b2d      	ldr	r3, [pc, #180]	; (8003738 <MX_TIM2_Init+0xe8>)
 8003682:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003686:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84;
 8003688:	4b2b      	ldr	r3, [pc, #172]	; (8003738 <MX_TIM2_Init+0xe8>)
 800368a:	2254      	movs	r2, #84	; 0x54
 800368c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800368e:	4b2a      	ldr	r3, [pc, #168]	; (8003738 <MX_TIM2_Init+0xe8>)
 8003690:	2200      	movs	r2, #0
 8003692:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8003694:	4b28      	ldr	r3, [pc, #160]	; (8003738 <MX_TIM2_Init+0xe8>)
 8003696:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800369a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800369c:	4b26      	ldr	r3, [pc, #152]	; (8003738 <MX_TIM2_Init+0xe8>)
 800369e:	2200      	movs	r2, #0
 80036a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036a2:	4b25      	ldr	r3, [pc, #148]	; (8003738 <MX_TIM2_Init+0xe8>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80036a8:	4823      	ldr	r0, [pc, #140]	; (8003738 <MX_TIM2_Init+0xe8>)
 80036aa:	f7fd ffb1 	bl	8001610 <HAL_TIM_Base_Init>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d001      	beq.n	80036b8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80036b4:	f7ff ff44 	bl	8003540 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80036b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036bc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80036be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036c2:	4619      	mov	r1, r3
 80036c4:	481c      	ldr	r0, [pc, #112]	; (8003738 <MX_TIM2_Init+0xe8>)
 80036c6:	f7fe fa0f 	bl	8001ae8 <HAL_TIM_ConfigClockSource>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d001      	beq.n	80036d4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80036d0:	f7ff ff36 	bl	8003540 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80036d4:	4818      	ldr	r0, [pc, #96]	; (8003738 <MX_TIM2_Init+0xe8>)
 80036d6:	f7fd ffc6 	bl	8001666 <HAL_TIM_PWM_Init>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d001      	beq.n	80036e4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80036e0:	f7ff ff2e 	bl	8003540 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036e4:	2300      	movs	r3, #0
 80036e6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036e8:	2300      	movs	r3, #0
 80036ea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80036ec:	f107 0320 	add.w	r3, r7, #32
 80036f0:	4619      	mov	r1, r3
 80036f2:	4811      	ldr	r0, [pc, #68]	; (8003738 <MX_TIM2_Init+0xe8>)
 80036f4:	f7fe fdf2 	bl	80022dc <HAL_TIMEx_MasterConfigSynchronization>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d001      	beq.n	8003702 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80036fe:	f7ff ff1f 	bl	8003540 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003702:	2360      	movs	r3, #96	; 0x60
 8003704:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 8003706:	2364      	movs	r3, #100	; 0x64
 8003708:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800370a:	2300      	movs	r3, #0
 800370c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800370e:	2300      	movs	r3, #0
 8003710:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003712:	1d3b      	adds	r3, r7, #4
 8003714:	2200      	movs	r2, #0
 8003716:	4619      	mov	r1, r3
 8003718:	4807      	ldr	r0, [pc, #28]	; (8003738 <MX_TIM2_Init+0xe8>)
 800371a:	f7fe f91f 	bl	800195c <HAL_TIM_PWM_ConfigChannel>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d001      	beq.n	8003728 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8003724:	f7ff ff0c 	bl	8003540 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8003728:	4803      	ldr	r0, [pc, #12]	; (8003738 <MX_TIM2_Init+0xe8>)
 800372a:	f000 f82d 	bl	8003788 <HAL_TIM_MspPostInit>

}
 800372e:	bf00      	nop
 8003730:	3738      	adds	r7, #56	; 0x38
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	20000048 	.word	0x20000048

0800373c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800374c:	d115      	bne.n	800377a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800374e:	2300      	movs	r3, #0
 8003750:	60fb      	str	r3, [r7, #12]
 8003752:	4b0c      	ldr	r3, [pc, #48]	; (8003784 <HAL_TIM_Base_MspInit+0x48>)
 8003754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003756:	4a0b      	ldr	r2, [pc, #44]	; (8003784 <HAL_TIM_Base_MspInit+0x48>)
 8003758:	f043 0301 	orr.w	r3, r3, #1
 800375c:	6413      	str	r3, [r2, #64]	; 0x40
 800375e:	4b09      	ldr	r3, [pc, #36]	; (8003784 <HAL_TIM_Base_MspInit+0x48>)
 8003760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003762:	f003 0301 	and.w	r3, r3, #1
 8003766:	60fb      	str	r3, [r7, #12]
 8003768:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800376a:	2200      	movs	r2, #0
 800376c:	2100      	movs	r1, #0
 800376e:	201c      	movs	r0, #28
 8003770:	f7fd f837 	bl	80007e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003774:	201c      	movs	r0, #28
 8003776:	f7fd f850 	bl	800081a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800377a:	bf00      	nop
 800377c:	3710      	adds	r7, #16
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	40023800 	.word	0x40023800

08003788 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b088      	sub	sp, #32
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003790:	f107 030c 	add.w	r3, r7, #12
 8003794:	2200      	movs	r2, #0
 8003796:	601a      	str	r2, [r3, #0]
 8003798:	605a      	str	r2, [r3, #4]
 800379a:	609a      	str	r2, [r3, #8]
 800379c:	60da      	str	r2, [r3, #12]
 800379e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037a8:	d11d      	bne.n	80037e6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037aa:	2300      	movs	r3, #0
 80037ac:	60bb      	str	r3, [r7, #8]
 80037ae:	4b10      	ldr	r3, [pc, #64]	; (80037f0 <HAL_TIM_MspPostInit+0x68>)
 80037b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b2:	4a0f      	ldr	r2, [pc, #60]	; (80037f0 <HAL_TIM_MspPostInit+0x68>)
 80037b4:	f043 0301 	orr.w	r3, r3, #1
 80037b8:	6313      	str	r3, [r2, #48]	; 0x30
 80037ba:	4b0d      	ldr	r3, [pc, #52]	; (80037f0 <HAL_TIM_MspPostInit+0x68>)
 80037bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	60bb      	str	r3, [r7, #8]
 80037c4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PA5     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80037c6:	2320      	movs	r3, #32
 80037c8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037ca:	2302      	movs	r3, #2
 80037cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ce:	2300      	movs	r3, #0
 80037d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037d2:	2300      	movs	r3, #0
 80037d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80037d6:	2301      	movs	r3, #1
 80037d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037da:	f107 030c 	add.w	r3, r7, #12
 80037de:	4619      	mov	r1, r3
 80037e0:	4804      	ldr	r0, [pc, #16]	; (80037f4 <HAL_TIM_MspPostInit+0x6c>)
 80037e2:	f7fd f857 	bl	8000894 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80037e6:	bf00      	nop
 80037e8:	3720      	adds	r7, #32
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	40023800 	.word	0x40023800
 80037f4:	40020000 	.word	0x40020000

080037f8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80037fc:	4b11      	ldr	r3, [pc, #68]	; (8003844 <MX_USART2_UART_Init+0x4c>)
 80037fe:	4a12      	ldr	r2, [pc, #72]	; (8003848 <MX_USART2_UART_Init+0x50>)
 8003800:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003802:	4b10      	ldr	r3, [pc, #64]	; (8003844 <MX_USART2_UART_Init+0x4c>)
 8003804:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003808:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800380a:	4b0e      	ldr	r3, [pc, #56]	; (8003844 <MX_USART2_UART_Init+0x4c>)
 800380c:	2200      	movs	r2, #0
 800380e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003810:	4b0c      	ldr	r3, [pc, #48]	; (8003844 <MX_USART2_UART_Init+0x4c>)
 8003812:	2200      	movs	r2, #0
 8003814:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003816:	4b0b      	ldr	r3, [pc, #44]	; (8003844 <MX_USART2_UART_Init+0x4c>)
 8003818:	2200      	movs	r2, #0
 800381a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800381c:	4b09      	ldr	r3, [pc, #36]	; (8003844 <MX_USART2_UART_Init+0x4c>)
 800381e:	220c      	movs	r2, #12
 8003820:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003822:	4b08      	ldr	r3, [pc, #32]	; (8003844 <MX_USART2_UART_Init+0x4c>)
 8003824:	2200      	movs	r2, #0
 8003826:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003828:	4b06      	ldr	r3, [pc, #24]	; (8003844 <MX_USART2_UART_Init+0x4c>)
 800382a:	2200      	movs	r2, #0
 800382c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800382e:	4805      	ldr	r0, [pc, #20]	; (8003844 <MX_USART2_UART_Init+0x4c>)
 8003830:	f7fe fde4 	bl	80023fc <HAL_UART_Init>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d001      	beq.n	800383e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800383a:	f7ff fe81 	bl	8003540 <Error_Handler>
  }

}
 800383e:	bf00      	nop
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	20000088 	.word	0x20000088
 8003848:	40004400 	.word	0x40004400

0800384c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b08a      	sub	sp, #40	; 0x28
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003854:	f107 0314 	add.w	r3, r7, #20
 8003858:	2200      	movs	r2, #0
 800385a:	601a      	str	r2, [r3, #0]
 800385c:	605a      	str	r2, [r3, #4]
 800385e:	609a      	str	r2, [r3, #8]
 8003860:	60da      	str	r2, [r3, #12]
 8003862:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a1d      	ldr	r2, [pc, #116]	; (80038e0 <HAL_UART_MspInit+0x94>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d133      	bne.n	80038d6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800386e:	2300      	movs	r3, #0
 8003870:	613b      	str	r3, [r7, #16]
 8003872:	4b1c      	ldr	r3, [pc, #112]	; (80038e4 <HAL_UART_MspInit+0x98>)
 8003874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003876:	4a1b      	ldr	r2, [pc, #108]	; (80038e4 <HAL_UART_MspInit+0x98>)
 8003878:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800387c:	6413      	str	r3, [r2, #64]	; 0x40
 800387e:	4b19      	ldr	r3, [pc, #100]	; (80038e4 <HAL_UART_MspInit+0x98>)
 8003880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003886:	613b      	str	r3, [r7, #16]
 8003888:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800388a:	2300      	movs	r3, #0
 800388c:	60fb      	str	r3, [r7, #12]
 800388e:	4b15      	ldr	r3, [pc, #84]	; (80038e4 <HAL_UART_MspInit+0x98>)
 8003890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003892:	4a14      	ldr	r2, [pc, #80]	; (80038e4 <HAL_UART_MspInit+0x98>)
 8003894:	f043 0301 	orr.w	r3, r3, #1
 8003898:	6313      	str	r3, [r2, #48]	; 0x30
 800389a:	4b12      	ldr	r3, [pc, #72]	; (80038e4 <HAL_UART_MspInit+0x98>)
 800389c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389e:	f003 0301 	and.w	r3, r3, #1
 80038a2:	60fb      	str	r3, [r7, #12]
 80038a4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80038a6:	230c      	movs	r3, #12
 80038a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038aa:	2302      	movs	r3, #2
 80038ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80038ae:	2301      	movs	r3, #1
 80038b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038b2:	2303      	movs	r3, #3
 80038b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80038b6:	2307      	movs	r3, #7
 80038b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038ba:	f107 0314 	add.w	r3, r7, #20
 80038be:	4619      	mov	r1, r3
 80038c0:	4809      	ldr	r0, [pc, #36]	; (80038e8 <HAL_UART_MspInit+0x9c>)
 80038c2:	f7fc ffe7 	bl	8000894 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80038c6:	2200      	movs	r2, #0
 80038c8:	2100      	movs	r1, #0
 80038ca:	2026      	movs	r0, #38	; 0x26
 80038cc:	f7fc ff89 	bl	80007e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80038d0:	2026      	movs	r0, #38	; 0x26
 80038d2:	f7fc ffa2 	bl	800081a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80038d6:	bf00      	nop
 80038d8:	3728      	adds	r7, #40	; 0x28
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	40004400 	.word	0x40004400
 80038e4:	40023800 	.word	0x40023800
 80038e8:	40020000 	.word	0x40020000

080038ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80038ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003924 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80038f0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80038f2:	e003      	b.n	80038fc <LoopCopyDataInit>

080038f4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80038f4:	4b0c      	ldr	r3, [pc, #48]	; (8003928 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80038f6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80038f8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80038fa:	3104      	adds	r1, #4

080038fc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80038fc:	480b      	ldr	r0, [pc, #44]	; (800392c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80038fe:	4b0c      	ldr	r3, [pc, #48]	; (8003930 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003900:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003902:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003904:	d3f6      	bcc.n	80038f4 <CopyDataInit>
  ldr  r2, =_sbss
 8003906:	4a0b      	ldr	r2, [pc, #44]	; (8003934 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003908:	e002      	b.n	8003910 <LoopFillZerobss>

0800390a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800390a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800390c:	f842 3b04 	str.w	r3, [r2], #4

08003910 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003910:	4b09      	ldr	r3, [pc, #36]	; (8003938 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003912:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003914:	d3f9      	bcc.n	800390a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003916:	f7ff fe85 	bl	8003624 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800391a:	f000 f811 	bl	8003940 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800391e:	f7ff fd1f 	bl	8003360 <main>
  bx  lr    
 8003922:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003924:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003928:	080039d8 	.word	0x080039d8
  ldr  r0, =_sdata
 800392c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003930:	2000001c 	.word	0x2000001c
  ldr  r2, =_sbss
 8003934:	2000001c 	.word	0x2000001c
  ldr  r3, = _ebss
 8003938:	200000c8 	.word	0x200000c8

0800393c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800393c:	e7fe      	b.n	800393c <ADC_IRQHandler>
	...

08003940 <__libc_init_array>:
 8003940:	b570      	push	{r4, r5, r6, lr}
 8003942:	4e0d      	ldr	r6, [pc, #52]	; (8003978 <__libc_init_array+0x38>)
 8003944:	4c0d      	ldr	r4, [pc, #52]	; (800397c <__libc_init_array+0x3c>)
 8003946:	1ba4      	subs	r4, r4, r6
 8003948:	10a4      	asrs	r4, r4, #2
 800394a:	2500      	movs	r5, #0
 800394c:	42a5      	cmp	r5, r4
 800394e:	d109      	bne.n	8003964 <__libc_init_array+0x24>
 8003950:	4e0b      	ldr	r6, [pc, #44]	; (8003980 <__libc_init_array+0x40>)
 8003952:	4c0c      	ldr	r4, [pc, #48]	; (8003984 <__libc_init_array+0x44>)
 8003954:	f000 f820 	bl	8003998 <_init>
 8003958:	1ba4      	subs	r4, r4, r6
 800395a:	10a4      	asrs	r4, r4, #2
 800395c:	2500      	movs	r5, #0
 800395e:	42a5      	cmp	r5, r4
 8003960:	d105      	bne.n	800396e <__libc_init_array+0x2e>
 8003962:	bd70      	pop	{r4, r5, r6, pc}
 8003964:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003968:	4798      	blx	r3
 800396a:	3501      	adds	r5, #1
 800396c:	e7ee      	b.n	800394c <__libc_init_array+0xc>
 800396e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003972:	4798      	blx	r3
 8003974:	3501      	adds	r5, #1
 8003976:	e7f2      	b.n	800395e <__libc_init_array+0x1e>
 8003978:	080039d0 	.word	0x080039d0
 800397c:	080039d0 	.word	0x080039d0
 8003980:	080039d0 	.word	0x080039d0
 8003984:	080039d4 	.word	0x080039d4

08003988 <memset>:
 8003988:	4402      	add	r2, r0
 800398a:	4603      	mov	r3, r0
 800398c:	4293      	cmp	r3, r2
 800398e:	d100      	bne.n	8003992 <memset+0xa>
 8003990:	4770      	bx	lr
 8003992:	f803 1b01 	strb.w	r1, [r3], #1
 8003996:	e7f9      	b.n	800398c <memset+0x4>

08003998 <_init>:
 8003998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800399a:	bf00      	nop
 800399c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800399e:	bc08      	pop	{r3}
 80039a0:	469e      	mov	lr, r3
 80039a2:	4770      	bx	lr

080039a4 <_fini>:
 80039a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039a6:	bf00      	nop
 80039a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039aa:	bc08      	pop	{r3}
 80039ac:	469e      	mov	lr, r3
 80039ae:	4770      	bx	lr
