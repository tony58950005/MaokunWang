/*
 * SpeedMeasurement.cpp
 *
 *  Created on: 2020年11月2日
 *      Author: 59488
 */

#include <SpeedMeasurement.h>
#include "main.h"
#include "stm32f4xx.h"
#include "stm32f4xx_hal.h"
SpeedMeasurement::SpeedMeasurement()
{
}

void SpeedMeasurement::Encoder_Init_TIM2(void)
{
	//MOTOR PWM is for TIM2, PC8
	TIM_Base_InitTypeDef TIM_TimeBaseStructure;
		TIM_IC_InitTypeDef TIM_ICInitStructure;
		GPIO_InitTypeDef GPIO_InitStructure;
	//RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);//Enable the timer2
	//RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);//Enable timer of port PA

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8//config the port
	GPIO_initStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;//choose floating input
	GPIO_Init(GPIOC, &GPIO_InitStructure);//set initialization of GPIOA

	TIM_TimeBaseStructure(&TIM_TimeBaseStructure);
	TIM_TimeBaseStructure.TIM_Prescaler=0x0;//prescalar
	TIM_TimeBaseStructure.TIM_Period = ECDOER_TIM_PERIOD;//set the value for counter
	TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;//choose whether we have the clock prescalar
	TIM_TimeBaseStructure.TIM_CounterMode=TIM_CounterMode_Up;//do the up counter
	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);

	//use the mode3 for the encoder
	TIM_EncoderInterfacConfig(TIM2, TIM_EncoderMode_TI12, TIM_ICOlarity_Rising, TIM_ICPolarity_Rising);

	TIM_ICStructure(&TIM_ICInitStructure);
	TIM_ICInitSTructure.TIM_ICFilter = 10;
	TIM_ICInit(TIM2, &TIM_ICInitStructure);
	TIM_ClearFlag(TIM2, TIM_FLAG_Update); //clear the TIM flag


	//Reset counter
	TIM_SetCounter(TIM2,0);
	TIM2->CNT = 0x7fff;
	TIM_Cmd(TIM2, ENABLE);
}

void SpeedMeasurement::Encoder_Init_TIM4(void)
{
	//MOTOR PWM is for TIM2, PC8
	TIM_Base_InitTypeDef TIM_TimeBaseStructure;
		TIM_IC_InitTypeDef TIM_ICInitStructure;
		GPIO_InitTypeDef GPIO_InitStructure;
	//RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);//Enable the timer2
	//RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);//Enable timer of port PA

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8//config the port
	GPIO_initStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;//choose floating input
	GPIO_Init(GPIOC, &GPIO_InitStructure);//set initialization of GPIOA

	TIM_TimeBaseStructure(&TIM_TimeBaseStructure);
	TIM_TimeBaseStructure.TIM_Prescaler=0x0;//prescalar
	TIM_TimeBaseStructure.TIM_Period = ECDOER_TIM_PERIOD;//set the value for counter
	TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;//choose whether we have the clock prescalar
	TIM_TimeBaseStructure.TIM_CounterMode=TIM_CounterMode_Up;//do the up counter
	TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure);

	//use the mode3 for the encoder
	TIM_EncoderInterfacConfig(TIM4, TIM_EncoderMode_TI12, TIM_ICOlarity_Rising, TIM_ICPolarity_Rising);

	TIM_ICStructure(&TIM_ICInitStructure);
	TIM_ICInitSTructure.TIM_ICFilter = 10;
	TIM_ICInit(TIM4, &TIM_ICInitStructure);
	TIM_ClearFlag(TIM4, TIM_FLAG_Update); //clear the TIM flag


	//Reset counter
	TIM_SetCounter(TIM4,0);
	TIM4->CNT = 0x7fff;
	TIM_Cmd(TIM4, ENABLE);
}

int8_t SpeedMeasurement::getTIMx_DetaCnt(TIM_TypeDef * TIMx)
{
	int8_t cnt;
	cnt=TIMx-> CNT-0x7fff;
	TIMx->CNT = 0x7fff;
	return cnt;

}

/*function: calculate the speed of roatation
 * input param: uint8_t *LeftSpeed, uint8_t *rightSpeed
 * return: void
 * calculate the linear speed of the rotation, positive/negative, speed=value*1000(unit: mm/s)
 * the changed value of the encoder(converted into distance in straight line) * 200s(5ms for one count),
 * and get m/s*1000 converted into integers
 * the number of duty cycle for one circle
 * left: 1560
 * right: 1560
 * the radius of the wheel: 0.003m
 * the perimeter:2*pi*r
 * the distance for one duty cycle
 * 	left:2*pi*0.003/1560
 * 	right:2*pi*0.003/1560
 *
 */
void SpeedMeasurement::Get_Motor_Speed(uint8_t *leftSpeed, uint8_t *rightSpeed)
{
	//5ms speed measurement, one time unit is 5ms
	*leftSpeed = getTIMx_DetaCnt(TIM2)*1000*200*2*3.1416*0.003/1560;
	*rightSpeed = getTIMx_DetaCnt(TIM4)*1000*200*2*3.1416*0.003/1560;

}

