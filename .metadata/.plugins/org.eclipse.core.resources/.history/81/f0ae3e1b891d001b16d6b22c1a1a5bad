/*
 * SpeedMeasurement.cpp
 *
 *  Created on: 2020年11月2日
 *      Author: 59488
 */

#include <SpeedMeasurement.h>
#include "main.h"
#include "stm32f4xx.h"
#include "stm32f4xx_hal.h"
SpeedMeasurement::SpeedMeasurement()
{
	HAL_TIM_OC_Start (&htim8, TIM_CHANNEL_1);
	HAL_TIM_OC_Start (&htim8, TIM_CHANNEL_2);
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_1);
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_2 );


}


void SpeedMeasurement::Encoder_Init_TIM8(void)
{
	//MOTOR PWM is for TIM8, CH1, CH2

	  TIM_MasterConfigTypeDef sMasterConfig = {0};
	  TIM_OC_InitTypeDef sConfigOC = {0};

	  htim8.Instance = TIM8;
	  htim8.Init.Prescaler = 89;
	  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
	  htim8.Init.Period = 1999;
	  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	 // htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
	  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
	  {
	    Error_Handler(SpeedMeasurementError);
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
	  {
	    Error_Handler(SpeedMeasurementError);
	  }
	  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
	  sConfigOC.Pulse = 1999;
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
	  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
	  {
	    Error_Handler(SpeedMeasurementError);
	  }
	  //sConfigOC.Pulse = 7499;
	  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
	  {
	    Error_Handler();
	  }
	  //HAL_TIM_MspPostInit(&htim8);
	  HAL_TIM_IC_MspInit(&htim8);


}
uint8_t getTIMx_DetaCnt(TIM_TypeDef * TIMx)
{
	uint8_t cnt;
	cnt = TIMx->CNT-0x7fff;
	TIMx->CNT = 0x7fff;
	return cnt;
}


/*function: calculate the speed of roatation
 * input param: uint8_t *LeftSpeed, uint8_t *rightSpeed
 * return: void
 * calculate the linear speed of the rotation, positive/negative, speed=value*1000(unit: mm/s)
 * the changed value of the encoder(converted into distance in straight line) * 200s(5ms for one count),
 * and get m/s*1000 converted into integers
 * the number of duty cycle for one circle
 * left: 1560
 * right: 1560
 * the radius of the wheel: 0.003m
 * the perimeter:2*pi*r
 * the distance for one duty cycle
 * 	left:2*pi*0.003/1560
 * 	right:2*pi*0.003/1560
 *
 */
void SpeedMeasurement::Get_Motor_Speed(uint8_t *leftSpeed, uint8_t *rightSpeed)
{
	//5ms speed measurement, one time unit is 5ms
	*leftSpeed = getTIMx_DetaCnt(TIM8)*1000*200*2*3.1416*0.003/1560;
	*rightSpeed = getTIMx_DetaCnt(TIM8)*1000*200*2*3.1416*0.003/1560;

}

