/*
 * SpeedMeasurement.cpp
 *
 *  Created on: 2020年11月2日
 *      Author: 59488
 */

#include <SpeedMeasurement.h>
#include "main.h"
#include "stm32f4xx.h"
#include "stm32f4xx_hal.h"
SpeedMeasurement::SpeedMeasurement()
{
	HAL_TIM_OC_Start (&htim8, TIM_CHANNEL_1);
	HAL_TIM_OC_Start (&htim8, TIM_CHANNEL_2);
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_1);
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_2 );


}


void SpeedMeasurement::Encoder_Init_TIM8()
{
	//MOTOR PWM is for TIM8, CH1, CH2
	  TIM_Encoder_InitTypeDef sConfig = {0};
	  TIM_MasterConfigTypeDef sMasterConfig = {0};

	  GPIO_InitTypeDef GPIO_InitStructure;
	  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6|GPIO_Pin_7;	//端口配置
	  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;   //浮空输入
	  GPIO_Init(GPIOC, &GPIO_InitStructure);

	  htim8.Instance = TIM8;
	  htim8.Init.Prescaler = 83;
	  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
	  htim8.Init.Period = 1999;
	  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	  //htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
	  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
	  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
	  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
	  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
	  sConfig.IC1Filter = 0;
	  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
	  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
	  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
	  sConfig.IC2Filter = 0;
	  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
	  {
	    Error_Handler(SpeedMeasurementError);
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
	  {
	    Error_Handler(SpeedMeasurementError);
	  }
	  TIM_SetCounter(TIM8,0);
	  	TIM8->CNT = 0x7fff;
	  	TIM_Cmd(TIM8, ENABLE);


}
uint8_t getTIMx_DeltaCnt(TIM_TypeDef* TIMx)
{
	uint8_t cnt;
	cnt = TIMx->CNT-0x7fff;
	TIMx->CNT=0x7fff;
	return cnt;
}


/*function: calculate the speed of roatation
 * input param: uint8_t *LeftSpeed, uint8_t *rightSpeed
 * return: void
 * calculate the linear speed of the rotation, positive/negative, speed=value*1000(unit: mm/s)
 * the changed value of the encoder(converted into distance in straight line) * 200s(5ms for one count),
 * and get m/s*1000 converted into integers
 * the number of duty cycle for one circle
 * left: 1560
 * right: 1560
 * the radius of the wheel: 0.003m
 * the perimeter:2*pi*r
 * the distance for one duty cycle
 * 	left:2*pi*0.003/1560
 * 	right:2*pi*0.003/1560
 *
 */


