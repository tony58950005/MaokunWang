/*
 * PIDController.cpp
 *
 *  Created on: 2020年10月2日
 *      Author: 59488
 */

#include <PIDController.h>
PID_Controller::PID_Controller(PID_Controller *pid){
	pid->integrator =0.0f;
		pid->prevError = 0.0f;

		pid->differentiator=0.0f;
		pid->prevMeasurement= 0.0f;

		pid->out=0.0f;
}


float PID_Controller::PIDController_Update(PID_Controller *pid, float setpoint, float measurement){
	//error signal
	float error =setpoint- measurement;


	//proportional
	float proportional =pid->Kp * error;

	//integral
	pid->integrator = pid->integrator + 0.5f * pid->Ki * pid->T * (error+ pid-> prevError);

	//anti-windup via dynamic integrator clamping
	float limMinInt, limMaxInt;

	//compare integrator limits,set up limits we need to set on the integrator
	if(pid->limMax > proportional){
		limMaxInt=pid->limMax-proportional;
	}else{
		limMaxInt=0.0f;
	}

	if(pid->limMin < proportional){
		limMinInt=pid->limMin-proportional;
	}else{
		limMinInt=0.0f;
	}

	//clamp integrator
	if(pid->integrator > limMaxInt){
		pid->integrator = limMaxInt;
	}else if(pid->integrator < limMinInt){
		pid->integrator = limMinInt;
	}

	//derivative band-limited differentiator
	pid->differentiator= (2.0f* pid->Kd * (measurement -pid->prevMeasurement)
			+(2.0f * pid->tau-pid->T)* pid->differentiator)
					/(2.0f * pid->tau + pid->T);

	//compute output and apply limits
	pid->out=proportional + pid->integrator +pid->differentiator;
	if(pid->out > pid->limMax){
		pid->out = pid->limMax;
	}else if(pid->out < pid->limMax){
		pid->out=pid->limMin;
	}
	//store error and measurement for later use
	pid->prevError = error;
	pid->prevMeasurement = measurement;

	//return controller output
	return pid->out;

}

