/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include <ADCClass.h>
#include <HighLevelComm.h>
#include <PIDController.h>
#include <SpeedMeasurement.h>
#include "main.h"
#include "stm32f4xx_hal_tim.h"
#include "stm32f4xx_hal.h"
#include "string.h"
#include "stdint.h"
#include "stdlib.h"
#include "stdio.h"
#include <cstdlib>
#include <cmath>

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define USE_FULL_ASSERT
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
TIM_HandleTypeDef htim8;
/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void MX_GPIO_Init(void);
bool obstacleDetection(ADCClass& adc);
bool getMotorSpeed(SpeedMeasurement& motorSpeed);
void controlSpeed(PID_Controller& motor, float referenceSpeed, float actualSpeed);
void setSteering(PWM& servoPWM, float steeringAngle);
PID_Controller motorControlInit(void);
int getDistanceL();
int getDistanceM();
int getDistanceR();
//SpeedMeasurement motorSpeedInit(void);
PWM steeringServoInit(void);

int _write(int file, char *ptr, int len)
{
/* Implement your write code here, this is used by puts and printf for example */
	int i=0;
	for(i=0 ; i<len ; i++)
	  ITM_SendChar((*ptr++));
	return len;
}





/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
UART_HandleTypeDef huart2;
TIM_HandleTypeDef htim2;
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */

//TODO (Akos): PWM class with three channels
//TODO (Akos): High-level architecture

int main(void)
{
	/* MCU Configuration--------------------------------------------------------*/
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();

	/* Configure the system clock */
	SystemClock_Config();

	/* Initialize all configured peripherals */
	MX_GPIO_Init();

	ADCClass adc;
	PWM servoPWM = steeringServoInit();
	PID_Controller motor = motorControlInit();
	SpeedMeasurement motorSpeed; //=motorSpeedInit();
	HighLevelComm HighLevelCommTest(huart2, htim2);

	while (1)
	{
		setSteering(servoPWM, 0.0f);
		controlSpeed(motor, 0.0f, 0.0f);
		if(getMotorSpeed(motorSpeed)){

		}
		if(obstacleDetection(adc)){

		}
		HighLevelCommTest.ParseMessage();

	}
}

SpeedMeasurement motorSpeedInit()
{
	SpeedMeasurement DCMotor;
	return DCMotor;
}



bool getMotorSpeed(SpeedMeasurement& motorSpeed)
{
	//5ms speed measurement, one time unit is 5ms
	static uint8_t leftWheelEncoderNow    = 0;
	static uint8_t rightWheelEncoderNow   = 0;
	static uint8_t leftWheelEncoderLast   = 0;
	static uint8_t rightWheelEncoderLast  = 0;

	leftWheelEncoderNow += motorSpeed.getTIMx_DeltaCnt(1); //(TIM2->CCR1);
	rightWheelEncoderNow+= motorSpeed.getTIMx_DeltaCnt(0);//(TIM2->CCR2);

	 //speed measurement for every 5ms
	realLeftSpeed   = (leftWheelEncoderNow - leftWheelEncoderLast)*1000*200*2*3.14*0.003/1000;//modify the last number "1000"->"xxxx"
	realRightSpeed  = (rightWheelEncoderNow - rightWheelEncoderLast)*1000*200*2*3.14*0.003/1000;

	//record the last time encoder value
	leftWheelEncoderLast  = leftWheelEncoderNow;
	rightWheelEncoderLast = rightWheelEncoderNow;
}

PWM steeringServoInit()
{
	TIM_Base_InitTypeDef servoInit;
	servoInit.Prescaler = 83;
	servoInit.CounterMode = TIM_COUNTERMODE_UP;
	servoInit.Period = 20000;
	servoInit.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	servoInit.RepetitionCounter = 0;

	TIM_OC_InitTypeDef sConfigOC = {0};
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
	sConfigOC.Pulse = 1500;
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
	PWM servoPWM(TIM10, servoInit, sConfigOC, TIM_CHANNEL_1);

	return servoPWM;
}

PID_Controller motorControlInit()
{
	TIM_Base_InitTypeDef servoInit;
	servoInit.Prescaler = 1;
	servoInit.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
	servoInit.Period = 2100;
	servoInit.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	servoInit.RepetitionCounter = 0;

	TIM_OC_InitTypeDef sConfigOC = {0};
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
	sConfigOC.Pulse = servoInit.Period/2;
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
	PWM motorPWM1(TIM8, servoInit, sConfigOC, TIM_CHANNEL_1);
	PWM motorPWM2(TIM8, servoInit, sConfigOC, TIM_CHANNEL_2);
	PID_Controller motorController(1.0, 0.0, 0.0, motorPWM1, motorPWM2);

	return motorController;
}

bool obstacleDetection(ADCClass& adc)
{
	//Measure the signals of the Sharp sensors
	float sensorsVoltage[3];
	for (int i = 0; i < 3; i++) {
		sensorsVoltage[i] = adc.getAnalogValue(i) / 1000.0f;
	}

	//Convert the voltage[V] to distance[cm] using the characteristics of the sensor
	//Sensor measuring distance (4cm-30cm)
	//the slope1[4cm-6cm] has little difference with the slope2[6cm-30cm]
	float distance[3];
	for (int i = 0; i < 3; i++) {
		if (sensorsVoltage[i] >= 2.0 && sensorsVoltage[i] <= 3.0) {
			distance[i] = 8.55 / (sensorsVoltage[i] - 0.5925); //distance->[4cm,6cm]
		} else if (sensorsVoltage[i] >= 0.41) {
			distance[i] = 13.156 / (sensorsVoltage[i] + 0.0289); //distance->[6cm,30cm]
		} else {
			distance[i] = infinityf(); //the distance here does not make sense.
		}
	}
	distanceL=distance[0];
	distanceM=distance[1];
	distanceR=distance[2];


	//Check distances: return true when there is some obstacle in front of the car.
	//Use threshold value: 10 cm
	for (int i = 0; i < 3; i++) {
		if (distance[i] <= 10) {
			return true;
		}
	}
	return false;
}

//int getDistanceL(){
//	return distanceL;
//}
//int getDistanceM(){
//	return distanceM;
//}
//int getDistanceR(){
//	return distanceR;
//}
void controlSpeed(PID_Controller& motor, float referenceSpeed, float actualSpeed)
{
	//PID for speed control
	motor.PIDController_Update(referenceSpeed, actualSpeed);
}

void setSteering(PWM& servoPWM, float steeringAngle)
{
	//TODO: set the steering for the servo
	//presuming the do-able steeringAngle ranges from -45 (PWM->5%) to 45(PWM->10%) degrees.
	// the characteristic line (saturated steeringAgnle, PWM high level line[1.5ms, 2.5ms])
	//goes through point (45, 10[%]),(-45, 5[%])
	float percent=1.0f/18.0f*steeringAngle + 135.0f/18.0f;
	if(servoPWM.setPWM(percent)==false)
		Error_Handler(PWMError);
}


/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
	  Error_Handler(ClockError);
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler(ClockError);
  }
}


/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  __HAL_RCC_TIM10_CLK_ENABLE();
  __HAL_RCC_TIM8_CLK_ENABLE();
  __HAL_RCC_TIM2_CLK_ENABLE();

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  //ADC GPIO configuration
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  //UART GPIO configuration
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  //PWM GPIO configuration
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  //Sharp power GPIO configuration
  GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  //Servo PWM GPIO configuration
  GPIO_InitStruct.Pin = GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  //Motor EN GPIO configuration
  GPIO_InitStruct.Pin = GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  //Motor PWM GPIO configuration
  GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  //Encoder GPIO configuration
  GPIO_InitTypeDef GPIO_InitStructure;
  GPIO_InitStructure.Pin = GPIO_PIN_0||GPIO_PIN_1;	//port setting
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStructure.Alternate = GPIO_AF1_TIM2;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);

  //Enable Sharp and Servo 5V power supply
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
}

/* USER CODE BEGIN 4 */
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(ErrorState errorSource)
{
	/* USER CODE BEGIN Error_Handler_Debug */
	while(1);	//TODO: store some error information in a global variable, it can be read from the high level comm
	switch (errorSource)
	{
		case PWMError:
			ErrorInfo= "PWM error!\n";
			break;
		case ADCError:
			ErrorInfo= "ADC error!\n";
			break;
		case HighLevelCommError:
			ErrorInfo= "High-Level Communication error!\n";
			break;
		case AssertFailError:
			ErrorInfo= "Assert Fail error!\n";
			break;
		case UartError:
			ErrorInfo= "UART error!\n";
			break;
		default:
			break;
	}
	/* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	Error_Handler(AssertFailError);
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
